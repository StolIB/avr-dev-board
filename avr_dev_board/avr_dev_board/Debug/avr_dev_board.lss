
avr_dev_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00000bdc  00000c70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bdc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015b  00800154  00800154  00000cc4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e0  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001456  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000723  00000000  00000000  0000232a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000811  00000000  00000000  00002a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000047c  00000000  00000000  00003260  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000500  00000000  00000000  000036dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b12  00000000  00000000  00003bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  000046ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b8 03 	jmp	0x770	; 0x770 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ed       	ldi	r30, 0xDC	; 220
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 35       	cpi	r26, 0x54	; 84
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 e5       	ldi	r26, 0x54	; 84
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 3a       	cpi	r26, 0xAF	; 175
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  9e:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:
	/* If more than 8-bit precision is used - read ADCL first and ADCH second. */
	return adc_result;
}

ISR(ADC_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
	adc_done = 1;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	80 93 56 01 	sts	0x0156, r24
	uint16_t temp = 0;
	temp |= ADCL;
  bc:	80 91 78 00 	lds	r24, 0x0078
	temp |= (ADCH << 8);
  c0:	20 91 79 00 	lds	r18, 0x0079
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	92 2b       	or	r25, r18
	adc_result = temp;
  c8:	90 93 55 01 	sts	0x0155, r25
  cc:	80 93 54 01 	sts	0x0154, r24

	//adc_result = (int)(adc_result + (float)((temp - adc_result)*0.20));
}
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	2f 91       	pop	r18
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <main>:
#include "util.h"
#include <string.h>

int main()
{
	enable_h_bridge();
  e0:	0e 94 0c 01 	call	0x218	; 0x218 <enable_h_bridge>
	init_uart(UART_9600);
  e4:	83 e3       	ldi	r24, 0x33	; 51
  e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <init_uart>
	init_timer_1(PRESCALER8, 1000);
  ea:	68 ee       	ldi	r22, 0xE8	; 232
  ec:	73 e0       	ldi	r23, 0x03	; 3
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	0e 94 1c 01 	call	0x238	; 0x238 <init_timer_1>

	while (1) {
		start_motor_CCW();
  f4:	0e 94 16 01 	call	0x22c	; 0x22c <start_motor_CCW>
		send_string("Hello World from AVR CCW!\n\r");
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	0e 94 a0 03 	call	0x740	; 0x740 <send_string>
		pause_loop(4000);
 100:	80 ea       	ldi	r24, 0xA0	; 160
 102:	9f e0       	ldi	r25, 0x0F	; 15
 104:	0e 94 17 02 	call	0x42e	; 0x42e <pause_loop>
		stop_motor();
 108:	0e 94 19 01 	call	0x232	; 0x232 <stop_motor>
		send_string("Hello World from AVR stop!\n\r");
 10c:	8c e1       	ldi	r24, 0x1C	; 28
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	0e 94 a0 03 	call	0x740	; 0x740 <send_string>
		pause_loop(2000);
 114:	80 ed       	ldi	r24, 0xD0	; 208
 116:	97 e0       	ldi	r25, 0x07	; 7
 118:	0e 94 17 02 	call	0x42e	; 0x42e <pause_loop>
		start_motor_CW();
 11c:	0e 94 13 01 	call	0x226	; 0x226 <start_motor_CW>
		send_string("Hello World from AVR CW!\n\r");
 120:	89 e3       	ldi	r24, 0x39	; 57
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0e 94 a0 03 	call	0x740	; 0x740 <send_string>
		pause_loop(4000);
 128:	80 ea       	ldi	r24, 0xA0	; 160
 12a:	9f e0       	ldi	r25, 0x0F	; 15
 12c:	0e 94 17 02 	call	0x42e	; 0x42e <pause_loop>
		stop_motor();
 130:	0e 94 19 01 	call	0x232	; 0x232 <stop_motor>
		send_string("Hello World from AVR stop!\n\r");
 134:	8c e1       	ldi	r24, 0x1C	; 28
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 a0 03 	call	0x740	; 0x740 <send_string>
		pause_loop(2000);
 13c:	80 ed       	ldi	r24, 0xD0	; 208
 13e:	97 e0       	ldi	r25, 0x07	; 7
 140:	0e 94 17 02 	call	0x42e	; 0x42e <pause_loop>
 144:	d7 cf       	rjmp	.-82     	; 0xf4 <main+0x14>

00000146 <get_count>:
	sei();
}

long get_count()
{
	return counts;
 146:	60 91 57 01 	lds	r22, 0x0157
 14a:	70 91 58 01 	lds	r23, 0x0158
 14e:	80 91 59 01 	lds	r24, 0x0159
 152:	90 91 5a 01 	lds	r25, 0x015A
}
 156:	08 95       	ret

00000158 <__vector_2>:

ISR(INT1_vect)
{
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
	if( EXT_PORT & (1 << EXT_CH_A) ) counts--;			/* CCW */
 16a:	4a 9b       	sbis	0x09, 2	; 9
 16c:	14 c0       	rjmp	.+40     	; 0x196 <__vector_2+0x3e>
 16e:	80 91 57 01 	lds	r24, 0x0157
 172:	90 91 58 01 	lds	r25, 0x0158
 176:	a0 91 59 01 	lds	r26, 0x0159
 17a:	b0 91 5a 01 	lds	r27, 0x015A
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	a1 09       	sbc	r26, r1
 182:	b1 09       	sbc	r27, r1
 184:	80 93 57 01 	sts	0x0157, r24
 188:	90 93 58 01 	sts	0x0158, r25
 18c:	a0 93 59 01 	sts	0x0159, r26
 190:	b0 93 5a 01 	sts	0x015A, r27
 194:	15 c0       	rjmp	.+42     	; 0x1c0 <__vector_2+0x68>
	else if( !(EXT_PORT & (1 << EXT_CH_A)) ) counts++;	/* CW */
 196:	4a 99       	sbic	0x09, 2	; 9
 198:	13 c0       	rjmp	.+38     	; 0x1c0 <__vector_2+0x68>
 19a:	80 91 57 01 	lds	r24, 0x0157
 19e:	90 91 58 01 	lds	r25, 0x0158
 1a2:	a0 91 59 01 	lds	r26, 0x0159
 1a6:	b0 91 5a 01 	lds	r27, 0x015A
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	a1 1d       	adc	r26, r1
 1ae:	b1 1d       	adc	r27, r1
 1b0:	80 93 57 01 	sts	0x0157, r24
 1b4:	90 93 58 01 	sts	0x0158, r25
 1b8:	a0 93 59 01 	sts	0x0159, r26
 1bc:	b0 93 5a 01 	sts	0x015A, r27
}
 1c0:	bf 91       	pop	r27
 1c2:	af 91       	pop	r26
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <write_pin>:
	(*target_port) &= ~(1 << pin_no);
}

void write_pin(volatile uint8_t *target_port, uint8_t pin_no, uint8_t pin_val)
{
	switch(pin_val){
 1d2:	44 23       	and	r20, r20
 1d4:	89 f0       	breq	.+34     	; 0x1f8 <write_pin+0x26>
 1d6:	41 30       	cpi	r20, 0x01	; 1
 1d8:	f1 f4       	brne	.+60     	; 0x216 <write_pin+0x44>
	case HIGH:
		(*target_port) |= (1 << pin_no);
 1da:	fc 01       	movw	r30, r24
 1dc:	40 81       	ld	r20, Z
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	f9 01       	movw	r30, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <write_pin+0x18>
 1e6:	ee 0f       	add	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <write_pin+0x14>
 1ee:	bf 01       	movw	r22, r30
 1f0:	64 2b       	or	r22, r20
 1f2:	fc 01       	movw	r30, r24
 1f4:	60 83       	st	Z, r22
	break;
 1f6:	08 95       	ret
	case LOW:
		(*target_port) &= ~(1 << pin_no);
 1f8:	fc 01       	movw	r30, r24
 1fa:	40 81       	ld	r20, Z
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	f9 01       	movw	r30, r18
 202:	02 c0       	rjmp	.+4      	; 0x208 <write_pin+0x36>
 204:	ee 0f       	add	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <write_pin+0x32>
 20c:	bf 01       	movw	r22, r30
 20e:	60 95       	com	r22
 210:	64 23       	and	r22, r20
 212:	fc 01       	movw	r30, r24
 214:	60 83       	st	Z, r22
 216:	08 95       	ret

00000218 <enable_h_bridge>:

void set_pin_dir(volatile uint8_t *target_port, uint8_t pin_no, uint8_t dir)
{
	switch(dir){
	case OUTPUT:
		(*target_port) |= (1 << pin_no);
 218:	20 9a       	sbi	0x04, 0	; 4
 21a:	21 9a       	sbi	0x04, 1	; 4
 21c:	22 9a       	sbi	0x04, 2	; 4

void write_pin(volatile uint8_t *target_port, uint8_t pin_no, uint8_t pin_val)
{
	switch(pin_val){
	case HIGH:
		(*target_port) |= (1 << pin_no);
 21e:	28 9a       	sbi	0x05, 0	; 5
	break;
	case LOW:
		(*target_port) &= ~(1 << pin_no);
 220:	29 98       	cbi	0x05, 1	; 5
 222:	2a 98       	cbi	0x05, 2	; 5
 224:	08 95       	ret

00000226 <start_motor_CW>:
 226:	29 98       	cbi	0x05, 1	; 5

void write_pin(volatile uint8_t *target_port, uint8_t pin_no, uint8_t pin_val)
{
	switch(pin_val){
	case HIGH:
		(*target_port) |= (1 << pin_no);
 228:	2a 9a       	sbi	0x05, 2	; 5
 22a:	08 95       	ret

0000022c <start_motor_CCW>:
 22c:	29 9a       	sbi	0x05, 1	; 5
	break;
	case LOW:
		(*target_port) &= ~(1 << pin_no);
 22e:	2a 98       	cbi	0x05, 2	; 5
 230:	08 95       	ret

00000232 <stop_motor>:
 232:	29 98       	cbi	0x05, 1	; 5
 234:	2a 98       	cbi	0x05, 2	; 5
 236:	08 95       	ret

00000238 <init_timer_1>:
{
	uint16_t temp;

	temp = 0;
	temp |= (1 << WGM10 | 1 << WGM11); /* Fast PWM mode - TOP is OCR1A, auto restart. */
	TCCR1A = temp;
 238:	93 e0       	ldi	r25, 0x03	; 3
 23a:	90 93 80 00 	sts	0x0080, r25

	temp = 0;
	temp |= (1 << WGM12 | 1 << WGM13); /* Fast PWM mode - TOP is OCR1A, auto restart. */
	temp |= (prescaler << CS10); /* CS2:0 = 010 - Prescaler set to 8. */
 23e:	88 61       	ori	r24, 0x18	; 24
	TCCR1B = temp;
 240:	80 93 81 00 	sts	0x0081, r24

	temp = 0;
	temp |= (1 << TOIE0);
	TIMSK1 = temp;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	80 93 6f 00 	sts	0x006F, r24

	OCR1A = topw_val;
 24a:	70 93 89 00 	sts	0x0089, r23
 24e:	60 93 88 00 	sts	0x0088, r22

	sei();
 252:	78 94       	sei
 254:	08 95       	ret

00000256 <pid>:
{
	my_pid.dir = mot_dir;
}

void pid()
{
 256:	4f 92       	push	r4
 258:	5f 92       	push	r5
 25a:	6f 92       	push	r6
 25c:	7f 92       	push	r7
 25e:	8f 92       	push	r8
 260:	9f 92       	push	r9
 262:	af 92       	push	r10
 264:	bf 92       	push	r11
 266:	cf 92       	push	r12
 268:	df 92       	push	r13
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	00 d0       	rcall	.+0      	; 0x274 <pid+0x1e>
 274:	00 d0       	rcall	.+0      	; 0x276 <pid+0x20>
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
	long count = get_count();
 27a:	0e 94 a3 00 	call	0x146	; 0x146 <get_count>
 27e:	69 83       	std	Y+1, r22	; 0x01
 280:	7a 83       	std	Y+2, r23	; 0x02
 282:	8b 83       	std	Y+3, r24	; 0x03
 284:	9c 83       	std	Y+4, r25	; 0x04
	int temp = 0;
	/* Speed difference. */
	my_pid.err = my_pid.ref_speed - (uint16_t)(count - my_pid.last_count);
 286:	20 91 9a 01 	lds	r18, 0x019A
 28a:	30 91 9b 01 	lds	r19, 0x019B
 28e:	80 91 7a 01 	lds	r24, 0x017A
 292:	90 91 7b 01 	lds	r25, 0x017B
 296:	82 0f       	add	r24, r18
 298:	93 1f       	adc	r25, r19
 29a:	29 81       	ldd	r18, Y+1	; 0x01
 29c:	3a 81       	ldd	r19, Y+2	; 0x02
 29e:	82 1b       	sub	r24, r18
 2a0:	93 0b       	sbc	r25, r19
 2a2:	6c 01       	movw	r12, r24
 2a4:	e1 2c       	mov	r14, r1
 2a6:	f1 2c       	mov	r15, r1
 2a8:	c0 92 8a 01 	sts	0x018A, r12
 2ac:	d0 92 8b 01 	sts	0x018B, r13
 2b0:	e0 92 8c 01 	sts	0x018C, r14
 2b4:	f0 92 8d 01 	sts	0x018D, r15

	/* Error sum. */
	my_pid.err_sum += my_pid.err;
 2b8:	80 91 96 01 	lds	r24, 0x0196
 2bc:	90 91 97 01 	lds	r25, 0x0197
 2c0:	a0 91 98 01 	lds	r26, 0x0198
 2c4:	b0 91 99 01 	lds	r27, 0x0199
 2c8:	8c 0d       	add	r24, r12
 2ca:	9d 1d       	adc	r25, r13
 2cc:	ae 1d       	adc	r26, r14
 2ce:	bf 1d       	adc	r27, r15
	if(my_pid.err_sum > 200) {
 2d0:	89 3c       	cpi	r24, 0xC9	; 201
 2d2:	91 05       	cpc	r25, r1
 2d4:	a1 05       	cpc	r26, r1
 2d6:	b1 05       	cpc	r27, r1
 2d8:	4c f4       	brge	.+18     	; 0x2ec <pid+0x96>
	int temp = 0;
	/* Speed difference. */
	my_pid.err = my_pid.ref_speed - (uint16_t)(count - my_pid.last_count);

	/* Error sum. */
	my_pid.err_sum += my_pid.err;
 2da:	80 93 96 01 	sts	0x0196, r24
 2de:	90 93 97 01 	sts	0x0197, r25
 2e2:	a0 93 98 01 	sts	0x0198, r26
 2e6:	b0 93 99 01 	sts	0x0199, r27
 2ea:	0c c0       	rjmp	.+24     	; 0x304 <pid+0xae>
	if(my_pid.err_sum > 200) {
		my_pid.err_sum = 200;
 2ec:	88 ec       	ldi	r24, 0xC8	; 200
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	a0 e0       	ldi	r26, 0x00	; 0
 2f2:	b0 e0       	ldi	r27, 0x00	; 0
 2f4:	80 93 96 01 	sts	0x0196, r24
 2f8:	90 93 97 01 	sts	0x0197, r25
 2fc:	a0 93 98 01 	sts	0x0198, r26
 300:	b0 93 99 01 	sts	0x0199, r27
	}

	/* Error difference. */
	my_pid.err_diff = my_pid.err - my_pid.last_err;
 304:	80 91 8e 01 	lds	r24, 0x018E
 308:	90 91 8f 01 	lds	r25, 0x018F
 30c:	a0 91 90 01 	lds	r26, 0x0190
 310:	b0 91 91 01 	lds	r27, 0x0191
 314:	46 01       	movw	r8, r12
 316:	57 01       	movw	r10, r14
 318:	88 1a       	sub	r8, r24
 31a:	99 0a       	sbc	r9, r25
 31c:	aa 0a       	sbc	r10, r26
 31e:	bb 0a       	sbc	r11, r27
 320:	80 92 92 01 	sts	0x0192, r8
 324:	90 92 93 01 	sts	0x0193, r9
 328:	a0 92 94 01 	sts	0x0194, r10
 32c:	b0 92 95 01 	sts	0x0195, r11

	/* PID output */
	temp = (my_pid.kp*my_pid.err + my_pid.ki*my_pid.err_sum + my_pid.kd*my_pid.err_diff)/PID_CONST;
 330:	c7 01       	movw	r24, r14
 332:	b6 01       	movw	r22, r12
 334:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__floatsisf>
 338:	20 91 6e 01 	lds	r18, 0x016E
 33c:	30 91 6f 01 	lds	r19, 0x016F
 340:	40 91 70 01 	lds	r20, 0x0170
 344:	50 91 71 01 	lds	r21, 0x0171
 348:	0e 94 89 05 	call	0xb12	; 0xb12 <__mulsf3>
 34c:	2b 01       	movw	r4, r22
 34e:	3c 01       	movw	r6, r24
 350:	60 91 96 01 	lds	r22, 0x0196
 354:	70 91 97 01 	lds	r23, 0x0197
 358:	80 91 98 01 	lds	r24, 0x0198
 35c:	90 91 99 01 	lds	r25, 0x0199
 360:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__floatsisf>
 364:	20 91 72 01 	lds	r18, 0x0172
 368:	30 91 73 01 	lds	r19, 0x0173
 36c:	40 91 74 01 	lds	r20, 0x0174
 370:	50 91 75 01 	lds	r21, 0x0175
 374:	0e 94 89 05 	call	0xb12	; 0xb12 <__mulsf3>
 378:	9b 01       	movw	r18, r22
 37a:	ac 01       	movw	r20, r24
 37c:	c3 01       	movw	r24, r6
 37e:	b2 01       	movw	r22, r4
 380:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__addsf3>
 384:	2b 01       	movw	r4, r22
 386:	3c 01       	movw	r6, r24
 388:	c5 01       	movw	r24, r10
 38a:	b4 01       	movw	r22, r8
 38c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__floatsisf>
 390:	20 91 76 01 	lds	r18, 0x0176
 394:	30 91 77 01 	lds	r19, 0x0177
 398:	40 91 78 01 	lds	r20, 0x0178
 39c:	50 91 79 01 	lds	r21, 0x0179
 3a0:	0e 94 89 05 	call	0xb12	; 0xb12 <__mulsf3>
 3a4:	9b 01       	movw	r18, r22
 3a6:	ac 01       	movw	r20, r24
 3a8:	c3 01       	movw	r24, r6
 3aa:	b2 01       	movw	r22, r4
 3ac:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__addsf3>
 3b0:	20 e0       	ldi	r18, 0x00	; 0
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	40 e2       	ldi	r20, 0x20	; 32
 3b6:	51 e4       	ldi	r21, 0x41	; 65
 3b8:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__divsf3>
 3bc:	0e 94 ca 04 	call	0x994	; 0x994 <__fixsfsi>
	if(temp > my_pid.pwm_period) {
 3c0:	20 91 86 01 	lds	r18, 0x0186
 3c4:	30 91 87 01 	lds	r19, 0x0187
 3c8:	26 17       	cp	r18, r22
 3ca:	37 07       	cpc	r19, r23
 3cc:	28 f4       	brcc	.+10     	; 0x3d8 <pid+0x182>
		my_pid.pwm_top_val = my_pid.pwm_period;
 3ce:	30 93 85 01 	sts	0x0185, r19
 3d2:	20 93 84 01 	sts	0x0184, r18
 3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <pid+0x18a>
	} else {
		my_pid.pwm_top_val = temp;
 3d8:	70 93 85 01 	sts	0x0185, r23
 3dc:	60 93 84 01 	sts	0x0184, r22
	}

	/* Memorize last values. */
	my_pid.last_count = count;
 3e0:	89 81       	ldd	r24, Y+1	; 0x01
 3e2:	9a 81       	ldd	r25, Y+2	; 0x02
 3e4:	ab 81       	ldd	r26, Y+3	; 0x03
 3e6:	bc 81       	ldd	r27, Y+4	; 0x04
 3e8:	80 93 9a 01 	sts	0x019A, r24
 3ec:	90 93 9b 01 	sts	0x019B, r25
 3f0:	a0 93 9c 01 	sts	0x019C, r26
 3f4:	b0 93 9d 01 	sts	0x019D, r27
	my_pid.last_err = my_pid.err;
 3f8:	c0 92 8e 01 	sts	0x018E, r12
 3fc:	d0 92 8f 01 	sts	0x018F, r13
 400:	e0 92 90 01 	sts	0x0190, r14
 404:	f0 92 91 01 	sts	0x0191, r15
}
 408:	0f 90       	pop	r0
 40a:	0f 90       	pop	r0
 40c:	0f 90       	pop	r0
 40e:	0f 90       	pop	r0
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	ff 90       	pop	r15
 416:	ef 90       	pop	r14
 418:	df 90       	pop	r13
 41a:	cf 90       	pop	r12
 41c:	bf 90       	pop	r11
 41e:	af 90       	pop	r10
 420:	9f 90       	pop	r9
 422:	8f 90       	pop	r8
 424:	7f 90       	pop	r7
 426:	6f 90       	pop	r6
 428:	5f 90       	pop	r5
 42a:	4f 90       	pop	r4
 42c:	08 95       	ret

0000042e <pause_loop>:
	}
}

void pause_loop(uint16_t pause)
{
	pause_time = pause;
 42e:	a0 e0       	ldi	r26, 0x00	; 0
 430:	b0 e0       	ldi	r27, 0x00	; 0
 432:	80 93 5d 01 	sts	0x015D, r24
 436:	90 93 5e 01 	sts	0x015E, r25
 43a:	a0 93 5f 01 	sts	0x015F, r26
 43e:	b0 93 60 01 	sts	0x0160, r27
	while(pause_time);
 442:	80 91 5d 01 	lds	r24, 0x015D
 446:	90 91 5e 01 	lds	r25, 0x015E
 44a:	a0 91 5f 01 	lds	r26, 0x015F
 44e:	b0 91 60 01 	lds	r27, 0x0160
 452:	89 2b       	or	r24, r25
 454:	8a 2b       	or	r24, r26
 456:	8b 2b       	or	r24, r27
 458:	a1 f7       	brne	.-24     	; 0x442 <pause_loop+0x14>
}
 45a:	08 95       	ret

0000045c <__vector_13>:
		break;
	}
}

ISR(TIMER1_OVF_vect)
{
 45c:	1f 92       	push	r1
 45e:	0f 92       	push	r0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	0f 92       	push	r0
 464:	11 24       	eor	r1, r1
 466:	2f 93       	push	r18
 468:	3f 93       	push	r19
 46a:	4f 93       	push	r20
 46c:	5f 93       	push	r21
 46e:	6f 93       	push	r22
 470:	7f 93       	push	r23
 472:	8f 93       	push	r24
 474:	9f 93       	push	r25
 476:	af 93       	push	r26
 478:	bf 93       	push	r27
 47a:	ef 93       	push	r30
 47c:	ff 93       	push	r31
	if(pwm_flag == PWM_ON) {
 47e:	80 91 5c 01 	lds	r24, 0x015C
 482:	81 30       	cpi	r24, 0x01	; 1
 484:	09 f0       	breq	.+2      	; 0x488 <__vector_13+0x2c>
 486:	4e c0       	rjmp	.+156    	; 0x524 <__vector_13+0xc8>
		my_pwm.pwm_tick++;
 488:	e9 ea       	ldi	r30, 0xA9	; 169
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	80 81       	ld	r24, Z
 48e:	91 81       	ldd	r25, Z+1	; 0x01
 490:	a2 81       	ldd	r26, Z+2	; 0x02
 492:	b3 81       	ldd	r27, Z+3	; 0x03
 494:	01 96       	adiw	r24, 0x01	; 1
 496:	a1 1d       	adc	r26, r1
 498:	b1 1d       	adc	r27, r1
 49a:	80 83       	st	Z, r24
 49c:	91 83       	std	Z+1, r25	; 0x01
 49e:	a2 83       	std	Z+2, r26	; 0x02
 4a0:	b3 83       	std	Z+3, r27	; 0x03
		if(my_pwm.pwm_tick >= my_pwm.period && my_pwm.top_val > 0) {
 4a2:	40 91 a1 01 	lds	r20, 0x01A1
 4a6:	50 91 a2 01 	lds	r21, 0x01A2
 4aa:	60 91 a3 01 	lds	r22, 0x01A3
 4ae:	70 91 a4 01 	lds	r23, 0x01A4
 4b2:	84 17       	cp	r24, r20
 4b4:	95 07       	cpc	r25, r21
 4b6:	a6 07       	cpc	r26, r22
 4b8:	b7 07       	cpc	r27, r23
 4ba:	f0 f0       	brcs	.+60     	; 0x4f8 <__vector_13+0x9c>
 4bc:	80 91 a5 01 	lds	r24, 0x01A5
 4c0:	90 91 a6 01 	lds	r25, 0x01A6
 4c4:	a0 91 a7 01 	lds	r26, 0x01A7
 4c8:	b0 91 a8 01 	lds	r27, 0x01A8
 4cc:	89 2b       	or	r24, r25
 4ce:	8a 2b       	or	r24, r26
 4d0:	8b 2b       	or	r24, r27
 4d2:	f9 f0       	breq	.+62     	; 0x512 <__vector_13+0xb6>
			write_pin(my_pwm.target_port, my_pwm.pin, HIGH);
 4d4:	41 e0       	ldi	r20, 0x01	; 1
 4d6:	60 91 a0 01 	lds	r22, 0x01A0
 4da:	80 91 9e 01 	lds	r24, 0x019E
 4de:	90 91 9f 01 	lds	r25, 0x019F
 4e2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <write_pin>
			my_pwm.pwm_tick = 0;
 4e6:	10 92 a9 01 	sts	0x01A9, r1
 4ea:	10 92 aa 01 	sts	0x01AA, r1
 4ee:	10 92 ab 01 	sts	0x01AB, r1
 4f2:	10 92 ac 01 	sts	0x01AC, r1
 4f6:	16 c0       	rjmp	.+44     	; 0x524 <__vector_13+0xc8>
		} else if(my_pwm.pwm_tick >= my_pwm.top_val) {
 4f8:	40 91 a5 01 	lds	r20, 0x01A5
 4fc:	50 91 a6 01 	lds	r21, 0x01A6
 500:	60 91 a7 01 	lds	r22, 0x01A7
 504:	70 91 a8 01 	lds	r23, 0x01A8
 508:	84 17       	cp	r24, r20
 50a:	95 07       	cpc	r25, r21
 50c:	a6 07       	cpc	r26, r22
 50e:	b7 07       	cpc	r27, r23
 510:	48 f0       	brcs	.+18     	; 0x524 <__vector_13+0xc8>
			write_pin(my_pwm.target_port, my_pwm.pin, LOW);
 512:	40 e0       	ldi	r20, 0x00	; 0
 514:	60 91 a0 01 	lds	r22, 0x01A0
 518:	80 91 9e 01 	lds	r24, 0x019E
 51c:	90 91 9f 01 	lds	r25, 0x019F
 520:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <write_pin>
		}
	}

	if(pid_flag == 1) {
 524:	80 91 5b 01 	lds	r24, 0x015B
 528:	81 30       	cpi	r24, 0x01	; 1
 52a:	09 f0       	breq	.+2      	; 0x52e <__vector_13+0xd2>
 52c:	4f c0       	rjmp	.+158    	; 0x5cc <__vector_13+0x170>
		my_pid.pid_tick_sample++;
 52e:	e2 e8       	ldi	r30, 0x82	; 130
 530:	f1 e0       	ldi	r31, 0x01	; 1
 532:	80 81       	ld	r24, Z
 534:	91 81       	ldd	r25, Z+1	; 0x01
 536:	01 96       	adiw	r24, 0x01	; 1
 538:	91 83       	std	Z+1, r25	; 0x01
 53a:	80 83       	st	Z, r24
		if(my_pid.pid_tick_sample >= my_pid.sample_period) {
 53c:	20 81       	ld	r18, Z
 53e:	31 81       	ldd	r19, Z+1	; 0x01
 540:	80 91 7c 01 	lds	r24, 0x017C
 544:	90 91 7d 01 	lds	r25, 0x017D
 548:	28 17       	cp	r18, r24
 54a:	39 07       	cpc	r19, r25
 54c:	30 f0       	brcs	.+12     	; 0x55a <__vector_13+0xfe>
			my_pid.pid_tick_sample = 0;
 54e:	10 92 83 01 	sts	0x0183, r1
 552:	10 92 82 01 	sts	0x0182, r1
			pid();
 556:	0e 94 2b 01 	call	0x256	; 0x256 <pid>
		}

		my_pid.pid_pwm_tick++;
 55a:	e8 e8       	ldi	r30, 0x88	; 136
 55c:	f1 e0       	ldi	r31, 0x01	; 1
 55e:	80 81       	ld	r24, Z
 560:	91 81       	ldd	r25, Z+1	; 0x01
 562:	01 96       	adiw	r24, 0x01	; 1
 564:	91 83       	std	Z+1, r25	; 0x01
 566:	80 83       	st	Z, r24
		if(my_pid.pid_pwm_tick >= my_pid.pwm_period && my_pid.pwm_top_val > 0) {
 568:	20 81       	ld	r18, Z
 56a:	31 81       	ldd	r19, Z+1	; 0x01
 56c:	80 91 86 01 	lds	r24, 0x0186
 570:	90 91 87 01 	lds	r25, 0x0187
 574:	28 17       	cp	r18, r24
 576:	39 07       	cpc	r19, r25
 578:	a8 f0       	brcs	.+42     	; 0x5a4 <__vector_13+0x148>
 57a:	80 91 84 01 	lds	r24, 0x0184
 57e:	90 91 85 01 	lds	r25, 0x0185
 582:	89 2b       	or	r24, r25
 584:	09 f4       	brne	.+2      	; 0x588 <__vector_13+0x12c>
 586:	9f c0       	rjmp	.+318    	; 0x6c6 <__vector_13+0x26a>
			my_pid.pid_pwm_tick = 0;
 588:	10 92 89 01 	sts	0x0189, r1
 58c:	10 92 88 01 	sts	0x0188, r1

			if(my_pid.dir == CW) {
 590:	80 91 6d 01 	lds	r24, 0x016D
 594:	81 11       	cpse	r24, r1
 596:	02 c0       	rjmp	.+4      	; 0x59c <__vector_13+0x140>
				MOT_PORT |= (1 << MOT_PIN0);
 598:	29 9a       	sbi	0x05, 1	; 5
 59a:	18 c0       	rjmp	.+48     	; 0x5cc <__vector_13+0x170>
			} else if(my_pid.dir == CCW) {
 59c:	81 30       	cpi	r24, 0x01	; 1
 59e:	b1 f4       	brne	.+44     	; 0x5cc <__vector_13+0x170>
				MOT_PORT |= (1 << MOT_PIN1);
 5a0:	2a 9a       	sbi	0x05, 2	; 5
 5a2:	14 c0       	rjmp	.+40     	; 0x5cc <__vector_13+0x170>
			}
		} else if (my_pid.pid_pwm_tick >= my_pid.pwm_top_val) {
 5a4:	20 91 88 01 	lds	r18, 0x0188
 5a8:	30 91 89 01 	lds	r19, 0x0189
 5ac:	80 91 84 01 	lds	r24, 0x0184
 5b0:	90 91 85 01 	lds	r25, 0x0185
 5b4:	28 17       	cp	r18, r24
 5b6:	39 07       	cpc	r19, r25
 5b8:	48 f0       	brcs	.+18     	; 0x5cc <__vector_13+0x170>
			if(my_pid.dir == CW) {
 5ba:	80 91 6d 01 	lds	r24, 0x016D
 5be:	81 11       	cpse	r24, r1
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <__vector_13+0x16a>
				MOT_PORT &= ~(1 << MOT_PIN0);
 5c2:	29 98       	cbi	0x05, 1	; 5
 5c4:	03 c0       	rjmp	.+6      	; 0x5cc <__vector_13+0x170>
			} else if(my_pid.dir == CCW) {
 5c6:	81 30       	cpi	r24, 0x01	; 1
 5c8:	09 f4       	brne	.+2      	; 0x5cc <__vector_13+0x170>
				MOT_PORT &= ~(1 << MOT_PIN1);
 5ca:	2a 98       	cbi	0x05, 2	; 5
			}
		}
	}


	if(timer_node_0 > 0) timer_node_0--;
 5cc:	80 91 69 01 	lds	r24, 0x0169
 5d0:	90 91 6a 01 	lds	r25, 0x016A
 5d4:	a0 91 6b 01 	lds	r26, 0x016B
 5d8:	b0 91 6c 01 	lds	r27, 0x016C
 5dc:	89 2b       	or	r24, r25
 5de:	8a 2b       	or	r24, r26
 5e0:	8b 2b       	or	r24, r27
 5e2:	99 f0       	breq	.+38     	; 0x60a <__vector_13+0x1ae>
 5e4:	80 91 69 01 	lds	r24, 0x0169
 5e8:	90 91 6a 01 	lds	r25, 0x016A
 5ec:	a0 91 6b 01 	lds	r26, 0x016B
 5f0:	b0 91 6c 01 	lds	r27, 0x016C
 5f4:	01 97       	sbiw	r24, 0x01	; 1
 5f6:	a1 09       	sbc	r26, r1
 5f8:	b1 09       	sbc	r27, r1
 5fa:	80 93 69 01 	sts	0x0169, r24
 5fe:	90 93 6a 01 	sts	0x016A, r25
 602:	a0 93 6b 01 	sts	0x016B, r26
 606:	b0 93 6c 01 	sts	0x016C, r27
	if(timer_node_1 > 0) timer_node_1--;
 60a:	80 91 65 01 	lds	r24, 0x0165
 60e:	90 91 66 01 	lds	r25, 0x0166
 612:	a0 91 67 01 	lds	r26, 0x0167
 616:	b0 91 68 01 	lds	r27, 0x0168
 61a:	89 2b       	or	r24, r25
 61c:	8a 2b       	or	r24, r26
 61e:	8b 2b       	or	r24, r27
 620:	99 f0       	breq	.+38     	; 0x648 <__vector_13+0x1ec>
 622:	80 91 65 01 	lds	r24, 0x0165
 626:	90 91 66 01 	lds	r25, 0x0166
 62a:	a0 91 67 01 	lds	r26, 0x0167
 62e:	b0 91 68 01 	lds	r27, 0x0168
 632:	01 97       	sbiw	r24, 0x01	; 1
 634:	a1 09       	sbc	r26, r1
 636:	b1 09       	sbc	r27, r1
 638:	80 93 65 01 	sts	0x0165, r24
 63c:	90 93 66 01 	sts	0x0166, r25
 640:	a0 93 67 01 	sts	0x0167, r26
 644:	b0 93 68 01 	sts	0x0168, r27
	if(timer_node_2 > 0) timer_node_2--;
 648:	80 91 61 01 	lds	r24, 0x0161
 64c:	90 91 62 01 	lds	r25, 0x0162
 650:	a0 91 63 01 	lds	r26, 0x0163
 654:	b0 91 64 01 	lds	r27, 0x0164
 658:	89 2b       	or	r24, r25
 65a:	8a 2b       	or	r24, r26
 65c:	8b 2b       	or	r24, r27
 65e:	99 f0       	breq	.+38     	; 0x686 <__vector_13+0x22a>
 660:	80 91 61 01 	lds	r24, 0x0161
 664:	90 91 62 01 	lds	r25, 0x0162
 668:	a0 91 63 01 	lds	r26, 0x0163
 66c:	b0 91 64 01 	lds	r27, 0x0164
 670:	01 97       	sbiw	r24, 0x01	; 1
 672:	a1 09       	sbc	r26, r1
 674:	b1 09       	sbc	r27, r1
 676:	80 93 61 01 	sts	0x0161, r24
 67a:	90 93 62 01 	sts	0x0162, r25
 67e:	a0 93 63 01 	sts	0x0163, r26
 682:	b0 93 64 01 	sts	0x0164, r27
	if(pause_time > 0) pause_time--;
 686:	80 91 5d 01 	lds	r24, 0x015D
 68a:	90 91 5e 01 	lds	r25, 0x015E
 68e:	a0 91 5f 01 	lds	r26, 0x015F
 692:	b0 91 60 01 	lds	r27, 0x0160
 696:	89 2b       	or	r24, r25
 698:	8a 2b       	or	r24, r26
 69a:	8b 2b       	or	r24, r27
 69c:	c9 f0       	breq	.+50     	; 0x6d0 <__vector_13+0x274>
 69e:	80 91 5d 01 	lds	r24, 0x015D
 6a2:	90 91 5e 01 	lds	r25, 0x015E
 6a6:	a0 91 5f 01 	lds	r26, 0x015F
 6aa:	b0 91 60 01 	lds	r27, 0x0160
 6ae:	01 97       	sbiw	r24, 0x01	; 1
 6b0:	a1 09       	sbc	r26, r1
 6b2:	b1 09       	sbc	r27, r1
 6b4:	80 93 5d 01 	sts	0x015D, r24
 6b8:	90 93 5e 01 	sts	0x015E, r25
 6bc:	a0 93 5f 01 	sts	0x015F, r26
 6c0:	b0 93 60 01 	sts	0x0160, r27
 6c4:	05 c0       	rjmp	.+10     	; 0x6d0 <__vector_13+0x274>
			if(my_pid.dir == CW) {
				MOT_PORT |= (1 << MOT_PIN0);
			} else if(my_pid.dir == CCW) {
				MOT_PORT |= (1 << MOT_PIN1);
			}
		} else if (my_pid.pid_pwm_tick >= my_pid.pwm_top_val) {
 6c6:	80 91 88 01 	lds	r24, 0x0188
 6ca:	90 91 89 01 	lds	r25, 0x0189
 6ce:	75 cf       	rjmp	.-278    	; 0x5ba <__vector_13+0x15e>

	if(timer_node_0 > 0) timer_node_0--;
	if(timer_node_1 > 0) timer_node_1--;
	if(timer_node_2 > 0) timer_node_2--;
	if(pause_time > 0) pause_time--;
}
 6d0:	ff 91       	pop	r31
 6d2:	ef 91       	pop	r30
 6d4:	bf 91       	pop	r27
 6d6:	af 91       	pop	r26
 6d8:	9f 91       	pop	r25
 6da:	8f 91       	pop	r24
 6dc:	7f 91       	pop	r23
 6de:	6f 91       	pop	r22
 6e0:	5f 91       	pop	r21
 6e2:	4f 91       	pop	r20
 6e4:	3f 91       	pop	r19
 6e6:	2f 91       	pop	r18
 6e8:	0f 90       	pop	r0
 6ea:	0f be       	out	0x3f, r0	; 63
 6ec:	0f 90       	pop	r0
 6ee:	1f 90       	pop	r1
 6f0:	18 95       	reti

000006f2 <init_uart>:
static volatile char uart0_received;
static volatile uint8_t uart0_index;

void init_uart(uint8_t baud)
{
	uart0_sent = 0;
 6f2:	10 92 af 01 	sts	0x01AF, r1
	uart0_received = 0;
 6f6:	10 92 ae 01 	sts	0x01AE, r1
	uart0_index = 0;
 6fa:	10 92 ad 01 	sts	0x01AD, r1
	uart0_buff[uart0_index] = '\0';
 6fe:	e0 91 ad 01 	lds	r30, 0x01AD
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	e0 55       	subi	r30, 0x50	; 80
 706:	fe 4f       	sbci	r31, 0xFE	; 254
 708:	10 82       	st	Z, r1
	UCSR0B |= (1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0);
 70a:	e1 ec       	ldi	r30, 0xC1	; 193
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	90 81       	ld	r25, Z
 710:	98 69       	ori	r25, 0x98	; 152
 712:	90 83       	st	Z, r25
	UCSR0C |= (1 << UCSZ00 | 1 << UCSZ00);
 714:	e2 ec       	ldi	r30, 0xC2	; 194
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	90 81       	ld	r25, Z
 71a:	92 60       	ori	r25, 0x02	; 2
 71c:	90 83       	st	Z, r25
	UBRR0 = baud;
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	90 93 c5 00 	sts	0x00C5, r25
 724:	80 93 c4 00 	sts	0x00C4, r24
	
	sei();
 728:	78 94       	sei
 72a:	08 95       	ret

0000072c <send_char>:
}

void send_char(char c)
{
	uart0_sent = 0;
 72c:	10 92 af 01 	sts	0x01AF, r1
	UDR0 = c;
 730:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UCSR0A & (1 << UDRE0)));
 734:	e0 ec       	ldi	r30, 0xC0	; 192
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	80 81       	ld	r24, Z
 73a:	85 ff       	sbrs	r24, 5
 73c:	fd cf       	rjmp	.-6      	; 0x738 <send_char+0xc>
}
 73e:	08 95       	ret

00000740 <send_string>:

void send_string(char *str)
{
 740:	cf 93       	push	r28
 742:	df 93       	push	r29
 744:	ec 01       	movw	r28, r24
	while (*str != '\0') {
 746:	88 81       	ld	r24, Y
 748:	88 23       	and	r24, r24
 74a:	31 f0       	breq	.+12     	; 0x758 <send_string+0x18>
 74c:	21 96       	adiw	r28, 0x01	; 1
		send_char(*str);
 74e:	0e 94 96 03 	call	0x72c	; 0x72c <send_char>
	while (!(UCSR0A & (1 << UDRE0)));
}

void send_string(char *str)
{
	while (*str != '\0') {
 752:	89 91       	ld	r24, Y+
 754:	81 11       	cpse	r24, r1
 756:	fb cf       	rjmp	.-10     	; 0x74e <send_string+0xe>
		send_char(*str);
		str++;
	}
}
 758:	df 91       	pop	r29
 75a:	cf 91       	pop	r28
 75c:	08 95       	ret

0000075e <clear_buffer>:
	*dest = '\0';
}

void clear_buffer()
{
	uart0_index = 0;
 75e:	10 92 ad 01 	sts	0x01AD, r1
	uart0_buff[uart0_index] = '\0';
 762:	e0 91 ad 01 	lds	r30, 0x01AD
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	e0 55       	subi	r30, 0x50	; 80
 76a:	fe 4f       	sbci	r31, 0xFE	; 254
 76c:	10 82       	st	Z, r1
 76e:	08 95       	ret

00000770 <__vector_18>:
//{
//	uart0_sent = 1;
//}

ISR(USART_RX_vect)
{
 770:	1f 92       	push	r1
 772:	0f 92       	push	r0
 774:	0f b6       	in	r0, 0x3f	; 63
 776:	0f 92       	push	r0
 778:	11 24       	eor	r1, r1
 77a:	2f 93       	push	r18
 77c:	3f 93       	push	r19
 77e:	4f 93       	push	r20
 780:	5f 93       	push	r21
 782:	6f 93       	push	r22
 784:	7f 93       	push	r23
 786:	8f 93       	push	r24
 788:	9f 93       	push	r25
 78a:	af 93       	push	r26
 78c:	bf 93       	push	r27
 78e:	ef 93       	push	r30
 790:	ff 93       	push	r31
	char temp;

	temp = UDR0;
 792:	80 91 c6 00 	lds	r24, 0x00C6
	if (uart0_index < (UART0_SIZE - 2)) {
 796:	90 91 ad 01 	lds	r25, 0x01AD
 79a:	9d 3f       	cpi	r25, 0xFD	; 253
 79c:	d8 f4       	brcc	.+54     	; 0x7d4 <__vector_18+0x64>
		/* There is room for more characters. */
		uart0_buff[uart0_index] = temp;
 79e:	e0 91 ad 01 	lds	r30, 0x01AD
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	e0 55       	subi	r30, 0x50	; 80
 7a6:	fe 4f       	sbci	r31, 0xFE	; 254
 7a8:	80 83       	st	Z, r24
		uart0_buff[uart0_index + 1] = '\0';
 7aa:	e0 91 ad 01 	lds	r30, 0x01AD
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	ef 54       	subi	r30, 0x4F	; 79
 7b2:	fe 4f       	sbci	r31, 0xFE	; 254
 7b4:	10 82       	st	Z, r1
		uart0_index++;
 7b6:	90 91 ad 01 	lds	r25, 0x01AD
 7ba:	9f 5f       	subi	r25, 0xFF	; 255
 7bc:	90 93 ad 01 	sts	0x01AD, r25
		if (temp == '\0' || temp == '\n' || temp == '\r') {
 7c0:	88 23       	and	r24, r24
 7c2:	21 f0       	breq	.+8      	; 0x7cc <__vector_18+0x5c>
 7c4:	8a 30       	cpi	r24, 0x0A	; 10
 7c6:	11 f0       	breq	.+4      	; 0x7cc <__vector_18+0x5c>
 7c8:	8d 30       	cpi	r24, 0x0D	; 13
 7ca:	31 f4       	brne	.+12     	; 0x7d8 <__vector_18+0x68>
			uart0_received = 1;
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	80 93 ae 01 	sts	0x01AE, r24
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <__vector_18+0x68>
		}
	} else {
		/* Wait for buffer to be cleared. */
		clear_buffer();	
 7d4:	0e 94 af 03 	call	0x75e	; 0x75e <clear_buffer>
	}
}
 7d8:	ff 91       	pop	r31
 7da:	ef 91       	pop	r30
 7dc:	bf 91       	pop	r27
 7de:	af 91       	pop	r26
 7e0:	9f 91       	pop	r25
 7e2:	8f 91       	pop	r24
 7e4:	7f 91       	pop	r23
 7e6:	6f 91       	pop	r22
 7e8:	5f 91       	pop	r21
 7ea:	4f 91       	pop	r20
 7ec:	3f 91       	pop	r19
 7ee:	2f 91       	pop	r18
 7f0:	0f 90       	pop	r0
 7f2:	0f be       	out	0x3f, r0	; 63
 7f4:	0f 90       	pop	r0
 7f6:	1f 90       	pop	r1
 7f8:	18 95       	reti

000007fa <__subsf3>:
 7fa:	50 58       	subi	r21, 0x80	; 128

000007fc <__addsf3>:
 7fc:	bb 27       	eor	r27, r27
 7fe:	aa 27       	eor	r26, r26
 800:	0e d0       	rcall	.+28     	; 0x81e <__addsf3x>
 802:	4d c1       	rjmp	.+666    	; 0xa9e <__fp_round>
 804:	3e d1       	rcall	.+636    	; 0xa82 <__fp_pscA>
 806:	30 f0       	brcs	.+12     	; 0x814 <__addsf3+0x18>
 808:	43 d1       	rcall	.+646    	; 0xa90 <__fp_pscB>
 80a:	20 f0       	brcs	.+8      	; 0x814 <__addsf3+0x18>
 80c:	31 f4       	brne	.+12     	; 0x81a <__addsf3+0x1e>
 80e:	9f 3f       	cpi	r25, 0xFF	; 255
 810:	11 f4       	brne	.+4      	; 0x816 <__addsf3+0x1a>
 812:	1e f4       	brtc	.+6      	; 0x81a <__addsf3+0x1e>
 814:	33 c1       	rjmp	.+614    	; 0xa7c <__fp_nan>
 816:	0e f4       	brtc	.+2      	; 0x81a <__addsf3+0x1e>
 818:	e0 95       	com	r30
 81a:	e7 fb       	bst	r30, 7
 81c:	29 c1       	rjmp	.+594    	; 0xa70 <__fp_inf>

0000081e <__addsf3x>:
 81e:	e9 2f       	mov	r30, r25
 820:	4f d1       	rcall	.+670    	; 0xac0 <__fp_split3>
 822:	80 f3       	brcs	.-32     	; 0x804 <__addsf3+0x8>
 824:	ba 17       	cp	r27, r26
 826:	62 07       	cpc	r22, r18
 828:	73 07       	cpc	r23, r19
 82a:	84 07       	cpc	r24, r20
 82c:	95 07       	cpc	r25, r21
 82e:	18 f0       	brcs	.+6      	; 0x836 <__addsf3x+0x18>
 830:	71 f4       	brne	.+28     	; 0x84e <__addsf3x+0x30>
 832:	9e f5       	brtc	.+102    	; 0x89a <__addsf3x+0x7c>
 834:	67 c1       	rjmp	.+718    	; 0xb04 <__fp_zero>
 836:	0e f4       	brtc	.+2      	; 0x83a <__addsf3x+0x1c>
 838:	e0 95       	com	r30
 83a:	0b 2e       	mov	r0, r27
 83c:	ba 2f       	mov	r27, r26
 83e:	a0 2d       	mov	r26, r0
 840:	0b 01       	movw	r0, r22
 842:	b9 01       	movw	r22, r18
 844:	90 01       	movw	r18, r0
 846:	0c 01       	movw	r0, r24
 848:	ca 01       	movw	r24, r20
 84a:	a0 01       	movw	r20, r0
 84c:	11 24       	eor	r1, r1
 84e:	ff 27       	eor	r31, r31
 850:	59 1b       	sub	r21, r25
 852:	99 f0       	breq	.+38     	; 0x87a <__addsf3x+0x5c>
 854:	59 3f       	cpi	r21, 0xF9	; 249
 856:	50 f4       	brcc	.+20     	; 0x86c <__addsf3x+0x4e>
 858:	50 3e       	cpi	r21, 0xE0	; 224
 85a:	68 f1       	brcs	.+90     	; 0x8b6 <__addsf3x+0x98>
 85c:	1a 16       	cp	r1, r26
 85e:	f0 40       	sbci	r31, 0x00	; 0
 860:	a2 2f       	mov	r26, r18
 862:	23 2f       	mov	r18, r19
 864:	34 2f       	mov	r19, r20
 866:	44 27       	eor	r20, r20
 868:	58 5f       	subi	r21, 0xF8	; 248
 86a:	f3 cf       	rjmp	.-26     	; 0x852 <__addsf3x+0x34>
 86c:	46 95       	lsr	r20
 86e:	37 95       	ror	r19
 870:	27 95       	ror	r18
 872:	a7 95       	ror	r26
 874:	f0 40       	sbci	r31, 0x00	; 0
 876:	53 95       	inc	r21
 878:	c9 f7       	brne	.-14     	; 0x86c <__addsf3x+0x4e>
 87a:	7e f4       	brtc	.+30     	; 0x89a <__addsf3x+0x7c>
 87c:	1f 16       	cp	r1, r31
 87e:	ba 0b       	sbc	r27, r26
 880:	62 0b       	sbc	r22, r18
 882:	73 0b       	sbc	r23, r19
 884:	84 0b       	sbc	r24, r20
 886:	ba f0       	brmi	.+46     	; 0x8b6 <__addsf3x+0x98>
 888:	91 50       	subi	r25, 0x01	; 1
 88a:	a1 f0       	breq	.+40     	; 0x8b4 <__addsf3x+0x96>
 88c:	ff 0f       	add	r31, r31
 88e:	bb 1f       	adc	r27, r27
 890:	66 1f       	adc	r22, r22
 892:	77 1f       	adc	r23, r23
 894:	88 1f       	adc	r24, r24
 896:	c2 f7       	brpl	.-16     	; 0x888 <__addsf3x+0x6a>
 898:	0e c0       	rjmp	.+28     	; 0x8b6 <__addsf3x+0x98>
 89a:	ba 0f       	add	r27, r26
 89c:	62 1f       	adc	r22, r18
 89e:	73 1f       	adc	r23, r19
 8a0:	84 1f       	adc	r24, r20
 8a2:	48 f4       	brcc	.+18     	; 0x8b6 <__addsf3x+0x98>
 8a4:	87 95       	ror	r24
 8a6:	77 95       	ror	r23
 8a8:	67 95       	ror	r22
 8aa:	b7 95       	ror	r27
 8ac:	f7 95       	ror	r31
 8ae:	9e 3f       	cpi	r25, 0xFE	; 254
 8b0:	08 f0       	brcs	.+2      	; 0x8b4 <__addsf3x+0x96>
 8b2:	b3 cf       	rjmp	.-154    	; 0x81a <__addsf3+0x1e>
 8b4:	93 95       	inc	r25
 8b6:	88 0f       	add	r24, r24
 8b8:	08 f0       	brcs	.+2      	; 0x8bc <__addsf3x+0x9e>
 8ba:	99 27       	eor	r25, r25
 8bc:	ee 0f       	add	r30, r30
 8be:	97 95       	ror	r25
 8c0:	87 95       	ror	r24
 8c2:	08 95       	ret

000008c4 <__divsf3>:
 8c4:	0c d0       	rcall	.+24     	; 0x8de <__divsf3x>
 8c6:	eb c0       	rjmp	.+470    	; 0xa9e <__fp_round>
 8c8:	e3 d0       	rcall	.+454    	; 0xa90 <__fp_pscB>
 8ca:	40 f0       	brcs	.+16     	; 0x8dc <__divsf3+0x18>
 8cc:	da d0       	rcall	.+436    	; 0xa82 <__fp_pscA>
 8ce:	30 f0       	brcs	.+12     	; 0x8dc <__divsf3+0x18>
 8d0:	21 f4       	brne	.+8      	; 0x8da <__divsf3+0x16>
 8d2:	5f 3f       	cpi	r21, 0xFF	; 255
 8d4:	19 f0       	breq	.+6      	; 0x8dc <__divsf3+0x18>
 8d6:	cc c0       	rjmp	.+408    	; 0xa70 <__fp_inf>
 8d8:	51 11       	cpse	r21, r1
 8da:	15 c1       	rjmp	.+554    	; 0xb06 <__fp_szero>
 8dc:	cf c0       	rjmp	.+414    	; 0xa7c <__fp_nan>

000008de <__divsf3x>:
 8de:	f0 d0       	rcall	.+480    	; 0xac0 <__fp_split3>
 8e0:	98 f3       	brcs	.-26     	; 0x8c8 <__divsf3+0x4>

000008e2 <__divsf3_pse>:
 8e2:	99 23       	and	r25, r25
 8e4:	c9 f3       	breq	.-14     	; 0x8d8 <__divsf3+0x14>
 8e6:	55 23       	and	r21, r21
 8e8:	b1 f3       	breq	.-20     	; 0x8d6 <__divsf3+0x12>
 8ea:	95 1b       	sub	r25, r21
 8ec:	55 0b       	sbc	r21, r21
 8ee:	bb 27       	eor	r27, r27
 8f0:	aa 27       	eor	r26, r26
 8f2:	62 17       	cp	r22, r18
 8f4:	73 07       	cpc	r23, r19
 8f6:	84 07       	cpc	r24, r20
 8f8:	38 f0       	brcs	.+14     	; 0x908 <__stack+0x9>
 8fa:	9f 5f       	subi	r25, 0xFF	; 255
 8fc:	5f 4f       	sbci	r21, 0xFF	; 255
 8fe:	22 0f       	add	r18, r18
 900:	33 1f       	adc	r19, r19
 902:	44 1f       	adc	r20, r20
 904:	aa 1f       	adc	r26, r26
 906:	a9 f3       	breq	.-22     	; 0x8f2 <__divsf3_pse+0x10>
 908:	33 d0       	rcall	.+102    	; 0x970 <__stack+0x71>
 90a:	0e 2e       	mov	r0, r30
 90c:	3a f0       	brmi	.+14     	; 0x91c <__stack+0x1d>
 90e:	e0 e8       	ldi	r30, 0x80	; 128
 910:	30 d0       	rcall	.+96     	; 0x972 <__stack+0x73>
 912:	91 50       	subi	r25, 0x01	; 1
 914:	50 40       	sbci	r21, 0x00	; 0
 916:	e6 95       	lsr	r30
 918:	00 1c       	adc	r0, r0
 91a:	ca f7       	brpl	.-14     	; 0x90e <__stack+0xf>
 91c:	29 d0       	rcall	.+82     	; 0x970 <__stack+0x71>
 91e:	fe 2f       	mov	r31, r30
 920:	27 d0       	rcall	.+78     	; 0x970 <__stack+0x71>
 922:	66 0f       	add	r22, r22
 924:	77 1f       	adc	r23, r23
 926:	88 1f       	adc	r24, r24
 928:	bb 1f       	adc	r27, r27
 92a:	26 17       	cp	r18, r22
 92c:	37 07       	cpc	r19, r23
 92e:	48 07       	cpc	r20, r24
 930:	ab 07       	cpc	r26, r27
 932:	b0 e8       	ldi	r27, 0x80	; 128
 934:	09 f0       	breq	.+2      	; 0x938 <__stack+0x39>
 936:	bb 0b       	sbc	r27, r27
 938:	80 2d       	mov	r24, r0
 93a:	bf 01       	movw	r22, r30
 93c:	ff 27       	eor	r31, r31
 93e:	93 58       	subi	r25, 0x83	; 131
 940:	5f 4f       	sbci	r21, 0xFF	; 255
 942:	2a f0       	brmi	.+10     	; 0x94e <__stack+0x4f>
 944:	9e 3f       	cpi	r25, 0xFE	; 254
 946:	51 05       	cpc	r21, r1
 948:	68 f0       	brcs	.+26     	; 0x964 <__stack+0x65>
 94a:	92 c0       	rjmp	.+292    	; 0xa70 <__fp_inf>
 94c:	dc c0       	rjmp	.+440    	; 0xb06 <__fp_szero>
 94e:	5f 3f       	cpi	r21, 0xFF	; 255
 950:	ec f3       	brlt	.-6      	; 0x94c <__stack+0x4d>
 952:	98 3e       	cpi	r25, 0xE8	; 232
 954:	dc f3       	brlt	.-10     	; 0x94c <__stack+0x4d>
 956:	86 95       	lsr	r24
 958:	77 95       	ror	r23
 95a:	67 95       	ror	r22
 95c:	b7 95       	ror	r27
 95e:	f7 95       	ror	r31
 960:	9f 5f       	subi	r25, 0xFF	; 255
 962:	c9 f7       	brne	.-14     	; 0x956 <__stack+0x57>
 964:	88 0f       	add	r24, r24
 966:	91 1d       	adc	r25, r1
 968:	96 95       	lsr	r25
 96a:	87 95       	ror	r24
 96c:	97 f9       	bld	r25, 7
 96e:	08 95       	ret
 970:	e1 e0       	ldi	r30, 0x01	; 1
 972:	66 0f       	add	r22, r22
 974:	77 1f       	adc	r23, r23
 976:	88 1f       	adc	r24, r24
 978:	bb 1f       	adc	r27, r27
 97a:	62 17       	cp	r22, r18
 97c:	73 07       	cpc	r23, r19
 97e:	84 07       	cpc	r24, r20
 980:	ba 07       	cpc	r27, r26
 982:	20 f0       	brcs	.+8      	; 0x98c <__stack+0x8d>
 984:	62 1b       	sub	r22, r18
 986:	73 0b       	sbc	r23, r19
 988:	84 0b       	sbc	r24, r20
 98a:	ba 0b       	sbc	r27, r26
 98c:	ee 1f       	adc	r30, r30
 98e:	88 f7       	brcc	.-30     	; 0x972 <__stack+0x73>
 990:	e0 95       	com	r30
 992:	08 95       	ret

00000994 <__fixsfsi>:
 994:	04 d0       	rcall	.+8      	; 0x99e <__fixunssfsi>
 996:	68 94       	set
 998:	b1 11       	cpse	r27, r1
 99a:	b5 c0       	rjmp	.+362    	; 0xb06 <__fp_szero>
 99c:	08 95       	ret

0000099e <__fixunssfsi>:
 99e:	98 d0       	rcall	.+304    	; 0xad0 <__fp_splitA>
 9a0:	88 f0       	brcs	.+34     	; 0x9c4 <__fixunssfsi+0x26>
 9a2:	9f 57       	subi	r25, 0x7F	; 127
 9a4:	90 f0       	brcs	.+36     	; 0x9ca <__fixunssfsi+0x2c>
 9a6:	b9 2f       	mov	r27, r25
 9a8:	99 27       	eor	r25, r25
 9aa:	b7 51       	subi	r27, 0x17	; 23
 9ac:	a0 f0       	brcs	.+40     	; 0x9d6 <__fixunssfsi+0x38>
 9ae:	d1 f0       	breq	.+52     	; 0x9e4 <__fixunssfsi+0x46>
 9b0:	66 0f       	add	r22, r22
 9b2:	77 1f       	adc	r23, r23
 9b4:	88 1f       	adc	r24, r24
 9b6:	99 1f       	adc	r25, r25
 9b8:	1a f0       	brmi	.+6      	; 0x9c0 <__fixunssfsi+0x22>
 9ba:	ba 95       	dec	r27
 9bc:	c9 f7       	brne	.-14     	; 0x9b0 <__fixunssfsi+0x12>
 9be:	12 c0       	rjmp	.+36     	; 0x9e4 <__fixunssfsi+0x46>
 9c0:	b1 30       	cpi	r27, 0x01	; 1
 9c2:	81 f0       	breq	.+32     	; 0x9e4 <__fixunssfsi+0x46>
 9c4:	9f d0       	rcall	.+318    	; 0xb04 <__fp_zero>
 9c6:	b1 e0       	ldi	r27, 0x01	; 1
 9c8:	08 95       	ret
 9ca:	9c c0       	rjmp	.+312    	; 0xb04 <__fp_zero>
 9cc:	67 2f       	mov	r22, r23
 9ce:	78 2f       	mov	r23, r24
 9d0:	88 27       	eor	r24, r24
 9d2:	b8 5f       	subi	r27, 0xF8	; 248
 9d4:	39 f0       	breq	.+14     	; 0x9e4 <__fixunssfsi+0x46>
 9d6:	b9 3f       	cpi	r27, 0xF9	; 249
 9d8:	cc f3       	brlt	.-14     	; 0x9cc <__fixunssfsi+0x2e>
 9da:	86 95       	lsr	r24
 9dc:	77 95       	ror	r23
 9de:	67 95       	ror	r22
 9e0:	b3 95       	inc	r27
 9e2:	d9 f7       	brne	.-10     	; 0x9da <__fixunssfsi+0x3c>
 9e4:	3e f4       	brtc	.+14     	; 0x9f4 <__fixunssfsi+0x56>
 9e6:	90 95       	com	r25
 9e8:	80 95       	com	r24
 9ea:	70 95       	com	r23
 9ec:	61 95       	neg	r22
 9ee:	7f 4f       	sbci	r23, 0xFF	; 255
 9f0:	8f 4f       	sbci	r24, 0xFF	; 255
 9f2:	9f 4f       	sbci	r25, 0xFF	; 255
 9f4:	08 95       	ret

000009f6 <__floatunsisf>:
 9f6:	e8 94       	clt
 9f8:	09 c0       	rjmp	.+18     	; 0xa0c <__floatsisf+0x12>

000009fa <__floatsisf>:
 9fa:	97 fb       	bst	r25, 7
 9fc:	3e f4       	brtc	.+14     	; 0xa0c <__floatsisf+0x12>
 9fe:	90 95       	com	r25
 a00:	80 95       	com	r24
 a02:	70 95       	com	r23
 a04:	61 95       	neg	r22
 a06:	7f 4f       	sbci	r23, 0xFF	; 255
 a08:	8f 4f       	sbci	r24, 0xFF	; 255
 a0a:	9f 4f       	sbci	r25, 0xFF	; 255
 a0c:	99 23       	and	r25, r25
 a0e:	a9 f0       	breq	.+42     	; 0xa3a <__floatsisf+0x40>
 a10:	f9 2f       	mov	r31, r25
 a12:	96 e9       	ldi	r25, 0x96	; 150
 a14:	bb 27       	eor	r27, r27
 a16:	93 95       	inc	r25
 a18:	f6 95       	lsr	r31
 a1a:	87 95       	ror	r24
 a1c:	77 95       	ror	r23
 a1e:	67 95       	ror	r22
 a20:	b7 95       	ror	r27
 a22:	f1 11       	cpse	r31, r1
 a24:	f8 cf       	rjmp	.-16     	; 0xa16 <__floatsisf+0x1c>
 a26:	fa f4       	brpl	.+62     	; 0xa66 <__floatsisf+0x6c>
 a28:	bb 0f       	add	r27, r27
 a2a:	11 f4       	brne	.+4      	; 0xa30 <__floatsisf+0x36>
 a2c:	60 ff       	sbrs	r22, 0
 a2e:	1b c0       	rjmp	.+54     	; 0xa66 <__floatsisf+0x6c>
 a30:	6f 5f       	subi	r22, 0xFF	; 255
 a32:	7f 4f       	sbci	r23, 0xFF	; 255
 a34:	8f 4f       	sbci	r24, 0xFF	; 255
 a36:	9f 4f       	sbci	r25, 0xFF	; 255
 a38:	16 c0       	rjmp	.+44     	; 0xa66 <__floatsisf+0x6c>
 a3a:	88 23       	and	r24, r24
 a3c:	11 f0       	breq	.+4      	; 0xa42 <__floatsisf+0x48>
 a3e:	96 e9       	ldi	r25, 0x96	; 150
 a40:	11 c0       	rjmp	.+34     	; 0xa64 <__floatsisf+0x6a>
 a42:	77 23       	and	r23, r23
 a44:	21 f0       	breq	.+8      	; 0xa4e <__floatsisf+0x54>
 a46:	9e e8       	ldi	r25, 0x8E	; 142
 a48:	87 2f       	mov	r24, r23
 a4a:	76 2f       	mov	r23, r22
 a4c:	05 c0       	rjmp	.+10     	; 0xa58 <__floatsisf+0x5e>
 a4e:	66 23       	and	r22, r22
 a50:	71 f0       	breq	.+28     	; 0xa6e <__floatsisf+0x74>
 a52:	96 e8       	ldi	r25, 0x86	; 134
 a54:	86 2f       	mov	r24, r22
 a56:	70 e0       	ldi	r23, 0x00	; 0
 a58:	60 e0       	ldi	r22, 0x00	; 0
 a5a:	2a f0       	brmi	.+10     	; 0xa66 <__floatsisf+0x6c>
 a5c:	9a 95       	dec	r25
 a5e:	66 0f       	add	r22, r22
 a60:	77 1f       	adc	r23, r23
 a62:	88 1f       	adc	r24, r24
 a64:	da f7       	brpl	.-10     	; 0xa5c <__floatsisf+0x62>
 a66:	88 0f       	add	r24, r24
 a68:	96 95       	lsr	r25
 a6a:	87 95       	ror	r24
 a6c:	97 f9       	bld	r25, 7
 a6e:	08 95       	ret

00000a70 <__fp_inf>:
 a70:	97 f9       	bld	r25, 7
 a72:	9f 67       	ori	r25, 0x7F	; 127
 a74:	80 e8       	ldi	r24, 0x80	; 128
 a76:	70 e0       	ldi	r23, 0x00	; 0
 a78:	60 e0       	ldi	r22, 0x00	; 0
 a7a:	08 95       	ret

00000a7c <__fp_nan>:
 a7c:	9f ef       	ldi	r25, 0xFF	; 255
 a7e:	80 ec       	ldi	r24, 0xC0	; 192
 a80:	08 95       	ret

00000a82 <__fp_pscA>:
 a82:	00 24       	eor	r0, r0
 a84:	0a 94       	dec	r0
 a86:	16 16       	cp	r1, r22
 a88:	17 06       	cpc	r1, r23
 a8a:	18 06       	cpc	r1, r24
 a8c:	09 06       	cpc	r0, r25
 a8e:	08 95       	ret

00000a90 <__fp_pscB>:
 a90:	00 24       	eor	r0, r0
 a92:	0a 94       	dec	r0
 a94:	12 16       	cp	r1, r18
 a96:	13 06       	cpc	r1, r19
 a98:	14 06       	cpc	r1, r20
 a9a:	05 06       	cpc	r0, r21
 a9c:	08 95       	ret

00000a9e <__fp_round>:
 a9e:	09 2e       	mov	r0, r25
 aa0:	03 94       	inc	r0
 aa2:	00 0c       	add	r0, r0
 aa4:	11 f4       	brne	.+4      	; 0xaaa <__fp_round+0xc>
 aa6:	88 23       	and	r24, r24
 aa8:	52 f0       	brmi	.+20     	; 0xabe <__fp_round+0x20>
 aaa:	bb 0f       	add	r27, r27
 aac:	40 f4       	brcc	.+16     	; 0xabe <__fp_round+0x20>
 aae:	bf 2b       	or	r27, r31
 ab0:	11 f4       	brne	.+4      	; 0xab6 <__fp_round+0x18>
 ab2:	60 ff       	sbrs	r22, 0
 ab4:	04 c0       	rjmp	.+8      	; 0xabe <__fp_round+0x20>
 ab6:	6f 5f       	subi	r22, 0xFF	; 255
 ab8:	7f 4f       	sbci	r23, 0xFF	; 255
 aba:	8f 4f       	sbci	r24, 0xFF	; 255
 abc:	9f 4f       	sbci	r25, 0xFF	; 255
 abe:	08 95       	ret

00000ac0 <__fp_split3>:
 ac0:	57 fd       	sbrc	r21, 7
 ac2:	90 58       	subi	r25, 0x80	; 128
 ac4:	44 0f       	add	r20, r20
 ac6:	55 1f       	adc	r21, r21
 ac8:	59 f0       	breq	.+22     	; 0xae0 <__fp_splitA+0x10>
 aca:	5f 3f       	cpi	r21, 0xFF	; 255
 acc:	71 f0       	breq	.+28     	; 0xaea <__fp_splitA+0x1a>
 ace:	47 95       	ror	r20

00000ad0 <__fp_splitA>:
 ad0:	88 0f       	add	r24, r24
 ad2:	97 fb       	bst	r25, 7
 ad4:	99 1f       	adc	r25, r25
 ad6:	61 f0       	breq	.+24     	; 0xaf0 <__fp_splitA+0x20>
 ad8:	9f 3f       	cpi	r25, 0xFF	; 255
 ada:	79 f0       	breq	.+30     	; 0xafa <__fp_splitA+0x2a>
 adc:	87 95       	ror	r24
 ade:	08 95       	ret
 ae0:	12 16       	cp	r1, r18
 ae2:	13 06       	cpc	r1, r19
 ae4:	14 06       	cpc	r1, r20
 ae6:	55 1f       	adc	r21, r21
 ae8:	f2 cf       	rjmp	.-28     	; 0xace <__fp_split3+0xe>
 aea:	46 95       	lsr	r20
 aec:	f1 df       	rcall	.-30     	; 0xad0 <__fp_splitA>
 aee:	08 c0       	rjmp	.+16     	; 0xb00 <__fp_splitA+0x30>
 af0:	16 16       	cp	r1, r22
 af2:	17 06       	cpc	r1, r23
 af4:	18 06       	cpc	r1, r24
 af6:	99 1f       	adc	r25, r25
 af8:	f1 cf       	rjmp	.-30     	; 0xadc <__fp_splitA+0xc>
 afa:	86 95       	lsr	r24
 afc:	71 05       	cpc	r23, r1
 afe:	61 05       	cpc	r22, r1
 b00:	08 94       	sec
 b02:	08 95       	ret

00000b04 <__fp_zero>:
 b04:	e8 94       	clt

00000b06 <__fp_szero>:
 b06:	bb 27       	eor	r27, r27
 b08:	66 27       	eor	r22, r22
 b0a:	77 27       	eor	r23, r23
 b0c:	cb 01       	movw	r24, r22
 b0e:	97 f9       	bld	r25, 7
 b10:	08 95       	ret

00000b12 <__mulsf3>:
 b12:	0b d0       	rcall	.+22     	; 0xb2a <__mulsf3x>
 b14:	c4 cf       	rjmp	.-120    	; 0xa9e <__fp_round>
 b16:	b5 df       	rcall	.-150    	; 0xa82 <__fp_pscA>
 b18:	28 f0       	brcs	.+10     	; 0xb24 <__mulsf3+0x12>
 b1a:	ba df       	rcall	.-140    	; 0xa90 <__fp_pscB>
 b1c:	18 f0       	brcs	.+6      	; 0xb24 <__mulsf3+0x12>
 b1e:	95 23       	and	r25, r21
 b20:	09 f0       	breq	.+2      	; 0xb24 <__mulsf3+0x12>
 b22:	a6 cf       	rjmp	.-180    	; 0xa70 <__fp_inf>
 b24:	ab cf       	rjmp	.-170    	; 0xa7c <__fp_nan>
 b26:	11 24       	eor	r1, r1
 b28:	ee cf       	rjmp	.-36     	; 0xb06 <__fp_szero>

00000b2a <__mulsf3x>:
 b2a:	ca df       	rcall	.-108    	; 0xac0 <__fp_split3>
 b2c:	a0 f3       	brcs	.-24     	; 0xb16 <__mulsf3+0x4>

00000b2e <__mulsf3_pse>:
 b2e:	95 9f       	mul	r25, r21
 b30:	d1 f3       	breq	.-12     	; 0xb26 <__mulsf3+0x14>
 b32:	95 0f       	add	r25, r21
 b34:	50 e0       	ldi	r21, 0x00	; 0
 b36:	55 1f       	adc	r21, r21
 b38:	62 9f       	mul	r22, r18
 b3a:	f0 01       	movw	r30, r0
 b3c:	72 9f       	mul	r23, r18
 b3e:	bb 27       	eor	r27, r27
 b40:	f0 0d       	add	r31, r0
 b42:	b1 1d       	adc	r27, r1
 b44:	63 9f       	mul	r22, r19
 b46:	aa 27       	eor	r26, r26
 b48:	f0 0d       	add	r31, r0
 b4a:	b1 1d       	adc	r27, r1
 b4c:	aa 1f       	adc	r26, r26
 b4e:	64 9f       	mul	r22, r20
 b50:	66 27       	eor	r22, r22
 b52:	b0 0d       	add	r27, r0
 b54:	a1 1d       	adc	r26, r1
 b56:	66 1f       	adc	r22, r22
 b58:	82 9f       	mul	r24, r18
 b5a:	22 27       	eor	r18, r18
 b5c:	b0 0d       	add	r27, r0
 b5e:	a1 1d       	adc	r26, r1
 b60:	62 1f       	adc	r22, r18
 b62:	73 9f       	mul	r23, r19
 b64:	b0 0d       	add	r27, r0
 b66:	a1 1d       	adc	r26, r1
 b68:	62 1f       	adc	r22, r18
 b6a:	83 9f       	mul	r24, r19
 b6c:	a0 0d       	add	r26, r0
 b6e:	61 1d       	adc	r22, r1
 b70:	22 1f       	adc	r18, r18
 b72:	74 9f       	mul	r23, r20
 b74:	33 27       	eor	r19, r19
 b76:	a0 0d       	add	r26, r0
 b78:	61 1d       	adc	r22, r1
 b7a:	23 1f       	adc	r18, r19
 b7c:	84 9f       	mul	r24, r20
 b7e:	60 0d       	add	r22, r0
 b80:	21 1d       	adc	r18, r1
 b82:	82 2f       	mov	r24, r18
 b84:	76 2f       	mov	r23, r22
 b86:	6a 2f       	mov	r22, r26
 b88:	11 24       	eor	r1, r1
 b8a:	9f 57       	subi	r25, 0x7F	; 127
 b8c:	50 40       	sbci	r21, 0x00	; 0
 b8e:	8a f0       	brmi	.+34     	; 0xbb2 <__mulsf3_pse+0x84>
 b90:	e1 f0       	breq	.+56     	; 0xbca <__mulsf3_pse+0x9c>
 b92:	88 23       	and	r24, r24
 b94:	4a f0       	brmi	.+18     	; 0xba8 <__mulsf3_pse+0x7a>
 b96:	ee 0f       	add	r30, r30
 b98:	ff 1f       	adc	r31, r31
 b9a:	bb 1f       	adc	r27, r27
 b9c:	66 1f       	adc	r22, r22
 b9e:	77 1f       	adc	r23, r23
 ba0:	88 1f       	adc	r24, r24
 ba2:	91 50       	subi	r25, 0x01	; 1
 ba4:	50 40       	sbci	r21, 0x00	; 0
 ba6:	a9 f7       	brne	.-22     	; 0xb92 <__mulsf3_pse+0x64>
 ba8:	9e 3f       	cpi	r25, 0xFE	; 254
 baa:	51 05       	cpc	r21, r1
 bac:	70 f0       	brcs	.+28     	; 0xbca <__mulsf3_pse+0x9c>
 bae:	60 cf       	rjmp	.-320    	; 0xa70 <__fp_inf>
 bb0:	aa cf       	rjmp	.-172    	; 0xb06 <__fp_szero>
 bb2:	5f 3f       	cpi	r21, 0xFF	; 255
 bb4:	ec f3       	brlt	.-6      	; 0xbb0 <__mulsf3_pse+0x82>
 bb6:	98 3e       	cpi	r25, 0xE8	; 232
 bb8:	dc f3       	brlt	.-10     	; 0xbb0 <__mulsf3_pse+0x82>
 bba:	86 95       	lsr	r24
 bbc:	77 95       	ror	r23
 bbe:	67 95       	ror	r22
 bc0:	b7 95       	ror	r27
 bc2:	f7 95       	ror	r31
 bc4:	e7 95       	ror	r30
 bc6:	9f 5f       	subi	r25, 0xFF	; 255
 bc8:	c1 f7       	brne	.-16     	; 0xbba <__mulsf3_pse+0x8c>
 bca:	fe 2b       	or	r31, r30
 bcc:	88 0f       	add	r24, r24
 bce:	91 1d       	adc	r25, r1
 bd0:	96 95       	lsr	r25
 bd2:	87 95       	ror	r24
 bd4:	97 f9       	bld	r25, 7
 bd6:	08 95       	ret

00000bd8 <_exit>:
 bd8:	f8 94       	cli

00000bda <__stop_program>:
 bda:	ff cf       	rjmp	.-2      	; 0xbda <__stop_program>
