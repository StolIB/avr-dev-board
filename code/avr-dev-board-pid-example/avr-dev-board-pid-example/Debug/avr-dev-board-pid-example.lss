
avr-dev-board-pid-example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000014b2  00001546  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000167  00800110  00800110  00001556  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001556  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000218  00000000  00000000  000015b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001618  00000000  00000000  000017ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f5  00000000  00000000  00002de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009b8  00000000  00000000  000036d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000508  00000000  00000000  00004090  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000582  00000000  00000000  00004598  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000af5  00000000  00000000  00004b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  0000560f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 80 04 	jmp	0x900	; 0x900 <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 33 02 	jmp	0x466	; 0x466 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 eb       	ldi	r30, 0xB2	; 178
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 31       	cpi	r26, 0x10	; 16
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a0 e1       	ldi	r26, 0x10	; 16
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 37       	cpi	r26, 0x77	; 119
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
      9e:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:
	/* If more than 8-bit precision is used - read ADCL first and ADCH second. */
	return adc_result;
}

ISR(ADC_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	2f 93       	push	r18
      b2:	8f 93       	push	r24
      b4:	9f 93       	push	r25
	adc_done = 1;
      b6:	81 e0       	ldi	r24, 0x01	; 1
      b8:	80 93 12 01 	sts	0x0112, r24
	uint16_t temp = 0;
	temp |= ADCL;
      bc:	80 91 78 00 	lds	r24, 0x0078
	temp |= (ADCH << 8);
      c0:	20 91 79 00 	lds	r18, 0x0079
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	92 2b       	or	r25, r18
	adc_result = temp;
      c8:	90 93 11 01 	sts	0x0111, r25
      cc:	80 93 10 01 	sts	0x0110, r24

	//adc_result = (int)(adc_result + (float)((temp - adc_result)*0.20));
}
      d0:	9f 91       	pop	r25
      d2:	8f 91       	pop	r24
      d4:	2f 91       	pop	r18
      d6:	0f 90       	pop	r0
      d8:	0f be       	out	0x3f, r0	; 63
      da:	0f 90       	pop	r0
      dc:	1f 90       	pop	r1
      de:	18 95       	reti

000000e0 <main>:
#include "uart.h"
#include "timer.h"
#include "counter.h"

int main(void)
{
      e0:	cf 93       	push	r28
      e2:	df 93       	push	r29
      e4:	cd b7       	in	r28, 0x3d	; 61
      e6:	de b7       	in	r29, 0x3e	; 62
      e8:	2a 97       	sbiw	r28, 0x0a	; 10
      ea:	0f b6       	in	r0, 0x3f	; 63
      ec:	f8 94       	cli
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	0f be       	out	0x3f, r0	; 63
      f2:	cd bf       	out	0x3d, r28	; 61
	init_uart(UART_9600);
      f4:	83 e3       	ldi	r24, 0x33	; 51
      f6:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <init_uart>
	init_timer_1(PRESCALER8, 1000);
      fa:	68 ee       	ldi	r22, 0xE8	; 232
      fc:	73 e0       	ldi	r23, 0x03	; 3
      fe:	82 e0       	ldi	r24, 0x02	; 2
     100:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <init_timer_1>
	set_pin_dir(&DDRD, GPIO_PIN5, OUTPUT);
     104:	41 e0       	ldi	r20, 0x01	; 1
     106:	65 e0       	ldi	r22, 0x05	; 5
     108:	8a e2       	ldi	r24, 0x2A	; 42
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	0e 94 23 01 	call	0x246	; 0x246 <set_pin_dir>
	pid_setup_params(1, 0, 0);
     110:	e1 2c       	mov	r14, r1
     112:	f1 2c       	mov	r15, r1
     114:	87 01       	movw	r16, r14
     116:	a8 01       	movw	r20, r16
     118:	97 01       	movw	r18, r14
     11a:	60 e0       	ldi	r22, 0x00	; 0
     11c:	70 e0       	ldi	r23, 0x00	; 0
     11e:	80 e8       	ldi	r24, 0x80	; 128
     120:	9f e3       	ldi	r25, 0x3F	; 63
     122:	0e 94 ad 01 	call	0x35a	; 0x35a <pid_setup_params>
	pid_ref_val(1000);
     126:	68 ee       	ldi	r22, 0xE8	; 232
     128:	73 e0       	ldi	r23, 0x03	; 3
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	0e 94 26 02 	call	0x44c	; 0x44c <pid_ref_val>
	start_pid_control();
     132:	0e 94 2f 02 	call	0x45e	; 0x45e <start_pid_control>
	char s[10] = {'\0'};
     136:	fe 01       	movw	r30, r28
     138:	31 96       	adiw	r30, 0x01	; 1
     13a:	8a e0       	ldi	r24, 0x0A	; 10
     13c:	df 01       	movw	r26, r30
     13e:	1d 92       	st	X+, r1
     140:	8a 95       	dec	r24
     142:	e9 f7       	brne	.-6      	; 0x13e <main+0x5e>
	
    while(1){
        send_string("Counts: ");
        sprintf(s, "%li", get_count());
     144:	0f 2e       	mov	r0, r31
     146:	f9 e0       	ldi	r31, 0x09	; 9
     148:	ef 2e       	mov	r14, r31
     14a:	f1 e0       	ldi	r31, 0x01	; 1
     14c:	ff 2e       	mov	r15, r31
     14e:	f0 2d       	mov	r31, r0
     150:	8f 01       	movw	r16, r30
	pid_ref_val(1000);
	start_pid_control();
	char s[10] = {'\0'};
	
    while(1){
        send_string("Counts: ");
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	91 e0       	ldi	r25, 0x01	; 1
     156:	0e 94 a2 05 	call	0xb44	; 0xb44 <send_string>
        sprintf(s, "%li", get_count());
     15a:	0e 94 df 00 	call	0x1be	; 0x1be <get_count>
     15e:	9f 93       	push	r25
     160:	8f 93       	push	r24
     162:	7f 93       	push	r23
     164:	6f 93       	push	r22
     166:	ff 92       	push	r15
     168:	ef 92       	push	r14
     16a:	1f 93       	push	r17
     16c:	0f 93       	push	r16
     16e:	0e 94 86 07 	call	0xf0c	; 0xf0c <sprintf>
        send_string(s);
     172:	c8 01       	movw	r24, r16
     174:	0e 94 a2 05 	call	0xb44	; 0xb44 <send_string>
        send_string("\n\r");
     178:	8d e0       	ldi	r24, 0x0D	; 13
     17a:	91 e0       	ldi	r25, 0x01	; 1
     17c:	0e 94 a2 05 	call	0xb44	; 0xb44 <send_string>
        s[0] = '\0';
     180:	19 82       	std	Y+1, r1	; 0x01
        pause_loop(1000);
     182:	88 ee       	ldi	r24, 0xE8	; 232
     184:	93 e0       	ldi	r25, 0x03	; 3
     186:	0e 94 69 04 	call	0x8d2	; 0x8d2 <pause_loop>
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	f8 94       	cli
     18e:	de bf       	out	0x3e, r29	; 62
     190:	0f be       	out	0x3f, r0	; 63
     192:	cd bf       	out	0x3d, r28	; 61
     194:	de cf       	rjmp	.-68     	; 0x152 <main+0x72>

00000196 <enable_counter>:

static volatile long counts = 0;

void enable_counter()
{
	set_pin_dir(&EXT_DDR, EXT_CH_A, INPUT);
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	62 e0       	ldi	r22, 0x02	; 2
     19a:	8a e2       	ldi	r24, 0x2A	; 42
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 23 01 	call	0x246	; 0x246 <set_pin_dir>
	set_pin_dir(&EXT_DDR, EXT_CH_B, INPUT);
     1a2:	40 e0       	ldi	r20, 0x00	; 0
     1a4:	63 e0       	ldi	r22, 0x03	; 3
     1a6:	8a e2       	ldi	r24, 0x2A	; 42
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 23 01 	call	0x246	; 0x246 <set_pin_dir>
	EICRA |= (1 << ISC11);	/* Falling edge on INT1. */
     1ae:	e9 e6       	ldi	r30, 0x69	; 105
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	80 81       	ld	r24, Z
     1b4:	88 60       	ori	r24, 0x08	; 8
     1b6:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);
     1b8:	e9 9a       	sbi	0x1d, 1	; 29
	sei();
     1ba:	78 94       	sei
     1bc:	08 95       	ret

000001be <get_count>:
}

long get_count()
{
	return counts;
     1be:	60 91 13 01 	lds	r22, 0x0113
     1c2:	70 91 14 01 	lds	r23, 0x0114
     1c6:	80 91 15 01 	lds	r24, 0x0115
     1ca:	90 91 16 01 	lds	r25, 0x0116
}
     1ce:	08 95       	ret

000001d0 <__vector_2>:

ISR(INT1_vect)
{
     1d0:	1f 92       	push	r1
     1d2:	0f 92       	push	r0
     1d4:	0f b6       	in	r0, 0x3f	; 63
     1d6:	0f 92       	push	r0
     1d8:	11 24       	eor	r1, r1
     1da:	8f 93       	push	r24
     1dc:	9f 93       	push	r25
     1de:	af 93       	push	r26
     1e0:	bf 93       	push	r27
	if( EXT_PORT & (1 << EXT_CH_A) ) counts--;	/* CCW */
     1e2:	4a 9b       	sbis	0x09, 2	; 9
     1e4:	14 c0       	rjmp	.+40     	; 0x20e <__vector_2+0x3e>
     1e6:	80 91 13 01 	lds	r24, 0x0113
     1ea:	90 91 14 01 	lds	r25, 0x0114
     1ee:	a0 91 15 01 	lds	r26, 0x0115
     1f2:	b0 91 16 01 	lds	r27, 0x0116
     1f6:	01 97       	sbiw	r24, 0x01	; 1
     1f8:	a1 09       	sbc	r26, r1
     1fa:	b1 09       	sbc	r27, r1
     1fc:	80 93 13 01 	sts	0x0113, r24
     200:	90 93 14 01 	sts	0x0114, r25
     204:	a0 93 15 01 	sts	0x0115, r26
     208:	b0 93 16 01 	sts	0x0116, r27
     20c:	13 c0       	rjmp	.+38     	; 0x234 <__vector_2+0x64>
	else counts++;								/* CW */
     20e:	80 91 13 01 	lds	r24, 0x0113
     212:	90 91 14 01 	lds	r25, 0x0114
     216:	a0 91 15 01 	lds	r26, 0x0115
     21a:	b0 91 16 01 	lds	r27, 0x0116
     21e:	01 96       	adiw	r24, 0x01	; 1
     220:	a1 1d       	adc	r26, r1
     222:	b1 1d       	adc	r27, r1
     224:	80 93 13 01 	sts	0x0113, r24
     228:	90 93 14 01 	sts	0x0114, r25
     22c:	a0 93 15 01 	sts	0x0115, r26
     230:	b0 93 16 01 	sts	0x0116, r27
}
     234:	bf 91       	pop	r27
     236:	af 91       	pop	r26
     238:	9f 91       	pop	r25
     23a:	8f 91       	pop	r24
     23c:	0f 90       	pop	r0
     23e:	0f be       	out	0x3f, r0	; 63
     240:	0f 90       	pop	r0
     242:	1f 90       	pop	r1
     244:	18 95       	reti

00000246 <set_pin_dir>:

#include "gpio.h"

void set_pin_dir(volatile uint8_t *target_port, uint8_t pin_no, uint8_t dir)
{
	switch(dir){
     246:	44 23       	and	r20, r20
     248:	89 f0       	breq	.+34     	; 0x26c <set_pin_dir+0x26>
     24a:	41 30       	cpi	r20, 0x01	; 1
     24c:	f1 f4       	brne	.+60     	; 0x28a <set_pin_dir+0x44>
	case OUTPUT:
		(*target_port) |= (1 << pin_no);
     24e:	fc 01       	movw	r30, r24
     250:	40 81       	ld	r20, Z
     252:	21 e0       	ldi	r18, 0x01	; 1
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	f9 01       	movw	r30, r18
     258:	02 c0       	rjmp	.+4      	; 0x25e <set_pin_dir+0x18>
     25a:	ee 0f       	add	r30, r30
     25c:	ff 1f       	adc	r31, r31
     25e:	6a 95       	dec	r22
     260:	e2 f7       	brpl	.-8      	; 0x25a <set_pin_dir+0x14>
     262:	bf 01       	movw	r22, r30
     264:	64 2b       	or	r22, r20
     266:	fc 01       	movw	r30, r24
     268:	60 83       	st	Z, r22
		break;
     26a:	08 95       	ret
	case INPUT:
		(*target_port) &= ~(1 << pin_no);
     26c:	fc 01       	movw	r30, r24
     26e:	40 81       	ld	r20, Z
     270:	21 e0       	ldi	r18, 0x01	; 1
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	f9 01       	movw	r30, r18
     276:	02 c0       	rjmp	.+4      	; 0x27c <set_pin_dir+0x36>
     278:	ee 0f       	add	r30, r30
     27a:	ff 1f       	adc	r31, r31
     27c:	6a 95       	dec	r22
     27e:	e2 f7       	brpl	.-8      	; 0x278 <set_pin_dir+0x32>
     280:	bf 01       	movw	r22, r30
     282:	60 95       	com	r22
     284:	64 23       	and	r22, r20
     286:	fc 01       	movw	r30, r24
     288:	60 83       	st	Z, r22
     28a:	08 95       	ret

0000028c <set_pin>:
	}
}

void set_pin(volatile uint8_t *target_port, uint8_t pin_no)
{
	(*target_port) |= (1 << pin_no);
     28c:	fc 01       	movw	r30, r24
     28e:	40 81       	ld	r20, Z
     290:	21 e0       	ldi	r18, 0x01	; 1
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	f9 01       	movw	r30, r18
     296:	02 c0       	rjmp	.+4      	; 0x29c <set_pin+0x10>
     298:	ee 0f       	add	r30, r30
     29a:	ff 1f       	adc	r31, r31
     29c:	6a 95       	dec	r22
     29e:	e2 f7       	brpl	.-8      	; 0x298 <set_pin+0xc>
     2a0:	bf 01       	movw	r22, r30
     2a2:	64 2b       	or	r22, r20
     2a4:	fc 01       	movw	r30, r24
     2a6:	60 83       	st	Z, r22
     2a8:	08 95       	ret

000002aa <clear_pin>:
}

void clear_pin(volatile uint8_t *target_port, uint8_t pin_no)
{
	(*target_port) &= ~(1 << pin_no);
     2aa:	fc 01       	movw	r30, r24
     2ac:	40 81       	ld	r20, Z
     2ae:	21 e0       	ldi	r18, 0x01	; 1
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	f9 01       	movw	r30, r18
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <clear_pin+0x10>
     2b6:	ee 0f       	add	r30, r30
     2b8:	ff 1f       	adc	r31, r31
     2ba:	6a 95       	dec	r22
     2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <clear_pin+0xc>
     2be:	bf 01       	movw	r22, r30
     2c0:	60 95       	com	r22
     2c2:	64 23       	and	r22, r20
     2c4:	fc 01       	movw	r30, r24
     2c6:	60 83       	st	Z, r22
     2c8:	08 95       	ret

000002ca <write_pin>:
}

void write_pin(volatile uint8_t *target_port, uint8_t pin_no, uint8_t pin_val)
{
	switch(pin_val){
     2ca:	44 23       	and	r20, r20
     2cc:	89 f0       	breq	.+34     	; 0x2f0 <write_pin+0x26>
     2ce:	41 30       	cpi	r20, 0x01	; 1
     2d0:	f1 f4       	brne	.+60     	; 0x30e <write_pin+0x44>
	case HIGH:
		(*target_port) |= (1 << pin_no);
     2d2:	fc 01       	movw	r30, r24
     2d4:	40 81       	ld	r20, Z
     2d6:	21 e0       	ldi	r18, 0x01	; 1
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	f9 01       	movw	r30, r18
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <write_pin+0x18>
     2de:	ee 0f       	add	r30, r30
     2e0:	ff 1f       	adc	r31, r31
     2e2:	6a 95       	dec	r22
     2e4:	e2 f7       	brpl	.-8      	; 0x2de <write_pin+0x14>
     2e6:	bf 01       	movw	r22, r30
     2e8:	64 2b       	or	r22, r20
     2ea:	fc 01       	movw	r30, r24
     2ec:	60 83       	st	Z, r22
		break;
     2ee:	08 95       	ret
	case LOW:
		(*target_port) &= ~(1 << pin_no);
     2f0:	fc 01       	movw	r30, r24
     2f2:	40 81       	ld	r20, Z
     2f4:	21 e0       	ldi	r18, 0x01	; 1
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	f9 01       	movw	r30, r18
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <write_pin+0x36>
     2fc:	ee 0f       	add	r30, r30
     2fe:	ff 1f       	adc	r31, r31
     300:	6a 95       	dec	r22
     302:	e2 f7       	brpl	.-8      	; 0x2fc <write_pin+0x32>
     304:	bf 01       	movw	r22, r30
     306:	60 95       	com	r22
     308:	64 23       	and	r22, r20
     30a:	fc 01       	movw	r30, r24
     30c:	60 83       	st	Z, r22
     30e:	08 95       	ret

00000310 <enable_h_bridge>:

#include "motor.h"

void enable_h_bridge()
{
	set_pin_dir(&MOT_DDR, MOT_EN, OUTPUT);
     310:	41 e0       	ldi	r20, 0x01	; 1
     312:	60 e0       	ldi	r22, 0x00	; 0
     314:	84 e2       	ldi	r24, 0x24	; 36
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 23 01 	call	0x246	; 0x246 <set_pin_dir>
	set_pin_dir(&MOT_DDR, MOT_PIN0, OUTPUT);
     31c:	41 e0       	ldi	r20, 0x01	; 1
     31e:	61 e0       	ldi	r22, 0x01	; 1
     320:	84 e2       	ldi	r24, 0x24	; 36
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 23 01 	call	0x246	; 0x246 <set_pin_dir>
	set_pin_dir(&MOT_DDR, MOT_PIN1, OUTPUT);
     328:	41 e0       	ldi	r20, 0x01	; 1
     32a:	62 e0       	ldi	r22, 0x02	; 2
     32c:	84 e2       	ldi	r24, 0x24	; 36
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 23 01 	call	0x246	; 0x246 <set_pin_dir>

	write_pin(&MOT_PORT, MOT_EN, HIGH);
     334:	41 e0       	ldi	r20, 0x01	; 1
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	85 e2       	ldi	r24, 0x25	; 37
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 65 01 	call	0x2ca	; 0x2ca <write_pin>
	write_pin(&MOT_PORT, MOT_PIN0, LOW);
     340:	40 e0       	ldi	r20, 0x00	; 0
     342:	61 e0       	ldi	r22, 0x01	; 1
     344:	85 e2       	ldi	r24, 0x25	; 37
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 65 01 	call	0x2ca	; 0x2ca <write_pin>
	write_pin(&MOT_PORT, MOT_PIN1, LOW);
     34c:	40 e0       	ldi	r20, 0x00	; 0
     34e:	62 e0       	ldi	r22, 0x02	; 2
     350:	85 e2       	ldi	r24, 0x25	; 37
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 65 01 	call	0x2ca	; 0x2ca <write_pin>
     358:	08 95       	ret

0000035a <pid_setup_params>:

	sei();
}

void pid_setup_params(float kp, float ki, float kd)
{
     35a:	ef 92       	push	r14
     35c:	ff 92       	push	r15
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
	_pid.kp = kp;
     362:	60 93 19 01 	sts	0x0119, r22
     366:	70 93 1a 01 	sts	0x011A, r23
     36a:	80 93 1b 01 	sts	0x011B, r24
     36e:	90 93 1c 01 	sts	0x011C, r25
	_pid.ki = ki;
     372:	20 93 1d 01 	sts	0x011D, r18
     376:	30 93 1e 01 	sts	0x011E, r19
     37a:	40 93 1f 01 	sts	0x011F, r20
     37e:	50 93 20 01 	sts	0x0120, r21
	_pid.kd = kd;
     382:	e0 92 21 01 	sts	0x0121, r14
     386:	f0 92 22 01 	sts	0x0122, r15
     38a:	00 93 23 01 	sts	0x0123, r16
     38e:	10 93 24 01 	sts	0x0124, r17
	_pid.sample_period = 500;	//50ms for pid loop
     392:	84 ef       	ldi	r24, 0xF4	; 244
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	a0 e0       	ldi	r26, 0x00	; 0
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	80 93 29 01 	sts	0x0129, r24
     39e:	90 93 2a 01 	sts	0x012A, r25
     3a2:	a0 93 2b 01 	sts	0x012B, r26
     3a6:	b0 93 2c 01 	sts	0x012C, r27
	_pid.sample_peiod_opt = 1 / 500;
     3aa:	10 92 2d 01 	sts	0x012D, r1
     3ae:	10 92 2e 01 	sts	0x012E, r1
     3b2:	10 92 2f 01 	sts	0x012F, r1
     3b6:	10 92 30 01 	sts	0x0130, r1
	_pid.pwm_period = 200;	//20ms period for motors
     3ba:	88 ec       	ldi	r24, 0xC8	; 200
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	a0 e0       	ldi	r26, 0x00	; 0
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	80 93 39 01 	sts	0x0139, r24
     3c6:	90 93 3a 01 	sts	0x013A, r25
     3ca:	a0 93 3b 01 	sts	0x013B, r26
     3ce:	b0 93 3c 01 	sts	0x013C, r27
	
	_pid.last_count = 0;
     3d2:	10 92 51 01 	sts	0x0151, r1
     3d6:	10 92 52 01 	sts	0x0152, r1
     3da:	10 92 53 01 	sts	0x0153, r1
     3de:	10 92 54 01 	sts	0x0154, r1
	_pid.last_err = 0;
     3e2:	10 92 45 01 	sts	0x0145, r1
     3e6:	10 92 46 01 	sts	0x0146, r1
     3ea:	10 92 47 01 	sts	0x0147, r1
     3ee:	10 92 48 01 	sts	0x0148, r1
	_pid.ref_value = 0;
     3f2:	10 92 25 01 	sts	0x0125, r1
     3f6:	10 92 26 01 	sts	0x0126, r1
     3fa:	10 92 27 01 	sts	0x0127, r1
     3fe:	10 92 28 01 	sts	0x0128, r1
	_pid.pid_pwm_tick = 0;
     402:	10 92 3d 01 	sts	0x013D, r1
     406:	10 92 3e 01 	sts	0x013E, r1
     40a:	10 92 3f 01 	sts	0x013F, r1
     40e:	10 92 40 01 	sts	0x0140, r1
	_pid.pid_tick_sample = 0;
     412:	10 92 31 01 	sts	0x0131, r1
     416:	10 92 32 01 	sts	0x0132, r1
     41a:	10 92 33 01 	sts	0x0133, r1
     41e:	10 92 34 01 	sts	0x0134, r1
	_pid.mot_dir = CW;
     422:	10 92 18 01 	sts	0x0118, r1

	enable_counter();
     426:	0e 94 cb 00 	call	0x196	; 0x196 <enable_counter>
	enable_h_bridge();
     42a:	0e 94 88 01 	call	0x310	; 0x310 <enable_h_bridge>
{
	uint16_t temp;

	temp = 0;
	temp |= (1 << WGM00 | 1 << WGM01);	/* Fast PWM mode - TOP is OCR0A, auto restart. */
	TCCR0A = temp;
     42e:	83 e0       	ldi	r24, 0x03	; 3
     430:	84 bd       	out	0x24, r24	; 36

	temp = 0;
	temp |= (1 << WGM02);				/* Fast PWM mode - TOP is OCR1A, auto restart. */
	temp |= (0x02 << CS00);				/* CS2:0 = 010 - Prescaler set to 8. */
	TCCR0B = temp;
     432:	8a e0       	ldi	r24, 0x0A	; 10
     434:	85 bd       	out	0x25, r24	; 37

	temp = 0;
	temp |= (1 << TOIE0);
	TIMSK0 = temp;
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	80 93 6e 00 	sts	0x006E, r24

	OCR0A = 100;						/* 100us interrupts */
     43c:	84 e6       	ldi	r24, 0x64	; 100
     43e:	87 bd       	out	0x27, r24	; 39

	sei();
     440:	78 94       	sei
	_pid.mot_dir = CW;

	enable_counter();
	enable_h_bridge();
	init_timer_0();
}
     442:	1f 91       	pop	r17
     444:	0f 91       	pop	r16
     446:	ff 90       	pop	r15
     448:	ef 90       	pop	r14
     44a:	08 95       	ret

0000044c <pid_ref_val>:

void pid_ref_val(long ref_val)
{
	_pid.ref_value = ref_val;
     44c:	60 93 25 01 	sts	0x0125, r22
     450:	70 93 26 01 	sts	0x0126, r23
     454:	80 93 27 01 	sts	0x0127, r24
     458:	90 93 28 01 	sts	0x0128, r25
     45c:	08 95       	ret

0000045e <start_pid_control>:
	pid_flag = PID_OFF;
}

void start_pid_control()
{
	pid_flag = PID_ON;
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	80 93 17 01 	sts	0x0117, r24
     464:	08 95       	ret

00000466 <__vector_16>:
}

ISR(TIMER0_OVF_vect)
{
     466:	1f 92       	push	r1
     468:	0f 92       	push	r0
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	0f 92       	push	r0
     46e:	11 24       	eor	r1, r1
     470:	4f 92       	push	r4
     472:	5f 92       	push	r5
     474:	6f 92       	push	r6
     476:	7f 92       	push	r7
     478:	8f 92       	push	r8
     47a:	9f 92       	push	r9
     47c:	af 92       	push	r10
     47e:	bf 92       	push	r11
     480:	cf 92       	push	r12
     482:	df 92       	push	r13
     484:	ef 92       	push	r14
     486:	ff 92       	push	r15
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	2f 93       	push	r18
     48e:	3f 93       	push	r19
     490:	4f 93       	push	r20
     492:	5f 93       	push	r21
     494:	6f 93       	push	r22
     496:	7f 93       	push	r23
     498:	8f 93       	push	r24
     49a:	9f 93       	push	r25
     49c:	af 93       	push	r26
     49e:	bf 93       	push	r27
     4a0:	ef 93       	push	r30
     4a2:	ff 93       	push	r31
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	2c 97       	sbiw	r28, 0x0c	; 12
     4ae:	de bf       	out	0x3e, r29	; 62
     4b0:	cd bf       	out	0x3d, r28	; 61
	if(pid_flag == PID_ON) {
     4b2:	80 91 17 01 	lds	r24, 0x0117
     4b6:	81 30       	cpi	r24, 0x01	; 1
     4b8:	09 f0       	breq	.+2      	; 0x4bc <__vector_16+0x56>
     4ba:	d5 c1       	rjmp	.+938    	; 0x866 <__vector_16+0x400>
		_pid.pid_tick_sample++;
     4bc:	e1 e3       	ldi	r30, 0x31	; 49
     4be:	f1 e0       	ldi	r31, 0x01	; 1
     4c0:	80 81       	ld	r24, Z
     4c2:	91 81       	ldd	r25, Z+1	; 0x01
     4c4:	a2 81       	ldd	r26, Z+2	; 0x02
     4c6:	b3 81       	ldd	r27, Z+3	; 0x03
     4c8:	01 96       	adiw	r24, 0x01	; 1
     4ca:	a1 1d       	adc	r26, r1
     4cc:	b1 1d       	adc	r27, r1
     4ce:	80 83       	st	Z, r24
     4d0:	91 83       	std	Z+1, r25	; 0x01
     4d2:	a2 83       	std	Z+2, r26	; 0x02
     4d4:	b3 83       	std	Z+3, r27	; 0x03
		if(_pid.pid_tick_sample >= _pid.sample_period) {
     4d6:	40 81       	ld	r20, Z
     4d8:	51 81       	ldd	r21, Z+1	; 0x01
     4da:	62 81       	ldd	r22, Z+2	; 0x02
     4dc:	73 81       	ldd	r23, Z+3	; 0x03
     4de:	80 91 29 01 	lds	r24, 0x0129
     4e2:	90 91 2a 01 	lds	r25, 0x012A
     4e6:	a0 91 2b 01 	lds	r26, 0x012B
     4ea:	b0 91 2c 01 	lds	r27, 0x012C
     4ee:	48 17       	cp	r20, r24
     4f0:	59 07       	cpc	r21, r25
     4f2:	6a 07       	cpc	r22, r26
     4f4:	7b 07       	cpc	r23, r27
     4f6:	0c f4       	brge	.+2      	; 0x4fa <__vector_16+0x94>
     4f8:	64 c1       	rjmp	.+712    	; 0x7c2 <__vector_16+0x35c>
			_pid.pid_tick_sample = 0;
     4fa:	10 92 31 01 	sts	0x0131, r1
     4fe:	10 92 32 01 	sts	0x0132, r1
     502:	10 92 33 01 	sts	0x0133, r1
     506:	10 92 34 01 	sts	0x0134, r1
}

//Gets called in timer 0 interrupt routine.
static void pid()
{
	long count = get_count();
     50a:	0e 94 df 00 	call	0x1be	; 0x1be <get_count>
     50e:	6b 01       	movw	r12, r22
     510:	7c 01       	movw	r14, r24
	long pid_val = 0;
	_pid.err = _pid.ref_value - count;	/* Position difference. */
     512:	80 91 25 01 	lds	r24, 0x0125
     516:	90 91 26 01 	lds	r25, 0x0126
     51a:	a0 91 27 01 	lds	r26, 0x0127
     51e:	b0 91 28 01 	lds	r27, 0x0128
     522:	8c 19       	sub	r24, r12
     524:	9d 09       	sbc	r25, r13
     526:	ae 09       	sbc	r26, r14
     528:	bf 09       	sbc	r27, r15
     52a:	21 e4       	ldi	r18, 0x41	; 65
     52c:	31 e0       	ldi	r19, 0x01	; 1
     52e:	f9 01       	movw	r30, r18
     530:	80 83       	st	Z, r24
     532:	91 83       	std	Z+1, r25	; 0x01
     534:	a2 83       	std	Z+2, r26	; 0x02
     536:	b3 83       	std	Z+3, r27	; 0x03

	_pid.err_sum += _pid.err;					/* Error sum. */
     538:	ed e4       	ldi	r30, 0x4D	; 77
     53a:	f1 e0       	ldi	r31, 0x01	; 1
     53c:	40 81       	ld	r20, Z
     53e:	51 81       	ldd	r21, Z+1	; 0x01
     540:	62 81       	ldd	r22, Z+2	; 0x02
     542:	73 81       	ldd	r23, Z+3	; 0x03
     544:	d9 01       	movw	r26, r18
     546:	8d 90       	ld	r8, X+
     548:	9d 90       	ld	r9, X+
     54a:	ad 90       	ld	r10, X+
     54c:	bc 90       	ld	r11, X
     54e:	d5 01       	movw	r26, r10
     550:	c4 01       	movw	r24, r8
     552:	84 0f       	add	r24, r20
     554:	95 1f       	adc	r25, r21
     556:	a6 1f       	adc	r26, r22
     558:	b7 1f       	adc	r27, r23
     55a:	80 83       	st	Z, r24
     55c:	91 83       	std	Z+1, r25	; 0x01
     55e:	a2 83       	std	Z+2, r26	; 0x02
     560:	b3 83       	std	Z+3, r27	; 0x03
	
	if(_pid.err_sum > 100)
     562:	80 81       	ld	r24, Z
     564:	91 81       	ldd	r25, Z+1	; 0x01
     566:	a2 81       	ldd	r26, Z+2	; 0x02
     568:	b3 81       	ldd	r27, Z+3	; 0x03
     56a:	85 36       	cpi	r24, 0x65	; 101
     56c:	91 05       	cpc	r25, r1
     56e:	a1 05       	cpc	r26, r1
     570:	b1 05       	cpc	r27, r1
     572:	64 f0       	brlt	.+24     	; 0x58c <__vector_16+0x126>
		_pid.err_sum = 100;	/* Anti wind-up */
     574:	84 e6       	ldi	r24, 0x64	; 100
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	a0 e0       	ldi	r26, 0x00	; 0
     57a:	b0 e0       	ldi	r27, 0x00	; 0
     57c:	80 93 4d 01 	sts	0x014D, r24
     580:	90 93 4e 01 	sts	0x014E, r25
     584:	a0 93 4f 01 	sts	0x014F, r26
     588:	b0 93 50 01 	sts	0x0150, r27

	_pid.err_diff = (long)((_pid.err - _pid.last_err)*_pid.sample_peiod_opt);	/* 1st order error differential. */
     58c:	0f 2e       	mov	r0, r31
     58e:	f1 e4       	ldi	r31, 0x41	; 65
     590:	6f 2e       	mov	r6, r31
     592:	f1 e0       	ldi	r31, 0x01	; 1
     594:	7f 2e       	mov	r7, r31
     596:	f0 2d       	mov	r31, r0
     598:	f3 01       	movw	r30, r6
     59a:	40 81       	ld	r20, Z
     59c:	51 81       	ldd	r21, Z+1	; 0x01
     59e:	62 81       	ldd	r22, Z+2	; 0x02
     5a0:	73 81       	ldd	r23, Z+3	; 0x03
     5a2:	80 91 45 01 	lds	r24, 0x0145
     5a6:	90 91 46 01 	lds	r25, 0x0146
     5aa:	a0 91 47 01 	lds	r26, 0x0147
     5ae:	b0 91 48 01 	lds	r27, 0x0148
     5b2:	80 90 2d 01 	lds	r8, 0x012D
     5b6:	90 90 2e 01 	lds	r9, 0x012E
     5ba:	a0 90 2f 01 	lds	r10, 0x012F
     5be:	b0 90 30 01 	lds	r11, 0x0130
     5c2:	8a 01       	movw	r16, r20
     5c4:	9b 01       	movw	r18, r22
     5c6:	08 1b       	sub	r16, r24
     5c8:	19 0b       	sbc	r17, r25
     5ca:	2a 0b       	sbc	r18, r26
     5cc:	3b 0b       	sbc	r19, r27
     5ce:	c9 01       	movw	r24, r18
     5d0:	b8 01       	movw	r22, r16
     5d2:	0e 94 97 06 	call	0xd2e	; 0xd2e <__floatsisf>
     5d6:	a5 01       	movw	r20, r10
     5d8:	94 01       	movw	r18, r8
     5da:	0e 94 23 07 	call	0xe46	; 0xe46 <__mulsf3>
     5de:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__fixsfsi>
     5e2:	e9 e4       	ldi	r30, 0x49	; 73
     5e4:	f1 e0       	ldi	r31, 0x01	; 1
     5e6:	60 83       	st	Z, r22
     5e8:	71 83       	std	Z+1, r23	; 0x01
     5ea:	82 83       	std	Z+2, r24	; 0x02
     5ec:	93 83       	std	Z+3, r25	; 0x03

	/* PID output */
	pid_val = _pid.kp*_pid.err + _pid.ki*_pid.err_sum + _pid.kd*_pid.err_diff;
     5ee:	80 90 19 01 	lds	r8, 0x0119
     5f2:	90 90 1a 01 	lds	r9, 0x011A
     5f6:	a0 90 1b 01 	lds	r10, 0x011B
     5fa:	b0 90 1c 01 	lds	r11, 0x011C
     5fe:	d3 01       	movw	r26, r6
     600:	6d 91       	ld	r22, X+
     602:	7d 91       	ld	r23, X+
     604:	8d 91       	ld	r24, X+
     606:	9c 91       	ld	r25, X
     608:	00 91 1d 01 	lds	r16, 0x011D
     60c:	10 91 1e 01 	lds	r17, 0x011E
     610:	20 91 1f 01 	lds	r18, 0x011F
     614:	30 91 20 01 	lds	r19, 0x0120
     618:	09 83       	std	Y+1, r16	; 0x01
     61a:	1a 83       	std	Y+2, r17	; 0x02
     61c:	2b 83       	std	Y+3, r18	; 0x03
     61e:	3c 83       	std	Y+4, r19	; 0x04
     620:	40 90 4d 01 	lds	r4, 0x014D
     624:	50 90 4e 01 	lds	r5, 0x014E
     628:	60 90 4f 01 	lds	r6, 0x014F
     62c:	70 90 50 01 	lds	r7, 0x0150
     630:	20 91 21 01 	lds	r18, 0x0121
     634:	30 91 22 01 	lds	r19, 0x0122
     638:	40 91 23 01 	lds	r20, 0x0123
     63c:	50 91 24 01 	lds	r21, 0x0124
     640:	2d 83       	std	Y+5, r18	; 0x05
     642:	3e 83       	std	Y+6, r19	; 0x06
     644:	4f 83       	std	Y+7, r20	; 0x07
     646:	58 87       	std	Y+8, r21	; 0x08
     648:	00 81       	ld	r16, Z
     64a:	11 81       	ldd	r17, Z+1	; 0x01
     64c:	22 81       	ldd	r18, Z+2	; 0x02
     64e:	33 81       	ldd	r19, Z+3	; 0x03
     650:	09 87       	std	Y+9, r16	; 0x09
     652:	1a 87       	std	Y+10, r17	; 0x0a
     654:	2b 87       	std	Y+11, r18	; 0x0b
     656:	3c 87       	std	Y+12, r19	; 0x0c
     658:	0e 94 97 06 	call	0xd2e	; 0xd2e <__floatsisf>
     65c:	9b 01       	movw	r18, r22
     65e:	ac 01       	movw	r20, r24
     660:	c5 01       	movw	r24, r10
     662:	b4 01       	movw	r22, r8
     664:	0e 94 23 07 	call	0xe46	; 0xe46 <__mulsf3>
     668:	4b 01       	movw	r8, r22
     66a:	5c 01       	movw	r10, r24
     66c:	c3 01       	movw	r24, r6
     66e:	b2 01       	movw	r22, r4
     670:	0e 94 97 06 	call	0xd2e	; 0xd2e <__floatsisf>
     674:	9b 01       	movw	r18, r22
     676:	ac 01       	movw	r20, r24
     678:	69 81       	ldd	r22, Y+1	; 0x01
     67a:	7a 81       	ldd	r23, Y+2	; 0x02
     67c:	8b 81       	ldd	r24, Y+3	; 0x03
     67e:	9c 81       	ldd	r25, Y+4	; 0x04
     680:	0e 94 23 07 	call	0xe46	; 0xe46 <__mulsf3>
     684:	9b 01       	movw	r18, r22
     686:	ac 01       	movw	r20, r24
     688:	c5 01       	movw	r24, r10
     68a:	b4 01       	movw	r22, r8
     68c:	0e 94 00 06 	call	0xc00	; 0xc00 <__addsf3>
     690:	4b 01       	movw	r8, r22
     692:	5c 01       	movw	r10, r24
     694:	69 85       	ldd	r22, Y+9	; 0x09
     696:	7a 85       	ldd	r23, Y+10	; 0x0a
     698:	8b 85       	ldd	r24, Y+11	; 0x0b
     69a:	9c 85       	ldd	r25, Y+12	; 0x0c
     69c:	0e 94 97 06 	call	0xd2e	; 0xd2e <__floatsisf>
     6a0:	9b 01       	movw	r18, r22
     6a2:	ac 01       	movw	r20, r24
     6a4:	6d 81       	ldd	r22, Y+5	; 0x05
     6a6:	7e 81       	ldd	r23, Y+6	; 0x06
     6a8:	8f 81       	ldd	r24, Y+7	; 0x07
     6aa:	98 85       	ldd	r25, Y+8	; 0x08
     6ac:	0e 94 23 07 	call	0xe46	; 0xe46 <__mulsf3>
     6b0:	9b 01       	movw	r18, r22
     6b2:	ac 01       	movw	r20, r24
     6b4:	c5 01       	movw	r24, r10
     6b6:	b4 01       	movw	r22, r8
     6b8:	0e 94 00 06 	call	0xc00	; 0xc00 <__addsf3>
     6bc:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__fixsfsi>
	
	if(pid_val > 0) {
     6c0:	16 16       	cp	r1, r22
     6c2:	17 06       	cpc	r1, r23
     6c4:	18 06       	cpc	r1, r24
     6c6:	19 06       	cpc	r1, r25
     6c8:	6c f5       	brge	.+90     	; 0x724 <__vector_16+0x2be>
		_pid.mot_dir = CW;
     6ca:	10 92 18 01 	sts	0x0118, r1
		if(pid_val > _pid.pwm_period)
     6ce:	80 90 39 01 	lds	r8, 0x0139
     6d2:	90 90 3a 01 	lds	r9, 0x013A
     6d6:	a0 90 3b 01 	lds	r10, 0x013B
     6da:	b0 90 3c 01 	lds	r11, 0x013C
     6de:	86 16       	cp	r8, r22
     6e0:	97 06       	cpc	r9, r23
     6e2:	a8 06       	cpc	r10, r24
     6e4:	b9 06       	cpc	r11, r25
     6e6:	8c f4       	brge	.+34     	; 0x70a <__vector_16+0x2a4>
			_pid.pwm_top_val = _pid.pwm_period;
     6e8:	80 91 39 01 	lds	r24, 0x0139
     6ec:	90 91 3a 01 	lds	r25, 0x013A
     6f0:	a0 91 3b 01 	lds	r26, 0x013B
     6f4:	b0 91 3c 01 	lds	r27, 0x013C
     6f8:	80 93 35 01 	sts	0x0135, r24
     6fc:	90 93 36 01 	sts	0x0136, r25
     700:	a0 93 37 01 	sts	0x0137, r26
     704:	b0 93 38 01 	sts	0x0138, r27
     708:	44 c0       	rjmp	.+136    	; 0x792 <__vector_16+0x32c>
		else
			_pid.pwm_top_val = (uint16_t)(pid_val);
     70a:	dc 01       	movw	r26, r24
     70c:	cb 01       	movw	r24, r22
     70e:	aa 27       	eor	r26, r26
     710:	bb 27       	eor	r27, r27
     712:	80 93 35 01 	sts	0x0135, r24
     716:	90 93 36 01 	sts	0x0136, r25
     71a:	a0 93 37 01 	sts	0x0137, r26
     71e:	b0 93 38 01 	sts	0x0138, r27
     722:	37 c0       	rjmp	.+110    	; 0x792 <__vector_16+0x32c>
	} else {
		_pid.mot_dir = CCW;
     724:	21 e0       	ldi	r18, 0x01	; 1
     726:	20 93 18 01 	sts	0x0118, r18
		if(pid_val < -_pid.pwm_period)
     72a:	80 90 39 01 	lds	r8, 0x0139
     72e:	90 90 3a 01 	lds	r9, 0x013A
     732:	a0 90 3b 01 	lds	r10, 0x013B
     736:	b0 90 3c 01 	lds	r11, 0x013C
     73a:	b0 94       	com	r11
     73c:	a0 94       	com	r10
     73e:	90 94       	com	r9
     740:	80 94       	com	r8
     742:	81 1c       	adc	r8, r1
     744:	91 1c       	adc	r9, r1
     746:	a1 1c       	adc	r10, r1
     748:	b1 1c       	adc	r11, r1
     74a:	68 15       	cp	r22, r8
     74c:	79 05       	cpc	r23, r9
     74e:	8a 05       	cpc	r24, r10
     750:	9b 05       	cpc	r25, r11
     752:	8c f4       	brge	.+34     	; 0x776 <__vector_16+0x310>
			_pid.pwm_top_val = _pid.pwm_period;
     754:	80 91 39 01 	lds	r24, 0x0139
     758:	90 91 3a 01 	lds	r25, 0x013A
     75c:	a0 91 3b 01 	lds	r26, 0x013B
     760:	b0 91 3c 01 	lds	r27, 0x013C
     764:	80 93 35 01 	sts	0x0135, r24
     768:	90 93 36 01 	sts	0x0136, r25
     76c:	a0 93 37 01 	sts	0x0137, r26
     770:	b0 93 38 01 	sts	0x0138, r27
     774:	0e c0       	rjmp	.+28     	; 0x792 <__vector_16+0x32c>
		else
			_pid.pwm_top_val = (uint16_t)(-pid_val);
     776:	71 95       	neg	r23
     778:	61 95       	neg	r22
     77a:	71 09       	sbc	r23, r1
     77c:	cb 01       	movw	r24, r22
     77e:	a0 e0       	ldi	r26, 0x00	; 0
     780:	b0 e0       	ldi	r27, 0x00	; 0
     782:	80 93 35 01 	sts	0x0135, r24
     786:	90 93 36 01 	sts	0x0136, r25
     78a:	a0 93 37 01 	sts	0x0137, r26
     78e:	b0 93 38 01 	sts	0x0138, r27
	}
		

	/* Memorize last values. */
	_pid.last_count = count;
     792:	c0 92 51 01 	sts	0x0151, r12
     796:	d0 92 52 01 	sts	0x0152, r13
     79a:	e0 92 53 01 	sts	0x0153, r14
     79e:	f0 92 54 01 	sts	0x0154, r15
	_pid.last_err = _pid.err;
     7a2:	80 91 41 01 	lds	r24, 0x0141
     7a6:	90 91 42 01 	lds	r25, 0x0142
     7aa:	a0 91 43 01 	lds	r26, 0x0143
     7ae:	b0 91 44 01 	lds	r27, 0x0144
     7b2:	80 93 45 01 	sts	0x0145, r24
     7b6:	90 93 46 01 	sts	0x0146, r25
     7ba:	a0 93 47 01 	sts	0x0147, r26
     7be:	b0 93 48 01 	sts	0x0148, r27
		if(_pid.pid_tick_sample >= _pid.sample_period) {
			_pid.pid_tick_sample = 0;
			pid();
		}

		_pid.pid_pwm_tick++;
     7c2:	ed e3       	ldi	r30, 0x3D	; 61
     7c4:	f1 e0       	ldi	r31, 0x01	; 1
     7c6:	80 81       	ld	r24, Z
     7c8:	91 81       	ldd	r25, Z+1	; 0x01
     7ca:	a2 81       	ldd	r26, Z+2	; 0x02
     7cc:	b3 81       	ldd	r27, Z+3	; 0x03
     7ce:	01 96       	adiw	r24, 0x01	; 1
     7d0:	a1 1d       	adc	r26, r1
     7d2:	b1 1d       	adc	r27, r1
     7d4:	80 83       	st	Z, r24
     7d6:	91 83       	std	Z+1, r25	; 0x01
     7d8:	a2 83       	std	Z+2, r26	; 0x02
     7da:	b3 83       	std	Z+3, r27	; 0x03
		if(_pid.pid_pwm_tick >= _pid.pwm_period && _pid.pwm_top_val > 0) {
     7dc:	40 81       	ld	r20, Z
     7de:	51 81       	ldd	r21, Z+1	; 0x01
     7e0:	62 81       	ldd	r22, Z+2	; 0x02
     7e2:	73 81       	ldd	r23, Z+3	; 0x03
     7e4:	80 91 39 01 	lds	r24, 0x0139
     7e8:	90 91 3a 01 	lds	r25, 0x013A
     7ec:	a0 91 3b 01 	lds	r26, 0x013B
     7f0:	b0 91 3c 01 	lds	r27, 0x013C
     7f4:	48 17       	cp	r20, r24
     7f6:	59 07       	cpc	r21, r25
     7f8:	6a 07       	cpc	r22, r26
     7fa:	7b 07       	cpc	r23, r27
     7fc:	ec f0       	brlt	.+58     	; 0x838 <__vector_16+0x3d2>
     7fe:	80 91 35 01 	lds	r24, 0x0135
     802:	90 91 36 01 	lds	r25, 0x0136
     806:	a0 91 37 01 	lds	r26, 0x0137
     80a:	b0 91 38 01 	lds	r27, 0x0138
     80e:	18 16       	cp	r1, r24
     810:	19 06       	cpc	r1, r25
     812:	1a 06       	cpc	r1, r26
     814:	1b 06       	cpc	r1, r27
     816:	84 f4       	brge	.+32     	; 0x838 <__vector_16+0x3d2>
			_pid.pid_pwm_tick = 0;
     818:	10 92 3d 01 	sts	0x013D, r1
     81c:	10 92 3e 01 	sts	0x013E, r1
     820:	10 92 3f 01 	sts	0x013F, r1
     824:	10 92 40 01 	sts	0x0140, r1
			if(_pid.mot_dir == CW)
     828:	80 91 18 01 	lds	r24, 0x0118
     82c:	81 11       	cpse	r24, r1
     82e:	02 c0       	rjmp	.+4      	; 0x834 <__vector_16+0x3ce>
				MOT_PORT |= (1 << MOT_PIN0);
     830:	29 9a       	sbi	0x05, 1	; 5
     832:	19 c0       	rjmp	.+50     	; 0x866 <__vector_16+0x400>
			else 
				MOT_PORT |= (1 << MOT_PIN1);	
     834:	2a 9a       	sbi	0x05, 2	; 5
     836:	17 c0       	rjmp	.+46     	; 0x866 <__vector_16+0x400>
		} else if (_pid.pid_pwm_tick >= _pid.pwm_top_val) {
     838:	40 91 3d 01 	lds	r20, 0x013D
     83c:	50 91 3e 01 	lds	r21, 0x013E
     840:	60 91 3f 01 	lds	r22, 0x013F
     844:	70 91 40 01 	lds	r23, 0x0140
     848:	80 91 35 01 	lds	r24, 0x0135
     84c:	90 91 36 01 	lds	r25, 0x0136
     850:	a0 91 37 01 	lds	r26, 0x0137
     854:	b0 91 38 01 	lds	r27, 0x0138
     858:	48 17       	cp	r20, r24
     85a:	59 07       	cpc	r21, r25
     85c:	6a 07       	cpc	r22, r26
     85e:	7b 07       	cpc	r23, r27
     860:	14 f0       	brlt	.+4      	; 0x866 <__vector_16+0x400>
			MOT_PORT &= ~(1 << MOT_PIN0);
     862:	29 98       	cbi	0x05, 1	; 5
			MOT_PORT &= ~(1 << MOT_PIN1);
     864:	2a 98       	cbi	0x05, 2	; 5
		}
	}
}
     866:	2c 96       	adiw	r28, 0x0c	; 12
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	cd bf       	out	0x3d, r28	; 61
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	ff 91       	pop	r31
     878:	ef 91       	pop	r30
     87a:	bf 91       	pop	r27
     87c:	af 91       	pop	r26
     87e:	9f 91       	pop	r25
     880:	8f 91       	pop	r24
     882:	7f 91       	pop	r23
     884:	6f 91       	pop	r22
     886:	5f 91       	pop	r21
     888:	4f 91       	pop	r20
     88a:	3f 91       	pop	r19
     88c:	2f 91       	pop	r18
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15
     894:	ef 90       	pop	r14
     896:	df 90       	pop	r13
     898:	cf 90       	pop	r12
     89a:	bf 90       	pop	r11
     89c:	af 90       	pop	r10
     89e:	9f 90       	pop	r9
     8a0:	8f 90       	pop	r8
     8a2:	7f 90       	pop	r7
     8a4:	6f 90       	pop	r6
     8a6:	5f 90       	pop	r5
     8a8:	4f 90       	pop	r4
     8aa:	0f 90       	pop	r0
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	0f 90       	pop	r0
     8b0:	1f 90       	pop	r1
     8b2:	18 95       	reti

000008b4 <init_timer_1>:
{
	uint16_t temp;

	temp = 0;
	temp |= (1 << WGM10 | 1 << WGM11);	/* Fast PWM mode - TOP is OCR1A, auto restart. */
	TCCR1A = temp;
     8b4:	93 e0       	ldi	r25, 0x03	; 3
     8b6:	90 93 80 00 	sts	0x0080, r25

	temp = 0;
	temp |= (1 << WGM12 | 1 << WGM13);	/* Fast PWM mode - TOP is OCR1A, auto restart. */
	temp |= (prescaler << CS10);		/* CS2:0 = 010 - Prescaler set to 8. */
     8ba:	88 61       	ori	r24, 0x18	; 24
	TCCR1B = temp;
     8bc:	80 93 81 00 	sts	0x0081, r24

	temp = 0;
	temp |= (1 << TOIE0);
	TIMSK1 = temp;
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	80 93 6f 00 	sts	0x006F, r24

	OCR1A = topw_val;
     8c6:	70 93 89 00 	sts	0x0089, r23
     8ca:	60 93 88 00 	sts	0x0088, r22

	sei();
     8ce:	78 94       	sei
     8d0:	08 95       	ret

000008d2 <pause_loop>:
	}
}

void pause_loop(uint16_t pause)
{
	pause_time = pause;
     8d2:	a0 e0       	ldi	r26, 0x00	; 0
     8d4:	b0 e0       	ldi	r27, 0x00	; 0
     8d6:	80 93 56 01 	sts	0x0156, r24
     8da:	90 93 57 01 	sts	0x0157, r25
     8de:	a0 93 58 01 	sts	0x0158, r26
     8e2:	b0 93 59 01 	sts	0x0159, r27
	while(pause_time);
     8e6:	80 91 56 01 	lds	r24, 0x0156
     8ea:	90 91 57 01 	lds	r25, 0x0157
     8ee:	a0 91 58 01 	lds	r26, 0x0158
     8f2:	b0 91 59 01 	lds	r27, 0x0159
     8f6:	89 2b       	or	r24, r25
     8f8:	8a 2b       	or	r24, r26
     8fa:	8b 2b       	or	r24, r27
     8fc:	a1 f7       	brne	.-24     	; 0x8e6 <pause_loop+0x14>
}
     8fe:	08 95       	ret

00000900 <__vector_13>:
		break;
	}
}

ISR(TIMER1_OVF_vect)
{
     900:	1f 92       	push	r1
     902:	0f 92       	push	r0
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	0f 92       	push	r0
     908:	11 24       	eor	r1, r1
     90a:	2f 93       	push	r18
     90c:	3f 93       	push	r19
     90e:	4f 93       	push	r20
     910:	5f 93       	push	r21
     912:	6f 93       	push	r22
     914:	7f 93       	push	r23
     916:	8f 93       	push	r24
     918:	9f 93       	push	r25
     91a:	af 93       	push	r26
     91c:	bf 93       	push	r27
     91e:	ef 93       	push	r30
     920:	ff 93       	push	r31
	if(pwm_flag == PWM_ON) {
     922:	80 91 55 01 	lds	r24, 0x0155
     926:	81 30       	cpi	r24, 0x01	; 1
     928:	09 f0       	breq	.+2      	; 0x92c <__vector_13+0x2c>
     92a:	58 c0       	rjmp	.+176    	; 0x9dc <__vector_13+0xdc>
		my_pwm.pwm_tick++;
     92c:	e1 e7       	ldi	r30, 0x71	; 113
     92e:	f1 e0       	ldi	r31, 0x01	; 1
     930:	80 81       	ld	r24, Z
     932:	91 81       	ldd	r25, Z+1	; 0x01
     934:	a2 81       	ldd	r26, Z+2	; 0x02
     936:	b3 81       	ldd	r27, Z+3	; 0x03
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	a1 1d       	adc	r26, r1
     93c:	b1 1d       	adc	r27, r1
     93e:	80 83       	st	Z, r24
     940:	91 83       	std	Z+1, r25	; 0x01
     942:	a2 83       	std	Z+2, r26	; 0x02
     944:	b3 83       	std	Z+3, r27	; 0x03
		if(my_pwm.pwm_tick >= my_pwm.period && my_pwm.top_val > 0) {
     946:	40 81       	ld	r20, Z
     948:	51 81       	ldd	r21, Z+1	; 0x01
     94a:	62 81       	ldd	r22, Z+2	; 0x02
     94c:	73 81       	ldd	r23, Z+3	; 0x03
     94e:	80 91 69 01 	lds	r24, 0x0169
     952:	90 91 6a 01 	lds	r25, 0x016A
     956:	a0 91 6b 01 	lds	r26, 0x016B
     95a:	b0 91 6c 01 	lds	r27, 0x016C
     95e:	48 17       	cp	r20, r24
     960:	59 07       	cpc	r21, r25
     962:	6a 07       	cpc	r22, r26
     964:	7b 07       	cpc	r23, r27
     966:	e8 f0       	brcs	.+58     	; 0x9a2 <__vector_13+0xa2>
     968:	80 91 6d 01 	lds	r24, 0x016D
     96c:	90 91 6e 01 	lds	r25, 0x016E
     970:	a0 91 6f 01 	lds	r26, 0x016F
     974:	b0 91 70 01 	lds	r27, 0x0170
     978:	89 2b       	or	r24, r25
     97a:	8a 2b       	or	r24, r26
     97c:	8b 2b       	or	r24, r27
     97e:	89 f0       	breq	.+34     	; 0x9a2 <__vector_13+0xa2>
			set_pin(my_pwm.port, my_pwm.pin);
     980:	60 91 68 01 	lds	r22, 0x0168
     984:	80 91 66 01 	lds	r24, 0x0166
     988:	90 91 67 01 	lds	r25, 0x0167
     98c:	0e 94 46 01 	call	0x28c	; 0x28c <set_pin>
			my_pwm.pwm_tick = 0;
     990:	10 92 71 01 	sts	0x0171, r1
     994:	10 92 72 01 	sts	0x0172, r1
     998:	10 92 73 01 	sts	0x0173, r1
     99c:	10 92 74 01 	sts	0x0174, r1
     9a0:	1d c0       	rjmp	.+58     	; 0x9dc <__vector_13+0xdc>
		} else if(my_pwm.pwm_tick >= my_pwm.top_val) {
     9a2:	40 91 71 01 	lds	r20, 0x0171
     9a6:	50 91 72 01 	lds	r21, 0x0172
     9aa:	60 91 73 01 	lds	r22, 0x0173
     9ae:	70 91 74 01 	lds	r23, 0x0174
     9b2:	80 91 6d 01 	lds	r24, 0x016D
     9b6:	90 91 6e 01 	lds	r25, 0x016E
     9ba:	a0 91 6f 01 	lds	r26, 0x016F
     9be:	b0 91 70 01 	lds	r27, 0x0170
     9c2:	48 17       	cp	r20, r24
     9c4:	59 07       	cpc	r21, r25
     9c6:	6a 07       	cpc	r22, r26
     9c8:	7b 07       	cpc	r23, r27
     9ca:	40 f0       	brcs	.+16     	; 0x9dc <__vector_13+0xdc>
			clear_pin(my_pwm.port, my_pwm.pin);
     9cc:	60 91 68 01 	lds	r22, 0x0168
     9d0:	80 91 66 01 	lds	r24, 0x0166
     9d4:	90 91 67 01 	lds	r25, 0x0167
     9d8:	0e 94 55 01 	call	0x2aa	; 0x2aa <clear_pin>
		}
	}

	if(timer_node_0 > 0) timer_node_0--;
     9dc:	80 91 62 01 	lds	r24, 0x0162
     9e0:	90 91 63 01 	lds	r25, 0x0163
     9e4:	a0 91 64 01 	lds	r26, 0x0164
     9e8:	b0 91 65 01 	lds	r27, 0x0165
     9ec:	89 2b       	or	r24, r25
     9ee:	8a 2b       	or	r24, r26
     9f0:	8b 2b       	or	r24, r27
     9f2:	99 f0       	breq	.+38     	; 0xa1a <__vector_13+0x11a>
     9f4:	80 91 62 01 	lds	r24, 0x0162
     9f8:	90 91 63 01 	lds	r25, 0x0163
     9fc:	a0 91 64 01 	lds	r26, 0x0164
     a00:	b0 91 65 01 	lds	r27, 0x0165
     a04:	01 97       	sbiw	r24, 0x01	; 1
     a06:	a1 09       	sbc	r26, r1
     a08:	b1 09       	sbc	r27, r1
     a0a:	80 93 62 01 	sts	0x0162, r24
     a0e:	90 93 63 01 	sts	0x0163, r25
     a12:	a0 93 64 01 	sts	0x0164, r26
     a16:	b0 93 65 01 	sts	0x0165, r27
	if(timer_node_1 > 0) timer_node_1--;
     a1a:	80 91 5e 01 	lds	r24, 0x015E
     a1e:	90 91 5f 01 	lds	r25, 0x015F
     a22:	a0 91 60 01 	lds	r26, 0x0160
     a26:	b0 91 61 01 	lds	r27, 0x0161
     a2a:	89 2b       	or	r24, r25
     a2c:	8a 2b       	or	r24, r26
     a2e:	8b 2b       	or	r24, r27
     a30:	99 f0       	breq	.+38     	; 0xa58 <__vector_13+0x158>
     a32:	80 91 5e 01 	lds	r24, 0x015E
     a36:	90 91 5f 01 	lds	r25, 0x015F
     a3a:	a0 91 60 01 	lds	r26, 0x0160
     a3e:	b0 91 61 01 	lds	r27, 0x0161
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	a1 09       	sbc	r26, r1
     a46:	b1 09       	sbc	r27, r1
     a48:	80 93 5e 01 	sts	0x015E, r24
     a4c:	90 93 5f 01 	sts	0x015F, r25
     a50:	a0 93 60 01 	sts	0x0160, r26
     a54:	b0 93 61 01 	sts	0x0161, r27
	if(timer_node_2 > 0) timer_node_2--;
     a58:	80 91 5a 01 	lds	r24, 0x015A
     a5c:	90 91 5b 01 	lds	r25, 0x015B
     a60:	a0 91 5c 01 	lds	r26, 0x015C
     a64:	b0 91 5d 01 	lds	r27, 0x015D
     a68:	89 2b       	or	r24, r25
     a6a:	8a 2b       	or	r24, r26
     a6c:	8b 2b       	or	r24, r27
     a6e:	99 f0       	breq	.+38     	; 0xa96 <__vector_13+0x196>
     a70:	80 91 5a 01 	lds	r24, 0x015A
     a74:	90 91 5b 01 	lds	r25, 0x015B
     a78:	a0 91 5c 01 	lds	r26, 0x015C
     a7c:	b0 91 5d 01 	lds	r27, 0x015D
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	a1 09       	sbc	r26, r1
     a84:	b1 09       	sbc	r27, r1
     a86:	80 93 5a 01 	sts	0x015A, r24
     a8a:	90 93 5b 01 	sts	0x015B, r25
     a8e:	a0 93 5c 01 	sts	0x015C, r26
     a92:	b0 93 5d 01 	sts	0x015D, r27
	if(pause_time > 0) pause_time--;
     a96:	80 91 56 01 	lds	r24, 0x0156
     a9a:	90 91 57 01 	lds	r25, 0x0157
     a9e:	a0 91 58 01 	lds	r26, 0x0158
     aa2:	b0 91 59 01 	lds	r27, 0x0159
     aa6:	89 2b       	or	r24, r25
     aa8:	8a 2b       	or	r24, r26
     aaa:	8b 2b       	or	r24, r27
     aac:	99 f0       	breq	.+38     	; 0xad4 <__vector_13+0x1d4>
     aae:	80 91 56 01 	lds	r24, 0x0156
     ab2:	90 91 57 01 	lds	r25, 0x0157
     ab6:	a0 91 58 01 	lds	r26, 0x0158
     aba:	b0 91 59 01 	lds	r27, 0x0159
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	a1 09       	sbc	r26, r1
     ac2:	b1 09       	sbc	r27, r1
     ac4:	80 93 56 01 	sts	0x0156, r24
     ac8:	90 93 57 01 	sts	0x0157, r25
     acc:	a0 93 58 01 	sts	0x0158, r26
     ad0:	b0 93 59 01 	sts	0x0159, r27
}
     ad4:	ff 91       	pop	r31
     ad6:	ef 91       	pop	r30
     ad8:	bf 91       	pop	r27
     ada:	af 91       	pop	r26
     adc:	9f 91       	pop	r25
     ade:	8f 91       	pop	r24
     ae0:	7f 91       	pop	r23
     ae2:	6f 91       	pop	r22
     ae4:	5f 91       	pop	r21
     ae6:	4f 91       	pop	r20
     ae8:	3f 91       	pop	r19
     aea:	2f 91       	pop	r18
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	0f 90       	pop	r0
     af2:	1f 90       	pop	r1
     af4:	18 95       	reti

00000af6 <init_uart>:
static volatile char uart0_received;
static volatile uint8_t uart0_index;

void init_uart(uint8_t baud)
{
	uart0_sent = 0;
     af6:	10 92 77 01 	sts	0x0177, r1
	uart0_received = 0;
     afa:	10 92 76 01 	sts	0x0176, r1
	uart0_index = 0;
     afe:	10 92 75 01 	sts	0x0175, r1
	uart0_buff[uart0_index] = '\0';
     b02:	e0 91 75 01 	lds	r30, 0x0175
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	e8 58       	subi	r30, 0x88	; 136
     b0a:	fe 4f       	sbci	r31, 0xFE	; 254
     b0c:	10 82       	st	Z, r1
	UCSR0B |= (1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0);
     b0e:	e1 ec       	ldi	r30, 0xC1	; 193
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	90 81       	ld	r25, Z
     b14:	98 69       	ori	r25, 0x98	; 152
     b16:	90 83       	st	Z, r25
	UCSR0C |= (1 << UCSZ00 | 1 << UCSZ00);
     b18:	e2 ec       	ldi	r30, 0xC2	; 194
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	90 81       	ld	r25, Z
     b1e:	92 60       	ori	r25, 0x02	; 2
     b20:	90 83       	st	Z, r25
	UBRR0 = baud;
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	90 93 c5 00 	sts	0x00C5, r25
     b28:	80 93 c4 00 	sts	0x00C4, r24
	
	sei();
     b2c:	78 94       	sei
     b2e:	08 95       	ret

00000b30 <send_char>:
}

void send_char(char c)
{
	uart0_sent = 0;
     b30:	10 92 77 01 	sts	0x0177, r1
	UDR0 = c;
     b34:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UCSR0A & (1 << UDRE0)));
     b38:	e0 ec       	ldi	r30, 0xC0	; 192
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	80 81       	ld	r24, Z
     b3e:	85 ff       	sbrs	r24, 5
     b40:	fd cf       	rjmp	.-6      	; 0xb3c <send_char+0xc>
}
     b42:	08 95       	ret

00000b44 <send_string>:

void send_string(char *str)
{
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	ec 01       	movw	r28, r24
	while (*str != '\0') {
     b4a:	88 81       	ld	r24, Y
     b4c:	88 23       	and	r24, r24
     b4e:	31 f0       	breq	.+12     	; 0xb5c <send_string+0x18>
     b50:	21 96       	adiw	r28, 0x01	; 1
		send_char(*str);
     b52:	0e 94 98 05 	call	0xb30	; 0xb30 <send_char>
	while (!(UCSR0A & (1 << UDRE0)));
}

void send_string(char *str)
{
	while (*str != '\0') {
     b56:	89 91       	ld	r24, Y+
     b58:	81 11       	cpse	r24, r1
     b5a:	fb cf       	rjmp	.-10     	; 0xb52 <send_string+0xe>
		send_char(*str);
		str++;
	}
}
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <clear_buffer>:
	*dest = '\0';
}

void clear_buffer()
{
	uart0_index = 0;
     b62:	10 92 75 01 	sts	0x0175, r1
	uart0_buff[uart0_index] = '\0';
     b66:	e0 91 75 01 	lds	r30, 0x0175
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	e8 58       	subi	r30, 0x88	; 136
     b6e:	fe 4f       	sbci	r31, 0xFE	; 254
     b70:	10 82       	st	Z, r1
     b72:	08 95       	ret

00000b74 <__vector_18>:
//{
//	uart0_sent = 1;
//}

ISR(USART_RX_vect)
{
     b74:	1f 92       	push	r1
     b76:	0f 92       	push	r0
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	0f 92       	push	r0
     b7c:	11 24       	eor	r1, r1
     b7e:	2f 93       	push	r18
     b80:	3f 93       	push	r19
     b82:	4f 93       	push	r20
     b84:	5f 93       	push	r21
     b86:	6f 93       	push	r22
     b88:	7f 93       	push	r23
     b8a:	8f 93       	push	r24
     b8c:	9f 93       	push	r25
     b8e:	af 93       	push	r26
     b90:	bf 93       	push	r27
     b92:	ef 93       	push	r30
     b94:	ff 93       	push	r31
	char temp;

	temp = UDR0;
     b96:	80 91 c6 00 	lds	r24, 0x00C6
	if (uart0_index < (UART0_SIZE - 2)) {
     b9a:	90 91 75 01 	lds	r25, 0x0175
     b9e:	9d 3f       	cpi	r25, 0xFD	; 253
     ba0:	d8 f4       	brcc	.+54     	; 0xbd8 <__vector_18+0x64>
		/* There is room for more characters. */
		uart0_buff[uart0_index] = temp;
     ba2:	e0 91 75 01 	lds	r30, 0x0175
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	e8 58       	subi	r30, 0x88	; 136
     baa:	fe 4f       	sbci	r31, 0xFE	; 254
     bac:	80 83       	st	Z, r24
		uart0_buff[uart0_index + 1] = '\0';
     bae:	e0 91 75 01 	lds	r30, 0x0175
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	e7 58       	subi	r30, 0x87	; 135
     bb6:	fe 4f       	sbci	r31, 0xFE	; 254
     bb8:	10 82       	st	Z, r1
		uart0_index++;
     bba:	90 91 75 01 	lds	r25, 0x0175
     bbe:	9f 5f       	subi	r25, 0xFF	; 255
     bc0:	90 93 75 01 	sts	0x0175, r25
		if (temp == '\0' || temp == '\n' || temp == '\r') {
     bc4:	88 23       	and	r24, r24
     bc6:	21 f0       	breq	.+8      	; 0xbd0 <__vector_18+0x5c>
     bc8:	8a 30       	cpi	r24, 0x0A	; 10
     bca:	11 f0       	breq	.+4      	; 0xbd0 <__vector_18+0x5c>
     bcc:	8d 30       	cpi	r24, 0x0D	; 13
     bce:	31 f4       	brne	.+12     	; 0xbdc <__vector_18+0x68>
			uart0_received = 1;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 76 01 	sts	0x0176, r24
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <__vector_18+0x68>
		}
	} else {
		/* Wait for buffer to be cleared. */
		clear_buffer();	
     bd8:	0e 94 b1 05 	call	0xb62	; 0xb62 <clear_buffer>
	}
}
     bdc:	ff 91       	pop	r31
     bde:	ef 91       	pop	r30
     be0:	bf 91       	pop	r27
     be2:	af 91       	pop	r26
     be4:	9f 91       	pop	r25
     be6:	8f 91       	pop	r24
     be8:	7f 91       	pop	r23
     bea:	6f 91       	pop	r22
     bec:	5f 91       	pop	r21
     bee:	4f 91       	pop	r20
     bf0:	3f 91       	pop	r19
     bf2:	2f 91       	pop	r18
     bf4:	0f 90       	pop	r0
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	0f 90       	pop	r0
     bfa:	1f 90       	pop	r1
     bfc:	18 95       	reti

00000bfe <__subsf3>:
     bfe:	50 58       	subi	r21, 0x80	; 128

00000c00 <__addsf3>:
     c00:	bb 27       	eor	r27, r27
     c02:	aa 27       	eor	r26, r26
     c04:	0e d0       	rcall	.+28     	; 0xc22 <__addsf3x>
     c06:	e5 c0       	rjmp	.+458    	; 0xdd2 <__fp_round>
     c08:	d6 d0       	rcall	.+428    	; 0xdb6 <__fp_pscA>
     c0a:	30 f0       	brcs	.+12     	; 0xc18 <__addsf3+0x18>
     c0c:	db d0       	rcall	.+438    	; 0xdc4 <__fp_pscB>
     c0e:	20 f0       	brcs	.+8      	; 0xc18 <__addsf3+0x18>
     c10:	31 f4       	brne	.+12     	; 0xc1e <__addsf3+0x1e>
     c12:	9f 3f       	cpi	r25, 0xFF	; 255
     c14:	11 f4       	brne	.+4      	; 0xc1a <__addsf3+0x1a>
     c16:	1e f4       	brtc	.+6      	; 0xc1e <__addsf3+0x1e>
     c18:	cb c0       	rjmp	.+406    	; 0xdb0 <__fp_nan>
     c1a:	0e f4       	brtc	.+2      	; 0xc1e <__addsf3+0x1e>
     c1c:	e0 95       	com	r30
     c1e:	e7 fb       	bst	r30, 7
     c20:	c1 c0       	rjmp	.+386    	; 0xda4 <__fp_inf>

00000c22 <__addsf3x>:
     c22:	e9 2f       	mov	r30, r25
     c24:	e7 d0       	rcall	.+462    	; 0xdf4 <__fp_split3>
     c26:	80 f3       	brcs	.-32     	; 0xc08 <__addsf3+0x8>
     c28:	ba 17       	cp	r27, r26
     c2a:	62 07       	cpc	r22, r18
     c2c:	73 07       	cpc	r23, r19
     c2e:	84 07       	cpc	r24, r20
     c30:	95 07       	cpc	r25, r21
     c32:	18 f0       	brcs	.+6      	; 0xc3a <__addsf3x+0x18>
     c34:	71 f4       	brne	.+28     	; 0xc52 <__addsf3x+0x30>
     c36:	9e f5       	brtc	.+102    	; 0xc9e <__addsf3x+0x7c>
     c38:	ff c0       	rjmp	.+510    	; 0xe38 <__fp_zero>
     c3a:	0e f4       	brtc	.+2      	; 0xc3e <__addsf3x+0x1c>
     c3c:	e0 95       	com	r30
     c3e:	0b 2e       	mov	r0, r27
     c40:	ba 2f       	mov	r27, r26
     c42:	a0 2d       	mov	r26, r0
     c44:	0b 01       	movw	r0, r22
     c46:	b9 01       	movw	r22, r18
     c48:	90 01       	movw	r18, r0
     c4a:	0c 01       	movw	r0, r24
     c4c:	ca 01       	movw	r24, r20
     c4e:	a0 01       	movw	r20, r0
     c50:	11 24       	eor	r1, r1
     c52:	ff 27       	eor	r31, r31
     c54:	59 1b       	sub	r21, r25
     c56:	99 f0       	breq	.+38     	; 0xc7e <__addsf3x+0x5c>
     c58:	59 3f       	cpi	r21, 0xF9	; 249
     c5a:	50 f4       	brcc	.+20     	; 0xc70 <__addsf3x+0x4e>
     c5c:	50 3e       	cpi	r21, 0xE0	; 224
     c5e:	68 f1       	brcs	.+90     	; 0xcba <__addsf3x+0x98>
     c60:	1a 16       	cp	r1, r26
     c62:	f0 40       	sbci	r31, 0x00	; 0
     c64:	a2 2f       	mov	r26, r18
     c66:	23 2f       	mov	r18, r19
     c68:	34 2f       	mov	r19, r20
     c6a:	44 27       	eor	r20, r20
     c6c:	58 5f       	subi	r21, 0xF8	; 248
     c6e:	f3 cf       	rjmp	.-26     	; 0xc56 <__addsf3x+0x34>
     c70:	46 95       	lsr	r20
     c72:	37 95       	ror	r19
     c74:	27 95       	ror	r18
     c76:	a7 95       	ror	r26
     c78:	f0 40       	sbci	r31, 0x00	; 0
     c7a:	53 95       	inc	r21
     c7c:	c9 f7       	brne	.-14     	; 0xc70 <__addsf3x+0x4e>
     c7e:	7e f4       	brtc	.+30     	; 0xc9e <__addsf3x+0x7c>
     c80:	1f 16       	cp	r1, r31
     c82:	ba 0b       	sbc	r27, r26
     c84:	62 0b       	sbc	r22, r18
     c86:	73 0b       	sbc	r23, r19
     c88:	84 0b       	sbc	r24, r20
     c8a:	ba f0       	brmi	.+46     	; 0xcba <__addsf3x+0x98>
     c8c:	91 50       	subi	r25, 0x01	; 1
     c8e:	a1 f0       	breq	.+40     	; 0xcb8 <__addsf3x+0x96>
     c90:	ff 0f       	add	r31, r31
     c92:	bb 1f       	adc	r27, r27
     c94:	66 1f       	adc	r22, r22
     c96:	77 1f       	adc	r23, r23
     c98:	88 1f       	adc	r24, r24
     c9a:	c2 f7       	brpl	.-16     	; 0xc8c <__addsf3x+0x6a>
     c9c:	0e c0       	rjmp	.+28     	; 0xcba <__addsf3x+0x98>
     c9e:	ba 0f       	add	r27, r26
     ca0:	62 1f       	adc	r22, r18
     ca2:	73 1f       	adc	r23, r19
     ca4:	84 1f       	adc	r24, r20
     ca6:	48 f4       	brcc	.+18     	; 0xcba <__addsf3x+0x98>
     ca8:	87 95       	ror	r24
     caa:	77 95       	ror	r23
     cac:	67 95       	ror	r22
     cae:	b7 95       	ror	r27
     cb0:	f7 95       	ror	r31
     cb2:	9e 3f       	cpi	r25, 0xFE	; 254
     cb4:	08 f0       	brcs	.+2      	; 0xcb8 <__addsf3x+0x96>
     cb6:	b3 cf       	rjmp	.-154    	; 0xc1e <__addsf3+0x1e>
     cb8:	93 95       	inc	r25
     cba:	88 0f       	add	r24, r24
     cbc:	08 f0       	brcs	.+2      	; 0xcc0 <__addsf3x+0x9e>
     cbe:	99 27       	eor	r25, r25
     cc0:	ee 0f       	add	r30, r30
     cc2:	97 95       	ror	r25
     cc4:	87 95       	ror	r24
     cc6:	08 95       	ret

00000cc8 <__fixsfsi>:
     cc8:	04 d0       	rcall	.+8      	; 0xcd2 <__fixunssfsi>
     cca:	68 94       	set
     ccc:	b1 11       	cpse	r27, r1
     cce:	b5 c0       	rjmp	.+362    	; 0xe3a <__fp_szero>
     cd0:	08 95       	ret

00000cd2 <__fixunssfsi>:
     cd2:	98 d0       	rcall	.+304    	; 0xe04 <__fp_splitA>
     cd4:	88 f0       	brcs	.+34     	; 0xcf8 <__fixunssfsi+0x26>
     cd6:	9f 57       	subi	r25, 0x7F	; 127
     cd8:	90 f0       	brcs	.+36     	; 0xcfe <__fixunssfsi+0x2c>
     cda:	b9 2f       	mov	r27, r25
     cdc:	99 27       	eor	r25, r25
     cde:	b7 51       	subi	r27, 0x17	; 23
     ce0:	a0 f0       	brcs	.+40     	; 0xd0a <__fixunssfsi+0x38>
     ce2:	d1 f0       	breq	.+52     	; 0xd18 <__fixunssfsi+0x46>
     ce4:	66 0f       	add	r22, r22
     ce6:	77 1f       	adc	r23, r23
     ce8:	88 1f       	adc	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	1a f0       	brmi	.+6      	; 0xcf4 <__fixunssfsi+0x22>
     cee:	ba 95       	dec	r27
     cf0:	c9 f7       	brne	.-14     	; 0xce4 <__fixunssfsi+0x12>
     cf2:	12 c0       	rjmp	.+36     	; 0xd18 <__fixunssfsi+0x46>
     cf4:	b1 30       	cpi	r27, 0x01	; 1
     cf6:	81 f0       	breq	.+32     	; 0xd18 <__fixunssfsi+0x46>
     cf8:	9f d0       	rcall	.+318    	; 0xe38 <__fp_zero>
     cfa:	b1 e0       	ldi	r27, 0x01	; 1
     cfc:	08 95       	ret
     cfe:	9c c0       	rjmp	.+312    	; 0xe38 <__fp_zero>
     d00:	67 2f       	mov	r22, r23
     d02:	78 2f       	mov	r23, r24
     d04:	88 27       	eor	r24, r24
     d06:	b8 5f       	subi	r27, 0xF8	; 248
     d08:	39 f0       	breq	.+14     	; 0xd18 <__fixunssfsi+0x46>
     d0a:	b9 3f       	cpi	r27, 0xF9	; 249
     d0c:	cc f3       	brlt	.-14     	; 0xd00 <__fixunssfsi+0x2e>
     d0e:	86 95       	lsr	r24
     d10:	77 95       	ror	r23
     d12:	67 95       	ror	r22
     d14:	b3 95       	inc	r27
     d16:	d9 f7       	brne	.-10     	; 0xd0e <__fixunssfsi+0x3c>
     d18:	3e f4       	brtc	.+14     	; 0xd28 <__fixunssfsi+0x56>
     d1a:	90 95       	com	r25
     d1c:	80 95       	com	r24
     d1e:	70 95       	com	r23
     d20:	61 95       	neg	r22
     d22:	7f 4f       	sbci	r23, 0xFF	; 255
     d24:	8f 4f       	sbci	r24, 0xFF	; 255
     d26:	9f 4f       	sbci	r25, 0xFF	; 255
     d28:	08 95       	ret

00000d2a <__floatunsisf>:
     d2a:	e8 94       	clt
     d2c:	09 c0       	rjmp	.+18     	; 0xd40 <__floatsisf+0x12>

00000d2e <__floatsisf>:
     d2e:	97 fb       	bst	r25, 7
     d30:	3e f4       	brtc	.+14     	; 0xd40 <__floatsisf+0x12>
     d32:	90 95       	com	r25
     d34:	80 95       	com	r24
     d36:	70 95       	com	r23
     d38:	61 95       	neg	r22
     d3a:	7f 4f       	sbci	r23, 0xFF	; 255
     d3c:	8f 4f       	sbci	r24, 0xFF	; 255
     d3e:	9f 4f       	sbci	r25, 0xFF	; 255
     d40:	99 23       	and	r25, r25
     d42:	a9 f0       	breq	.+42     	; 0xd6e <__floatsisf+0x40>
     d44:	f9 2f       	mov	r31, r25
     d46:	96 e9       	ldi	r25, 0x96	; 150
     d48:	bb 27       	eor	r27, r27
     d4a:	93 95       	inc	r25
     d4c:	f6 95       	lsr	r31
     d4e:	87 95       	ror	r24
     d50:	77 95       	ror	r23
     d52:	67 95       	ror	r22
     d54:	b7 95       	ror	r27
     d56:	f1 11       	cpse	r31, r1
     d58:	f8 cf       	rjmp	.-16     	; 0xd4a <__floatsisf+0x1c>
     d5a:	fa f4       	brpl	.+62     	; 0xd9a <__floatsisf+0x6c>
     d5c:	bb 0f       	add	r27, r27
     d5e:	11 f4       	brne	.+4      	; 0xd64 <__floatsisf+0x36>
     d60:	60 ff       	sbrs	r22, 0
     d62:	1b c0       	rjmp	.+54     	; 0xd9a <__floatsisf+0x6c>
     d64:	6f 5f       	subi	r22, 0xFF	; 255
     d66:	7f 4f       	sbci	r23, 0xFF	; 255
     d68:	8f 4f       	sbci	r24, 0xFF	; 255
     d6a:	9f 4f       	sbci	r25, 0xFF	; 255
     d6c:	16 c0       	rjmp	.+44     	; 0xd9a <__floatsisf+0x6c>
     d6e:	88 23       	and	r24, r24
     d70:	11 f0       	breq	.+4      	; 0xd76 <__floatsisf+0x48>
     d72:	96 e9       	ldi	r25, 0x96	; 150
     d74:	11 c0       	rjmp	.+34     	; 0xd98 <__floatsisf+0x6a>
     d76:	77 23       	and	r23, r23
     d78:	21 f0       	breq	.+8      	; 0xd82 <__floatsisf+0x54>
     d7a:	9e e8       	ldi	r25, 0x8E	; 142
     d7c:	87 2f       	mov	r24, r23
     d7e:	76 2f       	mov	r23, r22
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <__floatsisf+0x5e>
     d82:	66 23       	and	r22, r22
     d84:	71 f0       	breq	.+28     	; 0xda2 <__floatsisf+0x74>
     d86:	96 e8       	ldi	r25, 0x86	; 134
     d88:	86 2f       	mov	r24, r22
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	2a f0       	brmi	.+10     	; 0xd9a <__floatsisf+0x6c>
     d90:	9a 95       	dec	r25
     d92:	66 0f       	add	r22, r22
     d94:	77 1f       	adc	r23, r23
     d96:	88 1f       	adc	r24, r24
     d98:	da f7       	brpl	.-10     	; 0xd90 <__floatsisf+0x62>
     d9a:	88 0f       	add	r24, r24
     d9c:	96 95       	lsr	r25
     d9e:	87 95       	ror	r24
     da0:	97 f9       	bld	r25, 7
     da2:	08 95       	ret

00000da4 <__fp_inf>:
     da4:	97 f9       	bld	r25, 7
     da6:	9f 67       	ori	r25, 0x7F	; 127
     da8:	80 e8       	ldi	r24, 0x80	; 128
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	08 95       	ret

00000db0 <__fp_nan>:
     db0:	9f ef       	ldi	r25, 0xFF	; 255
     db2:	80 ec       	ldi	r24, 0xC0	; 192
     db4:	08 95       	ret

00000db6 <__fp_pscA>:
     db6:	00 24       	eor	r0, r0
     db8:	0a 94       	dec	r0
     dba:	16 16       	cp	r1, r22
     dbc:	17 06       	cpc	r1, r23
     dbe:	18 06       	cpc	r1, r24
     dc0:	09 06       	cpc	r0, r25
     dc2:	08 95       	ret

00000dc4 <__fp_pscB>:
     dc4:	00 24       	eor	r0, r0
     dc6:	0a 94       	dec	r0
     dc8:	12 16       	cp	r1, r18
     dca:	13 06       	cpc	r1, r19
     dcc:	14 06       	cpc	r1, r20
     dce:	05 06       	cpc	r0, r21
     dd0:	08 95       	ret

00000dd2 <__fp_round>:
     dd2:	09 2e       	mov	r0, r25
     dd4:	03 94       	inc	r0
     dd6:	00 0c       	add	r0, r0
     dd8:	11 f4       	brne	.+4      	; 0xdde <__fp_round+0xc>
     dda:	88 23       	and	r24, r24
     ddc:	52 f0       	brmi	.+20     	; 0xdf2 <__fp_round+0x20>
     dde:	bb 0f       	add	r27, r27
     de0:	40 f4       	brcc	.+16     	; 0xdf2 <__fp_round+0x20>
     de2:	bf 2b       	or	r27, r31
     de4:	11 f4       	brne	.+4      	; 0xdea <__fp_round+0x18>
     de6:	60 ff       	sbrs	r22, 0
     de8:	04 c0       	rjmp	.+8      	; 0xdf2 <__fp_round+0x20>
     dea:	6f 5f       	subi	r22, 0xFF	; 255
     dec:	7f 4f       	sbci	r23, 0xFF	; 255
     dee:	8f 4f       	sbci	r24, 0xFF	; 255
     df0:	9f 4f       	sbci	r25, 0xFF	; 255
     df2:	08 95       	ret

00000df4 <__fp_split3>:
     df4:	57 fd       	sbrc	r21, 7
     df6:	90 58       	subi	r25, 0x80	; 128
     df8:	44 0f       	add	r20, r20
     dfa:	55 1f       	adc	r21, r21
     dfc:	59 f0       	breq	.+22     	; 0xe14 <__fp_splitA+0x10>
     dfe:	5f 3f       	cpi	r21, 0xFF	; 255
     e00:	71 f0       	breq	.+28     	; 0xe1e <__fp_splitA+0x1a>
     e02:	47 95       	ror	r20

00000e04 <__fp_splitA>:
     e04:	88 0f       	add	r24, r24
     e06:	97 fb       	bst	r25, 7
     e08:	99 1f       	adc	r25, r25
     e0a:	61 f0       	breq	.+24     	; 0xe24 <__fp_splitA+0x20>
     e0c:	9f 3f       	cpi	r25, 0xFF	; 255
     e0e:	79 f0       	breq	.+30     	; 0xe2e <__fp_splitA+0x2a>
     e10:	87 95       	ror	r24
     e12:	08 95       	ret
     e14:	12 16       	cp	r1, r18
     e16:	13 06       	cpc	r1, r19
     e18:	14 06       	cpc	r1, r20
     e1a:	55 1f       	adc	r21, r21
     e1c:	f2 cf       	rjmp	.-28     	; 0xe02 <__fp_split3+0xe>
     e1e:	46 95       	lsr	r20
     e20:	f1 df       	rcall	.-30     	; 0xe04 <__fp_splitA>
     e22:	08 c0       	rjmp	.+16     	; 0xe34 <__fp_splitA+0x30>
     e24:	16 16       	cp	r1, r22
     e26:	17 06       	cpc	r1, r23
     e28:	18 06       	cpc	r1, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	f1 cf       	rjmp	.-30     	; 0xe10 <__fp_splitA+0xc>
     e2e:	86 95       	lsr	r24
     e30:	71 05       	cpc	r23, r1
     e32:	61 05       	cpc	r22, r1
     e34:	08 94       	sec
     e36:	08 95       	ret

00000e38 <__fp_zero>:
     e38:	e8 94       	clt

00000e3a <__fp_szero>:
     e3a:	bb 27       	eor	r27, r27
     e3c:	66 27       	eor	r22, r22
     e3e:	77 27       	eor	r23, r23
     e40:	cb 01       	movw	r24, r22
     e42:	97 f9       	bld	r25, 7
     e44:	08 95       	ret

00000e46 <__mulsf3>:
     e46:	0b d0       	rcall	.+22     	; 0xe5e <__mulsf3x>
     e48:	c4 cf       	rjmp	.-120    	; 0xdd2 <__fp_round>
     e4a:	b5 df       	rcall	.-150    	; 0xdb6 <__fp_pscA>
     e4c:	28 f0       	brcs	.+10     	; 0xe58 <__mulsf3+0x12>
     e4e:	ba df       	rcall	.-140    	; 0xdc4 <__fp_pscB>
     e50:	18 f0       	brcs	.+6      	; 0xe58 <__mulsf3+0x12>
     e52:	95 23       	and	r25, r21
     e54:	09 f0       	breq	.+2      	; 0xe58 <__mulsf3+0x12>
     e56:	a6 cf       	rjmp	.-180    	; 0xda4 <__fp_inf>
     e58:	ab cf       	rjmp	.-170    	; 0xdb0 <__fp_nan>
     e5a:	11 24       	eor	r1, r1
     e5c:	ee cf       	rjmp	.-36     	; 0xe3a <__fp_szero>

00000e5e <__mulsf3x>:
     e5e:	ca df       	rcall	.-108    	; 0xdf4 <__fp_split3>
     e60:	a0 f3       	brcs	.-24     	; 0xe4a <__mulsf3+0x4>

00000e62 <__mulsf3_pse>:
     e62:	95 9f       	mul	r25, r21
     e64:	d1 f3       	breq	.-12     	; 0xe5a <__mulsf3+0x14>
     e66:	95 0f       	add	r25, r21
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	55 1f       	adc	r21, r21
     e6c:	62 9f       	mul	r22, r18
     e6e:	f0 01       	movw	r30, r0
     e70:	72 9f       	mul	r23, r18
     e72:	bb 27       	eor	r27, r27
     e74:	f0 0d       	add	r31, r0
     e76:	b1 1d       	adc	r27, r1
     e78:	63 9f       	mul	r22, r19
     e7a:	aa 27       	eor	r26, r26
     e7c:	f0 0d       	add	r31, r0
     e7e:	b1 1d       	adc	r27, r1
     e80:	aa 1f       	adc	r26, r26
     e82:	64 9f       	mul	r22, r20
     e84:	66 27       	eor	r22, r22
     e86:	b0 0d       	add	r27, r0
     e88:	a1 1d       	adc	r26, r1
     e8a:	66 1f       	adc	r22, r22
     e8c:	82 9f       	mul	r24, r18
     e8e:	22 27       	eor	r18, r18
     e90:	b0 0d       	add	r27, r0
     e92:	a1 1d       	adc	r26, r1
     e94:	62 1f       	adc	r22, r18
     e96:	73 9f       	mul	r23, r19
     e98:	b0 0d       	add	r27, r0
     e9a:	a1 1d       	adc	r26, r1
     e9c:	62 1f       	adc	r22, r18
     e9e:	83 9f       	mul	r24, r19
     ea0:	a0 0d       	add	r26, r0
     ea2:	61 1d       	adc	r22, r1
     ea4:	22 1f       	adc	r18, r18
     ea6:	74 9f       	mul	r23, r20
     ea8:	33 27       	eor	r19, r19
     eaa:	a0 0d       	add	r26, r0
     eac:	61 1d       	adc	r22, r1
     eae:	23 1f       	adc	r18, r19
     eb0:	84 9f       	mul	r24, r20
     eb2:	60 0d       	add	r22, r0
     eb4:	21 1d       	adc	r18, r1
     eb6:	82 2f       	mov	r24, r18
     eb8:	76 2f       	mov	r23, r22
     eba:	6a 2f       	mov	r22, r26
     ebc:	11 24       	eor	r1, r1
     ebe:	9f 57       	subi	r25, 0x7F	; 127
     ec0:	50 40       	sbci	r21, 0x00	; 0
     ec2:	8a f0       	brmi	.+34     	; 0xee6 <__mulsf3_pse+0x84>
     ec4:	e1 f0       	breq	.+56     	; 0xefe <__mulsf3_pse+0x9c>
     ec6:	88 23       	and	r24, r24
     ec8:	4a f0       	brmi	.+18     	; 0xedc <__mulsf3_pse+0x7a>
     eca:	ee 0f       	add	r30, r30
     ecc:	ff 1f       	adc	r31, r31
     ece:	bb 1f       	adc	r27, r27
     ed0:	66 1f       	adc	r22, r22
     ed2:	77 1f       	adc	r23, r23
     ed4:	88 1f       	adc	r24, r24
     ed6:	91 50       	subi	r25, 0x01	; 1
     ed8:	50 40       	sbci	r21, 0x00	; 0
     eda:	a9 f7       	brne	.-22     	; 0xec6 <__mulsf3_pse+0x64>
     edc:	9e 3f       	cpi	r25, 0xFE	; 254
     ede:	51 05       	cpc	r21, r1
     ee0:	70 f0       	brcs	.+28     	; 0xefe <__mulsf3_pse+0x9c>
     ee2:	60 cf       	rjmp	.-320    	; 0xda4 <__fp_inf>
     ee4:	aa cf       	rjmp	.-172    	; 0xe3a <__fp_szero>
     ee6:	5f 3f       	cpi	r21, 0xFF	; 255
     ee8:	ec f3       	brlt	.-6      	; 0xee4 <__mulsf3_pse+0x82>
     eea:	98 3e       	cpi	r25, 0xE8	; 232
     eec:	dc f3       	brlt	.-10     	; 0xee4 <__mulsf3_pse+0x82>
     eee:	86 95       	lsr	r24
     ef0:	77 95       	ror	r23
     ef2:	67 95       	ror	r22
     ef4:	b7 95       	ror	r27
     ef6:	f7 95       	ror	r31
     ef8:	e7 95       	ror	r30
     efa:	9f 5f       	subi	r25, 0xFF	; 255
     efc:	c1 f7       	brne	.-16     	; 0xeee <__mulsf3_pse+0x8c>
     efe:	fe 2b       	or	r31, r30
     f00:	88 0f       	add	r24, r24
     f02:	91 1d       	adc	r25, r1
     f04:	96 95       	lsr	r25
     f06:	87 95       	ror	r24
     f08:	97 f9       	bld	r25, 7
     f0a:	08 95       	ret

00000f0c <sprintf>:
     f0c:	ae e0       	ldi	r26, 0x0E	; 14
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	ec e8       	ldi	r30, 0x8C	; 140
     f12:	f7 e0       	ldi	r31, 0x07	; 7
     f14:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__prologue_saves__+0x1c>
     f18:	0d 89       	ldd	r16, Y+21	; 0x15
     f1a:	1e 89       	ldd	r17, Y+22	; 0x16
     f1c:	86 e0       	ldi	r24, 0x06	; 6
     f1e:	8c 83       	std	Y+4, r24	; 0x04
     f20:	1a 83       	std	Y+2, r17	; 0x02
     f22:	09 83       	std	Y+1, r16	; 0x01
     f24:	8f ef       	ldi	r24, 0xFF	; 255
     f26:	9f e7       	ldi	r25, 0x7F	; 127
     f28:	9e 83       	std	Y+6, r25	; 0x06
     f2a:	8d 83       	std	Y+5, r24	; 0x05
     f2c:	ae 01       	movw	r20, r28
     f2e:	47 5e       	subi	r20, 0xE7	; 231
     f30:	5f 4f       	sbci	r21, 0xFF	; 255
     f32:	6f 89       	ldd	r22, Y+23	; 0x17
     f34:	78 8d       	ldd	r23, Y+24	; 0x18
     f36:	ce 01       	movw	r24, r28
     f38:	01 96       	adiw	r24, 0x01	; 1
     f3a:	0e 94 a8 07 	call	0xf50	; 0xf50 <vfprintf>
     f3e:	ef 81       	ldd	r30, Y+7	; 0x07
     f40:	f8 85       	ldd	r31, Y+8	; 0x08
     f42:	e0 0f       	add	r30, r16
     f44:	f1 1f       	adc	r31, r17
     f46:	10 82       	st	Z, r1
     f48:	2e 96       	adiw	r28, 0x0e	; 14
     f4a:	e4 e0       	ldi	r30, 0x04	; 4
     f4c:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__epilogue_restores__+0x1c>

00000f50 <vfprintf>:
     f50:	ac e0       	ldi	r26, 0x0C	; 12
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	ee ea       	ldi	r30, 0xAE	; 174
     f56:	f7 e0       	ldi	r31, 0x07	; 7
     f58:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__prologue_saves__>
     f5c:	7c 01       	movw	r14, r24
     f5e:	6b 01       	movw	r12, r22
     f60:	8a 01       	movw	r16, r20
     f62:	fc 01       	movw	r30, r24
     f64:	17 82       	std	Z+7, r1	; 0x07
     f66:	16 82       	std	Z+6, r1	; 0x06
     f68:	83 81       	ldd	r24, Z+3	; 0x03
     f6a:	81 ff       	sbrs	r24, 1
     f6c:	bd c1       	rjmp	.+890    	; 0x12e8 <vfprintf+0x398>
     f6e:	ce 01       	movw	r24, r28
     f70:	01 96       	adiw	r24, 0x01	; 1
     f72:	4c 01       	movw	r8, r24
     f74:	f7 01       	movw	r30, r14
     f76:	93 81       	ldd	r25, Z+3	; 0x03
     f78:	f6 01       	movw	r30, r12
     f7a:	93 fd       	sbrc	r25, 3
     f7c:	85 91       	lpm	r24, Z+
     f7e:	93 ff       	sbrs	r25, 3
     f80:	81 91       	ld	r24, Z+
     f82:	6f 01       	movw	r12, r30
     f84:	88 23       	and	r24, r24
     f86:	09 f4       	brne	.+2      	; 0xf8a <vfprintf+0x3a>
     f88:	ab c1       	rjmp	.+854    	; 0x12e0 <vfprintf+0x390>
     f8a:	85 32       	cpi	r24, 0x25	; 37
     f8c:	39 f4       	brne	.+14     	; 0xf9c <vfprintf+0x4c>
     f8e:	93 fd       	sbrc	r25, 3
     f90:	85 91       	lpm	r24, Z+
     f92:	93 ff       	sbrs	r25, 3
     f94:	81 91       	ld	r24, Z+
     f96:	6f 01       	movw	r12, r30
     f98:	85 32       	cpi	r24, 0x25	; 37
     f9a:	29 f4       	brne	.+10     	; 0xfa6 <vfprintf+0x56>
     f9c:	b7 01       	movw	r22, r14
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
     fa4:	e7 cf       	rjmp	.-50     	; 0xf74 <vfprintf+0x24>
     fa6:	51 2c       	mov	r5, r1
     fa8:	31 2c       	mov	r3, r1
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	20 32       	cpi	r18, 0x20	; 32
     fae:	a0 f4       	brcc	.+40     	; 0xfd8 <vfprintf+0x88>
     fb0:	8b 32       	cpi	r24, 0x2B	; 43
     fb2:	69 f0       	breq	.+26     	; 0xfce <vfprintf+0x7e>
     fb4:	30 f4       	brcc	.+12     	; 0xfc2 <vfprintf+0x72>
     fb6:	80 32       	cpi	r24, 0x20	; 32
     fb8:	59 f0       	breq	.+22     	; 0xfd0 <vfprintf+0x80>
     fba:	83 32       	cpi	r24, 0x23	; 35
     fbc:	69 f4       	brne	.+26     	; 0xfd8 <vfprintf+0x88>
     fbe:	20 61       	ori	r18, 0x10	; 16
     fc0:	2c c0       	rjmp	.+88     	; 0x101a <vfprintf+0xca>
     fc2:	8d 32       	cpi	r24, 0x2D	; 45
     fc4:	39 f0       	breq	.+14     	; 0xfd4 <vfprintf+0x84>
     fc6:	80 33       	cpi	r24, 0x30	; 48
     fc8:	39 f4       	brne	.+14     	; 0xfd8 <vfprintf+0x88>
     fca:	21 60       	ori	r18, 0x01	; 1
     fcc:	26 c0       	rjmp	.+76     	; 0x101a <vfprintf+0xca>
     fce:	22 60       	ori	r18, 0x02	; 2
     fd0:	24 60       	ori	r18, 0x04	; 4
     fd2:	23 c0       	rjmp	.+70     	; 0x101a <vfprintf+0xca>
     fd4:	28 60       	ori	r18, 0x08	; 8
     fd6:	21 c0       	rjmp	.+66     	; 0x101a <vfprintf+0xca>
     fd8:	27 fd       	sbrc	r18, 7
     fda:	27 c0       	rjmp	.+78     	; 0x102a <vfprintf+0xda>
     fdc:	30 ed       	ldi	r19, 0xD0	; 208
     fde:	38 0f       	add	r19, r24
     fe0:	3a 30       	cpi	r19, 0x0A	; 10
     fe2:	78 f4       	brcc	.+30     	; 0x1002 <vfprintf+0xb2>
     fe4:	26 ff       	sbrs	r18, 6
     fe6:	06 c0       	rjmp	.+12     	; 0xff4 <vfprintf+0xa4>
     fe8:	fa e0       	ldi	r31, 0x0A	; 10
     fea:	5f 9e       	mul	r5, r31
     fec:	30 0d       	add	r19, r0
     fee:	11 24       	eor	r1, r1
     ff0:	53 2e       	mov	r5, r19
     ff2:	13 c0       	rjmp	.+38     	; 0x101a <vfprintf+0xca>
     ff4:	8a e0       	ldi	r24, 0x0A	; 10
     ff6:	38 9e       	mul	r3, r24
     ff8:	30 0d       	add	r19, r0
     ffa:	11 24       	eor	r1, r1
     ffc:	33 2e       	mov	r3, r19
     ffe:	20 62       	ori	r18, 0x20	; 32
    1000:	0c c0       	rjmp	.+24     	; 0x101a <vfprintf+0xca>
    1002:	8e 32       	cpi	r24, 0x2E	; 46
    1004:	21 f4       	brne	.+8      	; 0x100e <vfprintf+0xbe>
    1006:	26 fd       	sbrc	r18, 6
    1008:	6b c1       	rjmp	.+726    	; 0x12e0 <vfprintf+0x390>
    100a:	20 64       	ori	r18, 0x40	; 64
    100c:	06 c0       	rjmp	.+12     	; 0x101a <vfprintf+0xca>
    100e:	8c 36       	cpi	r24, 0x6C	; 108
    1010:	11 f4       	brne	.+4      	; 0x1016 <vfprintf+0xc6>
    1012:	20 68       	ori	r18, 0x80	; 128
    1014:	02 c0       	rjmp	.+4      	; 0x101a <vfprintf+0xca>
    1016:	88 36       	cpi	r24, 0x68	; 104
    1018:	41 f4       	brne	.+16     	; 0x102a <vfprintf+0xda>
    101a:	f6 01       	movw	r30, r12
    101c:	93 fd       	sbrc	r25, 3
    101e:	85 91       	lpm	r24, Z+
    1020:	93 ff       	sbrs	r25, 3
    1022:	81 91       	ld	r24, Z+
    1024:	6f 01       	movw	r12, r30
    1026:	81 11       	cpse	r24, r1
    1028:	c1 cf       	rjmp	.-126    	; 0xfac <vfprintf+0x5c>
    102a:	98 2f       	mov	r25, r24
    102c:	9f 7d       	andi	r25, 0xDF	; 223
    102e:	95 54       	subi	r25, 0x45	; 69
    1030:	93 30       	cpi	r25, 0x03	; 3
    1032:	28 f4       	brcc	.+10     	; 0x103e <vfprintf+0xee>
    1034:	0c 5f       	subi	r16, 0xFC	; 252
    1036:	1f 4f       	sbci	r17, 0xFF	; 255
    1038:	ff e3       	ldi	r31, 0x3F	; 63
    103a:	f9 83       	std	Y+1, r31	; 0x01
    103c:	0d c0       	rjmp	.+26     	; 0x1058 <vfprintf+0x108>
    103e:	83 36       	cpi	r24, 0x63	; 99
    1040:	31 f0       	breq	.+12     	; 0x104e <vfprintf+0xfe>
    1042:	83 37       	cpi	r24, 0x73	; 115
    1044:	71 f0       	breq	.+28     	; 0x1062 <vfprintf+0x112>
    1046:	83 35       	cpi	r24, 0x53	; 83
    1048:	09 f0       	breq	.+2      	; 0x104c <vfprintf+0xfc>
    104a:	5b c0       	rjmp	.+182    	; 0x1102 <vfprintf+0x1b2>
    104c:	22 c0       	rjmp	.+68     	; 0x1092 <vfprintf+0x142>
    104e:	f8 01       	movw	r30, r16
    1050:	80 81       	ld	r24, Z
    1052:	89 83       	std	Y+1, r24	; 0x01
    1054:	0e 5f       	subi	r16, 0xFE	; 254
    1056:	1f 4f       	sbci	r17, 0xFF	; 255
    1058:	44 24       	eor	r4, r4
    105a:	43 94       	inc	r4
    105c:	51 2c       	mov	r5, r1
    105e:	54 01       	movw	r10, r8
    1060:	15 c0       	rjmp	.+42     	; 0x108c <vfprintf+0x13c>
    1062:	38 01       	movw	r6, r16
    1064:	f2 e0       	ldi	r31, 0x02	; 2
    1066:	6f 0e       	add	r6, r31
    1068:	71 1c       	adc	r7, r1
    106a:	f8 01       	movw	r30, r16
    106c:	a0 80       	ld	r10, Z
    106e:	b1 80       	ldd	r11, Z+1	; 0x01
    1070:	26 ff       	sbrs	r18, 6
    1072:	03 c0       	rjmp	.+6      	; 0x107a <vfprintf+0x12a>
    1074:	65 2d       	mov	r22, r5
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	02 c0       	rjmp	.+4      	; 0x107e <vfprintf+0x12e>
    107a:	6f ef       	ldi	r22, 0xFF	; 255
    107c:	7f ef       	ldi	r23, 0xFF	; 255
    107e:	c5 01       	movw	r24, r10
    1080:	2c 87       	std	Y+12, r18	; 0x0c
    1082:	0e 94 85 09 	call	0x130a	; 0x130a <strnlen>
    1086:	2c 01       	movw	r4, r24
    1088:	83 01       	movw	r16, r6
    108a:	2c 85       	ldd	r18, Y+12	; 0x0c
    108c:	2f 77       	andi	r18, 0x7F	; 127
    108e:	22 2e       	mov	r2, r18
    1090:	17 c0       	rjmp	.+46     	; 0x10c0 <vfprintf+0x170>
    1092:	38 01       	movw	r6, r16
    1094:	f2 e0       	ldi	r31, 0x02	; 2
    1096:	6f 0e       	add	r6, r31
    1098:	71 1c       	adc	r7, r1
    109a:	f8 01       	movw	r30, r16
    109c:	a0 80       	ld	r10, Z
    109e:	b1 80       	ldd	r11, Z+1	; 0x01
    10a0:	26 ff       	sbrs	r18, 6
    10a2:	03 c0       	rjmp	.+6      	; 0x10aa <vfprintf+0x15a>
    10a4:	65 2d       	mov	r22, r5
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <vfprintf+0x15e>
    10aa:	6f ef       	ldi	r22, 0xFF	; 255
    10ac:	7f ef       	ldi	r23, 0xFF	; 255
    10ae:	c5 01       	movw	r24, r10
    10b0:	2c 87       	std	Y+12, r18	; 0x0c
    10b2:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <strnlen_P>
    10b6:	2c 01       	movw	r4, r24
    10b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    10ba:	20 68       	ori	r18, 0x80	; 128
    10bc:	22 2e       	mov	r2, r18
    10be:	83 01       	movw	r16, r6
    10c0:	23 fc       	sbrc	r2, 3
    10c2:	1b c0       	rjmp	.+54     	; 0x10fa <vfprintf+0x1aa>
    10c4:	83 2d       	mov	r24, r3
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	48 16       	cp	r4, r24
    10ca:	59 06       	cpc	r5, r25
    10cc:	b0 f4       	brcc	.+44     	; 0x10fa <vfprintf+0x1aa>
    10ce:	b7 01       	movw	r22, r14
    10d0:	80 e2       	ldi	r24, 0x20	; 32
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    10d8:	3a 94       	dec	r3
    10da:	f4 cf       	rjmp	.-24     	; 0x10c4 <vfprintf+0x174>
    10dc:	f5 01       	movw	r30, r10
    10de:	27 fc       	sbrc	r2, 7
    10e0:	85 91       	lpm	r24, Z+
    10e2:	27 fe       	sbrs	r2, 7
    10e4:	81 91       	ld	r24, Z+
    10e6:	5f 01       	movw	r10, r30
    10e8:	b7 01       	movw	r22, r14
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    10f0:	31 10       	cpse	r3, r1
    10f2:	3a 94       	dec	r3
    10f4:	f1 e0       	ldi	r31, 0x01	; 1
    10f6:	4f 1a       	sub	r4, r31
    10f8:	51 08       	sbc	r5, r1
    10fa:	41 14       	cp	r4, r1
    10fc:	51 04       	cpc	r5, r1
    10fe:	71 f7       	brne	.-36     	; 0x10dc <vfprintf+0x18c>
    1100:	e5 c0       	rjmp	.+458    	; 0x12cc <vfprintf+0x37c>
    1102:	84 36       	cpi	r24, 0x64	; 100
    1104:	11 f0       	breq	.+4      	; 0x110a <vfprintf+0x1ba>
    1106:	89 36       	cpi	r24, 0x69	; 105
    1108:	39 f5       	brne	.+78     	; 0x1158 <vfprintf+0x208>
    110a:	f8 01       	movw	r30, r16
    110c:	27 ff       	sbrs	r18, 7
    110e:	07 c0       	rjmp	.+14     	; 0x111e <vfprintf+0x1ce>
    1110:	60 81       	ld	r22, Z
    1112:	71 81       	ldd	r23, Z+1	; 0x01
    1114:	82 81       	ldd	r24, Z+2	; 0x02
    1116:	93 81       	ldd	r25, Z+3	; 0x03
    1118:	0c 5f       	subi	r16, 0xFC	; 252
    111a:	1f 4f       	sbci	r17, 0xFF	; 255
    111c:	08 c0       	rjmp	.+16     	; 0x112e <vfprintf+0x1de>
    111e:	60 81       	ld	r22, Z
    1120:	71 81       	ldd	r23, Z+1	; 0x01
    1122:	88 27       	eor	r24, r24
    1124:	77 fd       	sbrc	r23, 7
    1126:	80 95       	com	r24
    1128:	98 2f       	mov	r25, r24
    112a:	0e 5f       	subi	r16, 0xFE	; 254
    112c:	1f 4f       	sbci	r17, 0xFF	; 255
    112e:	2f 76       	andi	r18, 0x6F	; 111
    1130:	b2 2e       	mov	r11, r18
    1132:	97 ff       	sbrs	r25, 7
    1134:	09 c0       	rjmp	.+18     	; 0x1148 <vfprintf+0x1f8>
    1136:	90 95       	com	r25
    1138:	80 95       	com	r24
    113a:	70 95       	com	r23
    113c:	61 95       	neg	r22
    113e:	7f 4f       	sbci	r23, 0xFF	; 255
    1140:	8f 4f       	sbci	r24, 0xFF	; 255
    1142:	9f 4f       	sbci	r25, 0xFF	; 255
    1144:	20 68       	ori	r18, 0x80	; 128
    1146:	b2 2e       	mov	r11, r18
    1148:	2a e0       	ldi	r18, 0x0A	; 10
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	a4 01       	movw	r20, r8
    114e:	0e 94 c2 09 	call	0x1384	; 0x1384 <__ultoa_invert>
    1152:	a8 2e       	mov	r10, r24
    1154:	a8 18       	sub	r10, r8
    1156:	44 c0       	rjmp	.+136    	; 0x11e0 <vfprintf+0x290>
    1158:	85 37       	cpi	r24, 0x75	; 117
    115a:	29 f4       	brne	.+10     	; 0x1166 <vfprintf+0x216>
    115c:	2f 7e       	andi	r18, 0xEF	; 239
    115e:	b2 2e       	mov	r11, r18
    1160:	2a e0       	ldi	r18, 0x0A	; 10
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	25 c0       	rjmp	.+74     	; 0x11b0 <vfprintf+0x260>
    1166:	f2 2f       	mov	r31, r18
    1168:	f9 7f       	andi	r31, 0xF9	; 249
    116a:	bf 2e       	mov	r11, r31
    116c:	8f 36       	cpi	r24, 0x6F	; 111
    116e:	c1 f0       	breq	.+48     	; 0x11a0 <vfprintf+0x250>
    1170:	18 f4       	brcc	.+6      	; 0x1178 <vfprintf+0x228>
    1172:	88 35       	cpi	r24, 0x58	; 88
    1174:	79 f0       	breq	.+30     	; 0x1194 <vfprintf+0x244>
    1176:	b4 c0       	rjmp	.+360    	; 0x12e0 <vfprintf+0x390>
    1178:	80 37       	cpi	r24, 0x70	; 112
    117a:	19 f0       	breq	.+6      	; 0x1182 <vfprintf+0x232>
    117c:	88 37       	cpi	r24, 0x78	; 120
    117e:	21 f0       	breq	.+8      	; 0x1188 <vfprintf+0x238>
    1180:	af c0       	rjmp	.+350    	; 0x12e0 <vfprintf+0x390>
    1182:	2f 2f       	mov	r18, r31
    1184:	20 61       	ori	r18, 0x10	; 16
    1186:	b2 2e       	mov	r11, r18
    1188:	b4 fe       	sbrs	r11, 4
    118a:	0d c0       	rjmp	.+26     	; 0x11a6 <vfprintf+0x256>
    118c:	8b 2d       	mov	r24, r11
    118e:	84 60       	ori	r24, 0x04	; 4
    1190:	b8 2e       	mov	r11, r24
    1192:	09 c0       	rjmp	.+18     	; 0x11a6 <vfprintf+0x256>
    1194:	24 ff       	sbrs	r18, 4
    1196:	0a c0       	rjmp	.+20     	; 0x11ac <vfprintf+0x25c>
    1198:	9f 2f       	mov	r25, r31
    119a:	96 60       	ori	r25, 0x06	; 6
    119c:	b9 2e       	mov	r11, r25
    119e:	06 c0       	rjmp	.+12     	; 0x11ac <vfprintf+0x25c>
    11a0:	28 e0       	ldi	r18, 0x08	; 8
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	05 c0       	rjmp	.+10     	; 0x11b0 <vfprintf+0x260>
    11a6:	20 e1       	ldi	r18, 0x10	; 16
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <vfprintf+0x260>
    11ac:	20 e1       	ldi	r18, 0x10	; 16
    11ae:	32 e0       	ldi	r19, 0x02	; 2
    11b0:	f8 01       	movw	r30, r16
    11b2:	b7 fe       	sbrs	r11, 7
    11b4:	07 c0       	rjmp	.+14     	; 0x11c4 <vfprintf+0x274>
    11b6:	60 81       	ld	r22, Z
    11b8:	71 81       	ldd	r23, Z+1	; 0x01
    11ba:	82 81       	ldd	r24, Z+2	; 0x02
    11bc:	93 81       	ldd	r25, Z+3	; 0x03
    11be:	0c 5f       	subi	r16, 0xFC	; 252
    11c0:	1f 4f       	sbci	r17, 0xFF	; 255
    11c2:	06 c0       	rjmp	.+12     	; 0x11d0 <vfprintf+0x280>
    11c4:	60 81       	ld	r22, Z
    11c6:	71 81       	ldd	r23, Z+1	; 0x01
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 5f       	subi	r16, 0xFE	; 254
    11ce:	1f 4f       	sbci	r17, 0xFF	; 255
    11d0:	a4 01       	movw	r20, r8
    11d2:	0e 94 c2 09 	call	0x1384	; 0x1384 <__ultoa_invert>
    11d6:	a8 2e       	mov	r10, r24
    11d8:	a8 18       	sub	r10, r8
    11da:	fb 2d       	mov	r31, r11
    11dc:	ff 77       	andi	r31, 0x7F	; 127
    11de:	bf 2e       	mov	r11, r31
    11e0:	b6 fe       	sbrs	r11, 6
    11e2:	0b c0       	rjmp	.+22     	; 0x11fa <vfprintf+0x2aa>
    11e4:	2b 2d       	mov	r18, r11
    11e6:	2e 7f       	andi	r18, 0xFE	; 254
    11e8:	a5 14       	cp	r10, r5
    11ea:	50 f4       	brcc	.+20     	; 0x1200 <vfprintf+0x2b0>
    11ec:	b4 fe       	sbrs	r11, 4
    11ee:	0a c0       	rjmp	.+20     	; 0x1204 <vfprintf+0x2b4>
    11f0:	b2 fc       	sbrc	r11, 2
    11f2:	08 c0       	rjmp	.+16     	; 0x1204 <vfprintf+0x2b4>
    11f4:	2b 2d       	mov	r18, r11
    11f6:	2e 7e       	andi	r18, 0xEE	; 238
    11f8:	05 c0       	rjmp	.+10     	; 0x1204 <vfprintf+0x2b4>
    11fa:	7a 2c       	mov	r7, r10
    11fc:	2b 2d       	mov	r18, r11
    11fe:	03 c0       	rjmp	.+6      	; 0x1206 <vfprintf+0x2b6>
    1200:	7a 2c       	mov	r7, r10
    1202:	01 c0       	rjmp	.+2      	; 0x1206 <vfprintf+0x2b6>
    1204:	75 2c       	mov	r7, r5
    1206:	24 ff       	sbrs	r18, 4
    1208:	0d c0       	rjmp	.+26     	; 0x1224 <vfprintf+0x2d4>
    120a:	fe 01       	movw	r30, r28
    120c:	ea 0d       	add	r30, r10
    120e:	f1 1d       	adc	r31, r1
    1210:	80 81       	ld	r24, Z
    1212:	80 33       	cpi	r24, 0x30	; 48
    1214:	11 f4       	brne	.+4      	; 0x121a <vfprintf+0x2ca>
    1216:	29 7e       	andi	r18, 0xE9	; 233
    1218:	09 c0       	rjmp	.+18     	; 0x122c <vfprintf+0x2dc>
    121a:	22 ff       	sbrs	r18, 2
    121c:	06 c0       	rjmp	.+12     	; 0x122a <vfprintf+0x2da>
    121e:	73 94       	inc	r7
    1220:	73 94       	inc	r7
    1222:	04 c0       	rjmp	.+8      	; 0x122c <vfprintf+0x2dc>
    1224:	82 2f       	mov	r24, r18
    1226:	86 78       	andi	r24, 0x86	; 134
    1228:	09 f0       	breq	.+2      	; 0x122c <vfprintf+0x2dc>
    122a:	73 94       	inc	r7
    122c:	23 fd       	sbrc	r18, 3
    122e:	13 c0       	rjmp	.+38     	; 0x1256 <vfprintf+0x306>
    1230:	20 ff       	sbrs	r18, 0
    1232:	06 c0       	rjmp	.+12     	; 0x1240 <vfprintf+0x2f0>
    1234:	5a 2c       	mov	r5, r10
    1236:	73 14       	cp	r7, r3
    1238:	18 f4       	brcc	.+6      	; 0x1240 <vfprintf+0x2f0>
    123a:	53 0c       	add	r5, r3
    123c:	57 18       	sub	r5, r7
    123e:	73 2c       	mov	r7, r3
    1240:	73 14       	cp	r7, r3
    1242:	68 f4       	brcc	.+26     	; 0x125e <vfprintf+0x30e>
    1244:	b7 01       	movw	r22, r14
    1246:	80 e2       	ldi	r24, 0x20	; 32
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	2c 87       	std	Y+12, r18	; 0x0c
    124c:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    1250:	73 94       	inc	r7
    1252:	2c 85       	ldd	r18, Y+12	; 0x0c
    1254:	f5 cf       	rjmp	.-22     	; 0x1240 <vfprintf+0x2f0>
    1256:	73 14       	cp	r7, r3
    1258:	10 f4       	brcc	.+4      	; 0x125e <vfprintf+0x30e>
    125a:	37 18       	sub	r3, r7
    125c:	01 c0       	rjmp	.+2      	; 0x1260 <vfprintf+0x310>
    125e:	31 2c       	mov	r3, r1
    1260:	24 ff       	sbrs	r18, 4
    1262:	12 c0       	rjmp	.+36     	; 0x1288 <vfprintf+0x338>
    1264:	b7 01       	movw	r22, r14
    1266:	80 e3       	ldi	r24, 0x30	; 48
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	2c 87       	std	Y+12, r18	; 0x0c
    126c:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    1270:	2c 85       	ldd	r18, Y+12	; 0x0c
    1272:	22 ff       	sbrs	r18, 2
    1274:	17 c0       	rjmp	.+46     	; 0x12a4 <vfprintf+0x354>
    1276:	21 ff       	sbrs	r18, 1
    1278:	03 c0       	rjmp	.+6      	; 0x1280 <vfprintf+0x330>
    127a:	88 e5       	ldi	r24, 0x58	; 88
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <vfprintf+0x334>
    1280:	88 e7       	ldi	r24, 0x78	; 120
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	b7 01       	movw	r22, r14
    1286:	0c c0       	rjmp	.+24     	; 0x12a0 <vfprintf+0x350>
    1288:	82 2f       	mov	r24, r18
    128a:	86 78       	andi	r24, 0x86	; 134
    128c:	59 f0       	breq	.+22     	; 0x12a4 <vfprintf+0x354>
    128e:	21 fd       	sbrc	r18, 1
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <vfprintf+0x346>
    1292:	80 e2       	ldi	r24, 0x20	; 32
    1294:	01 c0       	rjmp	.+2      	; 0x1298 <vfprintf+0x348>
    1296:	8b e2       	ldi	r24, 0x2B	; 43
    1298:	27 fd       	sbrc	r18, 7
    129a:	8d e2       	ldi	r24, 0x2D	; 45
    129c:	b7 01       	movw	r22, r14
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    12a4:	a5 14       	cp	r10, r5
    12a6:	38 f4       	brcc	.+14     	; 0x12b6 <vfprintf+0x366>
    12a8:	b7 01       	movw	r22, r14
    12aa:	80 e3       	ldi	r24, 0x30	; 48
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    12b2:	5a 94       	dec	r5
    12b4:	f7 cf       	rjmp	.-18     	; 0x12a4 <vfprintf+0x354>
    12b6:	aa 94       	dec	r10
    12b8:	f4 01       	movw	r30, r8
    12ba:	ea 0d       	add	r30, r10
    12bc:	f1 1d       	adc	r31, r1
    12be:	80 81       	ld	r24, Z
    12c0:	b7 01       	movw	r22, r14
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    12c8:	a1 10       	cpse	r10, r1
    12ca:	f5 cf       	rjmp	.-22     	; 0x12b6 <vfprintf+0x366>
    12cc:	33 20       	and	r3, r3
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <vfprintf+0x382>
    12d0:	51 ce       	rjmp	.-862    	; 0xf74 <vfprintf+0x24>
    12d2:	b7 01       	movw	r22, r14
    12d4:	80 e2       	ldi	r24, 0x20	; 32
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    12dc:	3a 94       	dec	r3
    12de:	f6 cf       	rjmp	.-20     	; 0x12cc <vfprintf+0x37c>
    12e0:	f7 01       	movw	r30, r14
    12e2:	86 81       	ldd	r24, Z+6	; 0x06
    12e4:	97 81       	ldd	r25, Z+7	; 0x07
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <vfprintf+0x39c>
    12e8:	8f ef       	ldi	r24, 0xFF	; 255
    12ea:	9f ef       	ldi	r25, 0xFF	; 255
    12ec:	2c 96       	adiw	r28, 0x0c	; 12
    12ee:	e2 e1       	ldi	r30, 0x12	; 18
    12f0:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <__epilogue_restores__>

000012f4 <strnlen_P>:
    12f4:	fc 01       	movw	r30, r24
    12f6:	05 90       	lpm	r0, Z+
    12f8:	61 50       	subi	r22, 0x01	; 1
    12fa:	70 40       	sbci	r23, 0x00	; 0
    12fc:	01 10       	cpse	r0, r1
    12fe:	d8 f7       	brcc	.-10     	; 0x12f6 <strnlen_P+0x2>
    1300:	80 95       	com	r24
    1302:	90 95       	com	r25
    1304:	8e 0f       	add	r24, r30
    1306:	9f 1f       	adc	r25, r31
    1308:	08 95       	ret

0000130a <strnlen>:
    130a:	fc 01       	movw	r30, r24
    130c:	61 50       	subi	r22, 0x01	; 1
    130e:	70 40       	sbci	r23, 0x00	; 0
    1310:	01 90       	ld	r0, Z+
    1312:	01 10       	cpse	r0, r1
    1314:	d8 f7       	brcc	.-10     	; 0x130c <strnlen+0x2>
    1316:	80 95       	com	r24
    1318:	90 95       	com	r25
    131a:	8e 0f       	add	r24, r30
    131c:	9f 1f       	adc	r25, r31
    131e:	08 95       	ret

00001320 <fputc>:
    1320:	0f 93       	push	r16
    1322:	1f 93       	push	r17
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	18 2f       	mov	r17, r24
    132a:	09 2f       	mov	r16, r25
    132c:	eb 01       	movw	r28, r22
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	81 fd       	sbrc	r24, 1
    1332:	03 c0       	rjmp	.+6      	; 0x133a <fputc+0x1a>
    1334:	8f ef       	ldi	r24, 0xFF	; 255
    1336:	9f ef       	ldi	r25, 0xFF	; 255
    1338:	20 c0       	rjmp	.+64     	; 0x137a <fputc+0x5a>
    133a:	82 ff       	sbrs	r24, 2
    133c:	10 c0       	rjmp	.+32     	; 0x135e <fputc+0x3e>
    133e:	4e 81       	ldd	r20, Y+6	; 0x06
    1340:	5f 81       	ldd	r21, Y+7	; 0x07
    1342:	2c 81       	ldd	r18, Y+4	; 0x04
    1344:	3d 81       	ldd	r19, Y+5	; 0x05
    1346:	42 17       	cp	r20, r18
    1348:	53 07       	cpc	r21, r19
    134a:	7c f4       	brge	.+30     	; 0x136a <fputc+0x4a>
    134c:	e8 81       	ld	r30, Y
    134e:	f9 81       	ldd	r31, Y+1	; 0x01
    1350:	9f 01       	movw	r18, r30
    1352:	2f 5f       	subi	r18, 0xFF	; 255
    1354:	3f 4f       	sbci	r19, 0xFF	; 255
    1356:	39 83       	std	Y+1, r19	; 0x01
    1358:	28 83       	st	Y, r18
    135a:	10 83       	st	Z, r17
    135c:	06 c0       	rjmp	.+12     	; 0x136a <fputc+0x4a>
    135e:	e8 85       	ldd	r30, Y+8	; 0x08
    1360:	f9 85       	ldd	r31, Y+9	; 0x09
    1362:	81 2f       	mov	r24, r17
    1364:	09 95       	icall
    1366:	89 2b       	or	r24, r25
    1368:	29 f7       	brne	.-54     	; 0x1334 <fputc+0x14>
    136a:	2e 81       	ldd	r18, Y+6	; 0x06
    136c:	3f 81       	ldd	r19, Y+7	; 0x07
    136e:	2f 5f       	subi	r18, 0xFF	; 255
    1370:	3f 4f       	sbci	r19, 0xFF	; 255
    1372:	3f 83       	std	Y+7, r19	; 0x07
    1374:	2e 83       	std	Y+6, r18	; 0x06
    1376:	81 2f       	mov	r24, r17
    1378:	90 2f       	mov	r25, r16
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	08 95       	ret

00001384 <__ultoa_invert>:
    1384:	fa 01       	movw	r30, r20
    1386:	aa 27       	eor	r26, r26
    1388:	28 30       	cpi	r18, 0x08	; 8
    138a:	51 f1       	breq	.+84     	; 0x13e0 <__ultoa_invert+0x5c>
    138c:	20 31       	cpi	r18, 0x10	; 16
    138e:	81 f1       	breq	.+96     	; 0x13f0 <__ultoa_invert+0x6c>
    1390:	e8 94       	clt
    1392:	6f 93       	push	r22
    1394:	6e 7f       	andi	r22, 0xFE	; 254
    1396:	6e 5f       	subi	r22, 0xFE	; 254
    1398:	7f 4f       	sbci	r23, 0xFF	; 255
    139a:	8f 4f       	sbci	r24, 0xFF	; 255
    139c:	9f 4f       	sbci	r25, 0xFF	; 255
    139e:	af 4f       	sbci	r26, 0xFF	; 255
    13a0:	b1 e0       	ldi	r27, 0x01	; 1
    13a2:	3e d0       	rcall	.+124    	; 0x1420 <__ultoa_invert+0x9c>
    13a4:	b4 e0       	ldi	r27, 0x04	; 4
    13a6:	3c d0       	rcall	.+120    	; 0x1420 <__ultoa_invert+0x9c>
    13a8:	67 0f       	add	r22, r23
    13aa:	78 1f       	adc	r23, r24
    13ac:	89 1f       	adc	r24, r25
    13ae:	9a 1f       	adc	r25, r26
    13b0:	a1 1d       	adc	r26, r1
    13b2:	68 0f       	add	r22, r24
    13b4:	79 1f       	adc	r23, r25
    13b6:	8a 1f       	adc	r24, r26
    13b8:	91 1d       	adc	r25, r1
    13ba:	a1 1d       	adc	r26, r1
    13bc:	6a 0f       	add	r22, r26
    13be:	71 1d       	adc	r23, r1
    13c0:	81 1d       	adc	r24, r1
    13c2:	91 1d       	adc	r25, r1
    13c4:	a1 1d       	adc	r26, r1
    13c6:	20 d0       	rcall	.+64     	; 0x1408 <__ultoa_invert+0x84>
    13c8:	09 f4       	brne	.+2      	; 0x13cc <__ultoa_invert+0x48>
    13ca:	68 94       	set
    13cc:	3f 91       	pop	r19
    13ce:	2a e0       	ldi	r18, 0x0A	; 10
    13d0:	26 9f       	mul	r18, r22
    13d2:	11 24       	eor	r1, r1
    13d4:	30 19       	sub	r19, r0
    13d6:	30 5d       	subi	r19, 0xD0	; 208
    13d8:	31 93       	st	Z+, r19
    13da:	de f6       	brtc	.-74     	; 0x1392 <__ultoa_invert+0xe>
    13dc:	cf 01       	movw	r24, r30
    13de:	08 95       	ret
    13e0:	46 2f       	mov	r20, r22
    13e2:	47 70       	andi	r20, 0x07	; 7
    13e4:	40 5d       	subi	r20, 0xD0	; 208
    13e6:	41 93       	st	Z+, r20
    13e8:	b3 e0       	ldi	r27, 0x03	; 3
    13ea:	0f d0       	rcall	.+30     	; 0x140a <__ultoa_invert+0x86>
    13ec:	c9 f7       	brne	.-14     	; 0x13e0 <__ultoa_invert+0x5c>
    13ee:	f6 cf       	rjmp	.-20     	; 0x13dc <__ultoa_invert+0x58>
    13f0:	46 2f       	mov	r20, r22
    13f2:	4f 70       	andi	r20, 0x0F	; 15
    13f4:	40 5d       	subi	r20, 0xD0	; 208
    13f6:	4a 33       	cpi	r20, 0x3A	; 58
    13f8:	18 f0       	brcs	.+6      	; 0x1400 <__ultoa_invert+0x7c>
    13fa:	49 5d       	subi	r20, 0xD9	; 217
    13fc:	31 fd       	sbrc	r19, 1
    13fe:	40 52       	subi	r20, 0x20	; 32
    1400:	41 93       	st	Z+, r20
    1402:	02 d0       	rcall	.+4      	; 0x1408 <__ultoa_invert+0x84>
    1404:	a9 f7       	brne	.-22     	; 0x13f0 <__ultoa_invert+0x6c>
    1406:	ea cf       	rjmp	.-44     	; 0x13dc <__ultoa_invert+0x58>
    1408:	b4 e0       	ldi	r27, 0x04	; 4
    140a:	a6 95       	lsr	r26
    140c:	97 95       	ror	r25
    140e:	87 95       	ror	r24
    1410:	77 95       	ror	r23
    1412:	67 95       	ror	r22
    1414:	ba 95       	dec	r27
    1416:	c9 f7       	brne	.-14     	; 0x140a <__ultoa_invert+0x86>
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	61 05       	cpc	r22, r1
    141c:	71 05       	cpc	r23, r1
    141e:	08 95       	ret
    1420:	9b 01       	movw	r18, r22
    1422:	ac 01       	movw	r20, r24
    1424:	0a 2e       	mov	r0, r26
    1426:	06 94       	lsr	r0
    1428:	57 95       	ror	r21
    142a:	47 95       	ror	r20
    142c:	37 95       	ror	r19
    142e:	27 95       	ror	r18
    1430:	ba 95       	dec	r27
    1432:	c9 f7       	brne	.-14     	; 0x1426 <__ultoa_invert+0xa2>
    1434:	62 0f       	add	r22, r18
    1436:	73 1f       	adc	r23, r19
    1438:	84 1f       	adc	r24, r20
    143a:	95 1f       	adc	r25, r21
    143c:	a0 1d       	adc	r26, r0
    143e:	08 95       	ret

00001440 <__prologue_saves__>:
    1440:	2f 92       	push	r2
    1442:	3f 92       	push	r3
    1444:	4f 92       	push	r4
    1446:	5f 92       	push	r5
    1448:	6f 92       	push	r6
    144a:	7f 92       	push	r7
    144c:	8f 92       	push	r8
    144e:	9f 92       	push	r9
    1450:	af 92       	push	r10
    1452:	bf 92       	push	r11
    1454:	cf 92       	push	r12
    1456:	df 92       	push	r13
    1458:	ef 92       	push	r14
    145a:	ff 92       	push	r15
    145c:	0f 93       	push	r16
    145e:	1f 93       	push	r17
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	ca 1b       	sub	r28, r26
    146a:	db 0b       	sbc	r29, r27
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	09 94       	ijmp

00001478 <__epilogue_restores__>:
    1478:	2a 88       	ldd	r2, Y+18	; 0x12
    147a:	39 88       	ldd	r3, Y+17	; 0x11
    147c:	48 88       	ldd	r4, Y+16	; 0x10
    147e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1480:	6e 84       	ldd	r6, Y+14	; 0x0e
    1482:	7d 84       	ldd	r7, Y+13	; 0x0d
    1484:	8c 84       	ldd	r8, Y+12	; 0x0c
    1486:	9b 84       	ldd	r9, Y+11	; 0x0b
    1488:	aa 84       	ldd	r10, Y+10	; 0x0a
    148a:	b9 84       	ldd	r11, Y+9	; 0x09
    148c:	c8 84       	ldd	r12, Y+8	; 0x08
    148e:	df 80       	ldd	r13, Y+7	; 0x07
    1490:	ee 80       	ldd	r14, Y+6	; 0x06
    1492:	fd 80       	ldd	r15, Y+5	; 0x05
    1494:	0c 81       	ldd	r16, Y+4	; 0x04
    1496:	1b 81       	ldd	r17, Y+3	; 0x03
    1498:	aa 81       	ldd	r26, Y+2	; 0x02
    149a:	b9 81       	ldd	r27, Y+1	; 0x01
    149c:	ce 0f       	add	r28, r30
    149e:	d1 1d       	adc	r29, r1
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	ed 01       	movw	r28, r26
    14ac:	08 95       	ret

000014ae <_exit>:
    14ae:	f8 94       	cli

000014b0 <__stop_program>:
    14b0:	ff cf       	rjmp	.-2      	; 0x14b0 <__stop_program>
