
avr-dev-board-timer-example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d7a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000167  00800100  00800100  00000dee  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000dee  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000001d0  00000000  00000000  00000e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001094  00000000  00000000  00000fee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000007d2  00000000  00000000  00002082  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000854  00000000  00000000  00002854  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000484  00000000  00000000  000030a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000527  00000000  00000000  0000352c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000aae  00000000  00000000  00003a53  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000160  00000000  00000000  00004501  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 36       	cpi	r26, 0x67	; 103
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  9e:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:
	/* If more than 8-bit precision is used - read ADCL first and ADCH second. */
	return adc_result;
}

ISR(ADC_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
	adc_done = 1;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	80 93 02 01 	sts	0x0102, r24
	uint16_t temp = 0;
	temp |= ADCL;
  bc:	80 91 78 00 	lds	r24, 0x0078
	temp |= (ADCH << 8);
  c0:	20 91 79 00 	lds	r18, 0x0079
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	92 2b       	or	r25, r18
	adc_result = temp;
  c8:	90 93 01 01 	sts	0x0101, r25
  cc:	80 93 00 01 	sts	0x0100, r24

	//adc_result = (int)(adc_result + (float)((temp - adc_result)*0.20));
}
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	2f 91       	pop	r18
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <main>:
#include "timer.h"
#include "gpio.h"

int main(void)
{
	init_timer_1(PRESCALER8, 100);
  e0:	64 e6       	ldi	r22, 0x64	; 100
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <init_timer_1>
	set_pin_dir(&DDRD, GPIO_PIN5, OUTPUT);
  ea:	41 e0       	ldi	r20, 0x01	; 1
  ec:	65 e0       	ldi	r22, 0x05	; 5
  ee:	8a e2       	ldi	r24, 0x2A	; 42
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 ce 00 	call	0x19c	; 0x19c <set_pin_dir>
	set_pin_dir(&DDRD, GPIO_PIN6, OUTPUT);
  f6:	41 e0       	ldi	r20, 0x01	; 1
  f8:	66 e0       	ldi	r22, 0x06	; 6
  fa:	8a e2       	ldi	r24, 0x2A	; 42
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 ce 00 	call	0x19c	; 0x19c <set_pin_dir>
	set_pin_dir(&DDRD, GPIO_PIN7, OUTPUT);
 102:	41 e0       	ldi	r20, 0x01	; 1
 104:	67 e0       	ldi	r22, 0x07	; 7
 106:	8a e2       	ldi	r24, 0x2A	; 42
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 ce 00 	call	0x19c	; 0x19c <set_pin_dir>
	
    while(1){
		threads_loop_example();
 10e:	0e 94 76 03 	call	0x6ec	; 0x6ec <threads_loop_example>
 112:	fd cf       	rjmp	.-6      	; 0x10e <main+0x2e>

00000114 <get_count>:
	sei();
}

long get_count()
{
	return counts;
 114:	60 91 03 01 	lds	r22, 0x0103
 118:	70 91 04 01 	lds	r23, 0x0104
 11c:	80 91 05 01 	lds	r24, 0x0105
 120:	90 91 06 01 	lds	r25, 0x0106
}
 124:	08 95       	ret

00000126 <__vector_2>:

ISR(INT1_vect)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
 134:	af 93       	push	r26
 136:	bf 93       	push	r27
	if( EXT_PORT & (1 << EXT_CH_A) ) counts--;	/* CCW */
 138:	4a 9b       	sbis	0x09, 2	; 9
 13a:	14 c0       	rjmp	.+40     	; 0x164 <__vector_2+0x3e>
 13c:	80 91 03 01 	lds	r24, 0x0103
 140:	90 91 04 01 	lds	r25, 0x0104
 144:	a0 91 05 01 	lds	r26, 0x0105
 148:	b0 91 06 01 	lds	r27, 0x0106
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	a1 09       	sbc	r26, r1
 150:	b1 09       	sbc	r27, r1
 152:	80 93 03 01 	sts	0x0103, r24
 156:	90 93 04 01 	sts	0x0104, r25
 15a:	a0 93 05 01 	sts	0x0105, r26
 15e:	b0 93 06 01 	sts	0x0106, r27
 162:	13 c0       	rjmp	.+38     	; 0x18a <__vector_2+0x64>
	else counts++;								/* CW */
 164:	80 91 03 01 	lds	r24, 0x0103
 168:	90 91 04 01 	lds	r25, 0x0104
 16c:	a0 91 05 01 	lds	r26, 0x0105
 170:	b0 91 06 01 	lds	r27, 0x0106
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	a1 1d       	adc	r26, r1
 178:	b1 1d       	adc	r27, r1
 17a:	80 93 03 01 	sts	0x0103, r24
 17e:	90 93 04 01 	sts	0x0104, r25
 182:	a0 93 05 01 	sts	0x0105, r26
 186:	b0 93 06 01 	sts	0x0106, r27
}
 18a:	bf 91       	pop	r27
 18c:	af 91       	pop	r26
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <set_pin_dir>:

#include "gpio.h"

void set_pin_dir(volatile uint8_t *target_port, uint8_t pin_no, uint8_t dir)
{
	switch(dir){
 19c:	44 23       	and	r20, r20
 19e:	89 f0       	breq	.+34     	; 0x1c2 <set_pin_dir+0x26>
 1a0:	41 30       	cpi	r20, 0x01	; 1
 1a2:	f1 f4       	brne	.+60     	; 0x1e0 <set_pin_dir+0x44>
	case OUTPUT:
		(*target_port) |= (1 << pin_no);
 1a4:	fc 01       	movw	r30, r24
 1a6:	40 81       	ld	r20, Z
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	f9 01       	movw	r30, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <set_pin_dir+0x18>
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <set_pin_dir+0x14>
 1b8:	bf 01       	movw	r22, r30
 1ba:	64 2b       	or	r22, r20
 1bc:	fc 01       	movw	r30, r24
 1be:	60 83       	st	Z, r22
		break;
 1c0:	08 95       	ret
	case INPUT:
		(*target_port) &= ~(1 << pin_no);
 1c2:	fc 01       	movw	r30, r24
 1c4:	40 81       	ld	r20, Z
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	f9 01       	movw	r30, r18
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <set_pin_dir+0x36>
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <set_pin_dir+0x32>
 1d6:	bf 01       	movw	r22, r30
 1d8:	60 95       	com	r22
 1da:	64 23       	and	r22, r20
 1dc:	fc 01       	movw	r30, r24
 1de:	60 83       	st	Z, r22
 1e0:	08 95       	ret

000001e2 <set_pin>:
	}
}

void set_pin(volatile uint8_t *target_port, uint8_t pin_no)
{
	(*target_port) |= (1 << pin_no);
 1e2:	fc 01       	movw	r30, r24
 1e4:	40 81       	ld	r20, Z
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	f9 01       	movw	r30, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <set_pin+0x10>
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <set_pin+0xc>
 1f6:	bf 01       	movw	r22, r30
 1f8:	64 2b       	or	r22, r20
 1fa:	fc 01       	movw	r30, r24
 1fc:	60 83       	st	Z, r22
 1fe:	08 95       	ret

00000200 <clear_pin>:
}

void clear_pin(volatile uint8_t *target_port, uint8_t pin_no)
{
	(*target_port) &= ~(1 << pin_no);
 200:	fc 01       	movw	r30, r24
 202:	40 81       	ld	r20, Z
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	f9 01       	movw	r30, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <clear_pin+0x10>
 20c:	ee 0f       	add	r30, r30
 20e:	ff 1f       	adc	r31, r31
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <clear_pin+0xc>
 214:	bf 01       	movw	r22, r30
 216:	60 95       	com	r22
 218:	64 23       	and	r22, r20
 21a:	fc 01       	movw	r30, r24
 21c:	60 83       	st	Z, r22
 21e:	08 95       	ret

00000220 <toggle_pin>:
	if(tmpPort != 0) return 1;
	else return 0;
}

void toggle_pin(volatile uint8_t *target_port, uint8_t pin_no)
{
 220:	fc 01       	movw	r30, r24
	uint8_t tmpPort = (*(target_port)) & (1 << pin_no);
 222:	20 81       	ld	r18, Z
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	ac 01       	movw	r20, r24
 22a:	02 c0       	rjmp	.+4      	; 0x230 <toggle_pin+0x10>
 22c:	44 0f       	add	r20, r20
 22e:	55 1f       	adc	r21, r21
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <toggle_pin+0xc>
 234:	ba 01       	movw	r22, r20
 236:	82 2f       	mov	r24, r18
 238:	84 23       	and	r24, r20

	if(tmpPort != 0) (*target_port) &= ~(1 << pin_no);
 23a:	29 f0       	breq	.+10     	; 0x246 <toggle_pin+0x26>
 23c:	80 81       	ld	r24, Z
 23e:	60 95       	com	r22
 240:	68 23       	and	r22, r24
 242:	60 83       	st	Z, r22
 244:	08 95       	ret
	else (*target_port) |= (1 << pin_no);
 246:	80 81       	ld	r24, Z
 248:	68 2b       	or	r22, r24
 24a:	60 83       	st	Z, r22
 24c:	08 95       	ret

0000024e <__vector_16>:
{
	pid_flag = PID_ON;
}

ISR(TIMER0_OVF_vect)
{
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	4f 92       	push	r4
 25a:	5f 92       	push	r5
 25c:	6f 92       	push	r6
 25e:	7f 92       	push	r7
 260:	8f 92       	push	r8
 262:	9f 92       	push	r9
 264:	af 92       	push	r10
 266:	bf 92       	push	r11
 268:	cf 92       	push	r12
 26a:	df 92       	push	r13
 26c:	ef 92       	push	r14
 26e:	ff 92       	push	r15
 270:	0f 93       	push	r16
 272:	1f 93       	push	r17
 274:	2f 93       	push	r18
 276:	3f 93       	push	r19
 278:	4f 93       	push	r20
 27a:	5f 93       	push	r21
 27c:	6f 93       	push	r22
 27e:	7f 93       	push	r23
 280:	8f 93       	push	r24
 282:	9f 93       	push	r25
 284:	af 93       	push	r26
 286:	bf 93       	push	r27
 288:	ef 93       	push	r30
 28a:	ff 93       	push	r31
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	2c 97       	sbiw	r28, 0x0c	; 12
 296:	de bf       	out	0x3e, r29	; 62
 298:	cd bf       	out	0x3d, r28	; 61
	if(pid_flag == PID_ON) {
 29a:	80 91 07 01 	lds	r24, 0x0107
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	09 f0       	breq	.+2      	; 0x2a4 <__vector_16+0x56>
 2a2:	d7 c1       	rjmp	.+942    	; 0x652 <__vector_16+0x404>
		my_pid.pid_tick_sample++;
 2a4:	e1 e2       	ldi	r30, 0x21	; 33
 2a6:	f1 e0       	ldi	r31, 0x01	; 1
 2a8:	80 81       	ld	r24, Z
 2aa:	91 81       	ldd	r25, Z+1	; 0x01
 2ac:	a2 81       	ldd	r26, Z+2	; 0x02
 2ae:	b3 81       	ldd	r27, Z+3	; 0x03
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	a1 1d       	adc	r26, r1
 2b4:	b1 1d       	adc	r27, r1
 2b6:	80 83       	st	Z, r24
 2b8:	91 83       	std	Z+1, r25	; 0x01
 2ba:	a2 83       	std	Z+2, r26	; 0x02
 2bc:	b3 83       	std	Z+3, r27	; 0x03
		if(my_pid.pid_tick_sample >= my_pid.sample_period) {
 2be:	40 81       	ld	r20, Z
 2c0:	51 81       	ldd	r21, Z+1	; 0x01
 2c2:	62 81       	ldd	r22, Z+2	; 0x02
 2c4:	73 81       	ldd	r23, Z+3	; 0x03
 2c6:	80 91 19 01 	lds	r24, 0x0119
 2ca:	90 91 1a 01 	lds	r25, 0x011A
 2ce:	a0 91 1b 01 	lds	r26, 0x011B
 2d2:	b0 91 1c 01 	lds	r27, 0x011C
 2d6:	48 17       	cp	r20, r24
 2d8:	59 07       	cpc	r21, r25
 2da:	6a 07       	cpc	r22, r26
 2dc:	7b 07       	cpc	r23, r27
 2de:	0c f4       	brge	.+2      	; 0x2e2 <__vector_16+0x94>
 2e0:	64 c1       	rjmp	.+712    	; 0x5aa <__vector_16+0x35c>
			my_pid.pid_tick_sample = 0;
 2e2:	10 92 21 01 	sts	0x0121, r1
 2e6:	10 92 22 01 	sts	0x0122, r1
 2ea:	10 92 23 01 	sts	0x0123, r1
 2ee:	10 92 24 01 	sts	0x0124, r1
}

//Gets called in timer 0 interrupt routine.
static void pid()
{
	long count = get_count();
 2f2:	0e 94 8a 00 	call	0x114	; 0x114 <get_count>
 2f6:	6b 01       	movw	r12, r22
 2f8:	7c 01       	movw	r14, r24
	long temp = 0;
	my_pid.err = my_pid.ref_value - count;	/* Position difference. */
 2fa:	80 91 15 01 	lds	r24, 0x0115
 2fe:	90 91 16 01 	lds	r25, 0x0116
 302:	a0 91 17 01 	lds	r26, 0x0117
 306:	b0 91 18 01 	lds	r27, 0x0118
 30a:	8c 19       	sub	r24, r12
 30c:	9d 09       	sbc	r25, r13
 30e:	ae 09       	sbc	r26, r14
 310:	bf 09       	sbc	r27, r15
 312:	21 e3       	ldi	r18, 0x31	; 49
 314:	31 e0       	ldi	r19, 0x01	; 1
 316:	f9 01       	movw	r30, r18
 318:	80 83       	st	Z, r24
 31a:	91 83       	std	Z+1, r25	; 0x01
 31c:	a2 83       	std	Z+2, r26	; 0x02
 31e:	b3 83       	std	Z+3, r27	; 0x03

	my_pid.err_sum += my_pid.err;					/* Error sum. */
 320:	ed e3       	ldi	r30, 0x3D	; 61
 322:	f1 e0       	ldi	r31, 0x01	; 1
 324:	40 81       	ld	r20, Z
 326:	51 81       	ldd	r21, Z+1	; 0x01
 328:	62 81       	ldd	r22, Z+2	; 0x02
 32a:	73 81       	ldd	r23, Z+3	; 0x03
 32c:	d9 01       	movw	r26, r18
 32e:	8d 90       	ld	r8, X+
 330:	9d 90       	ld	r9, X+
 332:	ad 90       	ld	r10, X+
 334:	bc 90       	ld	r11, X
 336:	d5 01       	movw	r26, r10
 338:	c4 01       	movw	r24, r8
 33a:	84 0f       	add	r24, r20
 33c:	95 1f       	adc	r25, r21
 33e:	a6 1f       	adc	r26, r22
 340:	b7 1f       	adc	r27, r23
 342:	80 83       	st	Z, r24
 344:	91 83       	std	Z+1, r25	; 0x01
 346:	a2 83       	std	Z+2, r26	; 0x02
 348:	b3 83       	std	Z+3, r27	; 0x03
	if(my_pid.err_sum > 200) my_pid.err_sum = 200;	/* Anti wind-up */
 34a:	80 81       	ld	r24, Z
 34c:	91 81       	ldd	r25, Z+1	; 0x01
 34e:	a2 81       	ldd	r26, Z+2	; 0x02
 350:	b3 81       	ldd	r27, Z+3	; 0x03
 352:	89 3c       	cpi	r24, 0xC9	; 201
 354:	91 05       	cpc	r25, r1
 356:	a1 05       	cpc	r26, r1
 358:	b1 05       	cpc	r27, r1
 35a:	64 f0       	brlt	.+24     	; 0x374 <__vector_16+0x126>
 35c:	88 ec       	ldi	r24, 0xC8	; 200
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	a0 e0       	ldi	r26, 0x00	; 0
 362:	b0 e0       	ldi	r27, 0x00	; 0
 364:	80 93 3d 01 	sts	0x013D, r24
 368:	90 93 3e 01 	sts	0x013E, r25
 36c:	a0 93 3f 01 	sts	0x013F, r26
 370:	b0 93 40 01 	sts	0x0140, r27

	my_pid.err_diff = (long)((my_pid.err - my_pid.last_err)*my_pid.sample_peiod_opt);	/* 1st order error differential. */
 374:	0f 2e       	mov	r0, r31
 376:	f1 e3       	ldi	r31, 0x31	; 49
 378:	6f 2e       	mov	r6, r31
 37a:	f1 e0       	ldi	r31, 0x01	; 1
 37c:	7f 2e       	mov	r7, r31
 37e:	f0 2d       	mov	r31, r0
 380:	f3 01       	movw	r30, r6
 382:	40 81       	ld	r20, Z
 384:	51 81       	ldd	r21, Z+1	; 0x01
 386:	62 81       	ldd	r22, Z+2	; 0x02
 388:	73 81       	ldd	r23, Z+3	; 0x03
 38a:	80 91 35 01 	lds	r24, 0x0135
 38e:	90 91 36 01 	lds	r25, 0x0136
 392:	a0 91 37 01 	lds	r26, 0x0137
 396:	b0 91 38 01 	lds	r27, 0x0138
 39a:	80 90 1d 01 	lds	r8, 0x011D
 39e:	90 90 1e 01 	lds	r9, 0x011E
 3a2:	a0 90 1f 01 	lds	r10, 0x011F
 3a6:	b0 90 20 01 	lds	r11, 0x0120
 3aa:	8a 01       	movw	r16, r20
 3ac:	9b 01       	movw	r18, r22
 3ae:	08 1b       	sub	r16, r24
 3b0:	19 0b       	sbc	r17, r25
 3b2:	2a 0b       	sbc	r18, r26
 3b4:	3b 0b       	sbc	r19, r27
 3b6:	c9 01       	movw	r24, r18
 3b8:	b8 01       	movw	r22, r16
 3ba:	0e 94 cc 05 	call	0xb98	; 0xb98 <__floatsisf>
 3be:	a5 01       	movw	r20, r10
 3c0:	94 01       	movw	r18, r8
 3c2:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__mulsf3>
 3c6:	0e 94 99 05 	call	0xb32	; 0xb32 <__fixsfsi>
 3ca:	e9 e3       	ldi	r30, 0x39	; 57
 3cc:	f1 e0       	ldi	r31, 0x01	; 1
 3ce:	60 83       	st	Z, r22
 3d0:	71 83       	std	Z+1, r23	; 0x01
 3d2:	82 83       	std	Z+2, r24	; 0x02
 3d4:	93 83       	std	Z+3, r25	; 0x03

	/* PID output */
	temp = my_pid.kp*my_pid.err + my_pid.ki*my_pid.err_sum + my_pid.kd*my_pid.err_diff;
 3d6:	80 90 09 01 	lds	r8, 0x0109
 3da:	90 90 0a 01 	lds	r9, 0x010A
 3de:	a0 90 0b 01 	lds	r10, 0x010B
 3e2:	b0 90 0c 01 	lds	r11, 0x010C
 3e6:	d3 01       	movw	r26, r6
 3e8:	6d 91       	ld	r22, X+
 3ea:	7d 91       	ld	r23, X+
 3ec:	8d 91       	ld	r24, X+
 3ee:	9c 91       	ld	r25, X
 3f0:	00 91 0d 01 	lds	r16, 0x010D
 3f4:	10 91 0e 01 	lds	r17, 0x010E
 3f8:	20 91 0f 01 	lds	r18, 0x010F
 3fc:	30 91 10 01 	lds	r19, 0x0110
 400:	09 83       	std	Y+1, r16	; 0x01
 402:	1a 83       	std	Y+2, r17	; 0x02
 404:	2b 83       	std	Y+3, r18	; 0x03
 406:	3c 83       	std	Y+4, r19	; 0x04
 408:	40 90 3d 01 	lds	r4, 0x013D
 40c:	50 90 3e 01 	lds	r5, 0x013E
 410:	60 90 3f 01 	lds	r6, 0x013F
 414:	70 90 40 01 	lds	r7, 0x0140
 418:	20 91 11 01 	lds	r18, 0x0111
 41c:	30 91 12 01 	lds	r19, 0x0112
 420:	40 91 13 01 	lds	r20, 0x0113
 424:	50 91 14 01 	lds	r21, 0x0114
 428:	2d 83       	std	Y+5, r18	; 0x05
 42a:	3e 83       	std	Y+6, r19	; 0x06
 42c:	4f 83       	std	Y+7, r20	; 0x07
 42e:	58 87       	std	Y+8, r21	; 0x08
 430:	00 81       	ld	r16, Z
 432:	11 81       	ldd	r17, Z+1	; 0x01
 434:	22 81       	ldd	r18, Z+2	; 0x02
 436:	33 81       	ldd	r19, Z+3	; 0x03
 438:	09 87       	std	Y+9, r16	; 0x09
 43a:	1a 87       	std	Y+10, r17	; 0x0a
 43c:	2b 87       	std	Y+11, r18	; 0x0b
 43e:	3c 87       	std	Y+12, r19	; 0x0c
 440:	0e 94 cc 05 	call	0xb98	; 0xb98 <__floatsisf>
 444:	9b 01       	movw	r18, r22
 446:	ac 01       	movw	r20, r24
 448:	c5 01       	movw	r24, r10
 44a:	b4 01       	movw	r22, r8
 44c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__mulsf3>
 450:	4b 01       	movw	r8, r22
 452:	5c 01       	movw	r10, r24
 454:	c3 01       	movw	r24, r6
 456:	b2 01       	movw	r22, r4
 458:	0e 94 cc 05 	call	0xb98	; 0xb98 <__floatsisf>
 45c:	9b 01       	movw	r18, r22
 45e:	ac 01       	movw	r20, r24
 460:	69 81       	ldd	r22, Y+1	; 0x01
 462:	7a 81       	ldd	r23, Y+2	; 0x02
 464:	8b 81       	ldd	r24, Y+3	; 0x03
 466:	9c 81       	ldd	r25, Y+4	; 0x04
 468:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__mulsf3>
 46c:	9b 01       	movw	r18, r22
 46e:	ac 01       	movw	r20, r24
 470:	c5 01       	movw	r24, r10
 472:	b4 01       	movw	r22, r8
 474:	0e 94 35 05 	call	0xa6a	; 0xa6a <__addsf3>
 478:	4b 01       	movw	r8, r22
 47a:	5c 01       	movw	r10, r24
 47c:	69 85       	ldd	r22, Y+9	; 0x09
 47e:	7a 85       	ldd	r23, Y+10	; 0x0a
 480:	8b 85       	ldd	r24, Y+11	; 0x0b
 482:	9c 85       	ldd	r25, Y+12	; 0x0c
 484:	0e 94 cc 05 	call	0xb98	; 0xb98 <__floatsisf>
 488:	9b 01       	movw	r18, r22
 48a:	ac 01       	movw	r20, r24
 48c:	6d 81       	ldd	r22, Y+5	; 0x05
 48e:	7e 81       	ldd	r23, Y+6	; 0x06
 490:	8f 81       	ldd	r24, Y+7	; 0x07
 492:	98 85       	ldd	r25, Y+8	; 0x08
 494:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__mulsf3>
 498:	9b 01       	movw	r18, r22
 49a:	ac 01       	movw	r20, r24
 49c:	c5 01       	movw	r24, r10
 49e:	b4 01       	movw	r22, r8
 4a0:	0e 94 35 05 	call	0xa6a	; 0xa6a <__addsf3>
 4a4:	0e 94 99 05 	call	0xb32	; 0xb32 <__fixsfsi>
	if(temp > 0) {
 4a8:	16 16       	cp	r1, r22
 4aa:	17 06       	cpc	r1, r23
 4ac:	18 06       	cpc	r1, r24
 4ae:	19 06       	cpc	r1, r25
 4b0:	6c f5       	brge	.+90     	; 0x50c <__vector_16+0x2be>
		my_pid.dir = CW;
 4b2:	10 92 08 01 	sts	0x0108, r1
		if(temp > my_pid.pwm_period) my_pid.pwm_top_val = my_pid.pwm_period;
 4b6:	80 90 29 01 	lds	r8, 0x0129
 4ba:	90 90 2a 01 	lds	r9, 0x012A
 4be:	a0 90 2b 01 	lds	r10, 0x012B
 4c2:	b0 90 2c 01 	lds	r11, 0x012C
 4c6:	86 16       	cp	r8, r22
 4c8:	97 06       	cpc	r9, r23
 4ca:	a8 06       	cpc	r10, r24
 4cc:	b9 06       	cpc	r11, r25
 4ce:	8c f4       	brge	.+34     	; 0x4f2 <__vector_16+0x2a4>
 4d0:	80 91 29 01 	lds	r24, 0x0129
 4d4:	90 91 2a 01 	lds	r25, 0x012A
 4d8:	a0 91 2b 01 	lds	r26, 0x012B
 4dc:	b0 91 2c 01 	lds	r27, 0x012C
 4e0:	80 93 25 01 	sts	0x0125, r24
 4e4:	90 93 26 01 	sts	0x0126, r25
 4e8:	a0 93 27 01 	sts	0x0127, r26
 4ec:	b0 93 28 01 	sts	0x0128, r27
 4f0:	44 c0       	rjmp	.+136    	; 0x57a <__vector_16+0x32c>
		else my_pid.pwm_top_val = (uint16_t)(temp);
 4f2:	dc 01       	movw	r26, r24
 4f4:	cb 01       	movw	r24, r22
 4f6:	aa 27       	eor	r26, r26
 4f8:	bb 27       	eor	r27, r27
 4fa:	80 93 25 01 	sts	0x0125, r24
 4fe:	90 93 26 01 	sts	0x0126, r25
 502:	a0 93 27 01 	sts	0x0127, r26
 506:	b0 93 28 01 	sts	0x0128, r27
 50a:	37 c0       	rjmp	.+110    	; 0x57a <__vector_16+0x32c>
	} else {
		my_pid.dir = CCW;
 50c:	21 e0       	ldi	r18, 0x01	; 1
 50e:	20 93 08 01 	sts	0x0108, r18
		if(temp < -my_pid.pwm_period) my_pid.pwm_top_val = my_pid.pwm_period;
 512:	80 90 29 01 	lds	r8, 0x0129
 516:	90 90 2a 01 	lds	r9, 0x012A
 51a:	a0 90 2b 01 	lds	r10, 0x012B
 51e:	b0 90 2c 01 	lds	r11, 0x012C
 522:	b0 94       	com	r11
 524:	a0 94       	com	r10
 526:	90 94       	com	r9
 528:	80 94       	com	r8
 52a:	81 1c       	adc	r8, r1
 52c:	91 1c       	adc	r9, r1
 52e:	a1 1c       	adc	r10, r1
 530:	b1 1c       	adc	r11, r1
 532:	68 15       	cp	r22, r8
 534:	79 05       	cpc	r23, r9
 536:	8a 05       	cpc	r24, r10
 538:	9b 05       	cpc	r25, r11
 53a:	8c f4       	brge	.+34     	; 0x55e <__vector_16+0x310>
 53c:	80 91 29 01 	lds	r24, 0x0129
 540:	90 91 2a 01 	lds	r25, 0x012A
 544:	a0 91 2b 01 	lds	r26, 0x012B
 548:	b0 91 2c 01 	lds	r27, 0x012C
 54c:	80 93 25 01 	sts	0x0125, r24
 550:	90 93 26 01 	sts	0x0126, r25
 554:	a0 93 27 01 	sts	0x0127, r26
 558:	b0 93 28 01 	sts	0x0128, r27
 55c:	0e c0       	rjmp	.+28     	; 0x57a <__vector_16+0x32c>
		else my_pid.pwm_top_val = (uint16_t)(-temp);
 55e:	71 95       	neg	r23
 560:	61 95       	neg	r22
 562:	71 09       	sbc	r23, r1
 564:	cb 01       	movw	r24, r22
 566:	a0 e0       	ldi	r26, 0x00	; 0
 568:	b0 e0       	ldi	r27, 0x00	; 0
 56a:	80 93 25 01 	sts	0x0125, r24
 56e:	90 93 26 01 	sts	0x0126, r25
 572:	a0 93 27 01 	sts	0x0127, r26
 576:	b0 93 28 01 	sts	0x0128, r27
	}
		

	/* Memorize last values. */
	my_pid.last_count = count;
 57a:	c0 92 41 01 	sts	0x0141, r12
 57e:	d0 92 42 01 	sts	0x0142, r13
 582:	e0 92 43 01 	sts	0x0143, r14
 586:	f0 92 44 01 	sts	0x0144, r15
	my_pid.last_err = my_pid.err;
 58a:	80 91 31 01 	lds	r24, 0x0131
 58e:	90 91 32 01 	lds	r25, 0x0132
 592:	a0 91 33 01 	lds	r26, 0x0133
 596:	b0 91 34 01 	lds	r27, 0x0134
 59a:	80 93 35 01 	sts	0x0135, r24
 59e:	90 93 36 01 	sts	0x0136, r25
 5a2:	a0 93 37 01 	sts	0x0137, r26
 5a6:	b0 93 38 01 	sts	0x0138, r27
		if(my_pid.pid_tick_sample >= my_pid.sample_period) {
			my_pid.pid_tick_sample = 0;
			pid();
		}

		my_pid.pid_pwm_tick++;
 5aa:	ed e2       	ldi	r30, 0x2D	; 45
 5ac:	f1 e0       	ldi	r31, 0x01	; 1
 5ae:	80 81       	ld	r24, Z
 5b0:	91 81       	ldd	r25, Z+1	; 0x01
 5b2:	a2 81       	ldd	r26, Z+2	; 0x02
 5b4:	b3 81       	ldd	r27, Z+3	; 0x03
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	a1 1d       	adc	r26, r1
 5ba:	b1 1d       	adc	r27, r1
 5bc:	80 83       	st	Z, r24
 5be:	91 83       	std	Z+1, r25	; 0x01
 5c0:	a2 83       	std	Z+2, r26	; 0x02
 5c2:	b3 83       	std	Z+3, r27	; 0x03
		if(my_pid.pid_pwm_tick >= my_pid.pwm_period && my_pid.pwm_top_val > 0) {
 5c4:	40 81       	ld	r20, Z
 5c6:	51 81       	ldd	r21, Z+1	; 0x01
 5c8:	62 81       	ldd	r22, Z+2	; 0x02
 5ca:	73 81       	ldd	r23, Z+3	; 0x03
 5cc:	80 91 29 01 	lds	r24, 0x0129
 5d0:	90 91 2a 01 	lds	r25, 0x012A
 5d4:	a0 91 2b 01 	lds	r26, 0x012B
 5d8:	b0 91 2c 01 	lds	r27, 0x012C
 5dc:	48 17       	cp	r20, r24
 5de:	59 07       	cpc	r21, r25
 5e0:	6a 07       	cpc	r22, r26
 5e2:	7b 07       	cpc	r23, r27
 5e4:	fc f0       	brlt	.+62     	; 0x624 <__vector_16+0x3d6>
 5e6:	80 91 25 01 	lds	r24, 0x0125
 5ea:	90 91 26 01 	lds	r25, 0x0126
 5ee:	a0 91 27 01 	lds	r26, 0x0127
 5f2:	b0 91 28 01 	lds	r27, 0x0128
 5f6:	18 16       	cp	r1, r24
 5f8:	19 06       	cpc	r1, r25
 5fa:	1a 06       	cpc	r1, r26
 5fc:	1b 06       	cpc	r1, r27
 5fe:	94 f4       	brge	.+36     	; 0x624 <__vector_16+0x3d6>
			my_pid.pid_pwm_tick = 0;
 600:	10 92 2d 01 	sts	0x012D, r1
 604:	10 92 2e 01 	sts	0x012E, r1
 608:	10 92 2f 01 	sts	0x012F, r1
 60c:	10 92 30 01 	sts	0x0130, r1
			if(my_pid.dir == CW){
 610:	80 91 08 01 	lds	r24, 0x0108
 614:	81 11       	cpse	r24, r1
 616:	03 c0       	rjmp	.+6      	; 0x61e <__vector_16+0x3d0>
				MOT_PORT |= (1 << MOT_PIN0);
 618:	29 9a       	sbi	0x05, 1	; 5
				MOT_PORT &= ~(1 << MOT_PIN1);
 61a:	2a 98       	cbi	0x05, 2	; 5
 61c:	1a c0       	rjmp	.+52     	; 0x652 <__vector_16+0x404>
			} else {
				MOT_PORT |= (1 << MOT_PIN1);
 61e:	2a 9a       	sbi	0x05, 2	; 5
				MOT_PORT &= ~(1 << MOT_PIN0);	
 620:	29 98       	cbi	0x05, 1	; 5
 622:	17 c0       	rjmp	.+46     	; 0x652 <__vector_16+0x404>
			}
		} else if (my_pid.pid_pwm_tick >= my_pid.pwm_top_val) {
 624:	40 91 2d 01 	lds	r20, 0x012D
 628:	50 91 2e 01 	lds	r21, 0x012E
 62c:	60 91 2f 01 	lds	r22, 0x012F
 630:	70 91 30 01 	lds	r23, 0x0130
 634:	80 91 25 01 	lds	r24, 0x0125
 638:	90 91 26 01 	lds	r25, 0x0126
 63c:	a0 91 27 01 	lds	r26, 0x0127
 640:	b0 91 28 01 	lds	r27, 0x0128
 644:	48 17       	cp	r20, r24
 646:	59 07       	cpc	r21, r25
 648:	6a 07       	cpc	r22, r26
 64a:	7b 07       	cpc	r23, r27
 64c:	14 f0       	brlt	.+4      	; 0x652 <__vector_16+0x404>
			MOT_PORT &= ~(1 << MOT_PIN0);
 64e:	29 98       	cbi	0x05, 1	; 5
			MOT_PORT &= ~(1 << MOT_PIN1);
 650:	2a 98       	cbi	0x05, 2	; 5
		}
	}
}
 652:	2c 96       	adiw	r28, 0x0c	; 12
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	f8 94       	cli
 658:	de bf       	out	0x3e, r29	; 62
 65a:	0f be       	out	0x3f, r0	; 63
 65c:	cd bf       	out	0x3d, r28	; 61
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	ff 91       	pop	r31
 664:	ef 91       	pop	r30
 666:	bf 91       	pop	r27
 668:	af 91       	pop	r26
 66a:	9f 91       	pop	r25
 66c:	8f 91       	pop	r24
 66e:	7f 91       	pop	r23
 670:	6f 91       	pop	r22
 672:	5f 91       	pop	r21
 674:	4f 91       	pop	r20
 676:	3f 91       	pop	r19
 678:	2f 91       	pop	r18
 67a:	1f 91       	pop	r17
 67c:	0f 91       	pop	r16
 67e:	ff 90       	pop	r15
 680:	ef 90       	pop	r14
 682:	df 90       	pop	r13
 684:	cf 90       	pop	r12
 686:	bf 90       	pop	r11
 688:	af 90       	pop	r10
 68a:	9f 90       	pop	r9
 68c:	8f 90       	pop	r8
 68e:	7f 90       	pop	r7
 690:	6f 90       	pop	r6
 692:	5f 90       	pop	r5
 694:	4f 90       	pop	r4
 696:	0f 90       	pop	r0
 698:	0f be       	out	0x3f, r0	; 63
 69a:	0f 90       	pop	r0
 69c:	1f 90       	pop	r1
 69e:	18 95       	reti

000006a0 <init_timer_1>:
{
	uint16_t temp;

	temp = 0;
	temp |= (1 << WGM10 | 1 << WGM11);	/* Fast PWM mode - TOP is OCR1A, auto restart. */
	TCCR1A = temp;
 6a0:	93 e0       	ldi	r25, 0x03	; 3
 6a2:	90 93 80 00 	sts	0x0080, r25

	temp = 0;
	temp |= (1 << WGM12 | 1 << WGM13);	/* Fast PWM mode - TOP is OCR1A, auto restart. */
	temp |= (prescaler << CS10);		/* CS2:0 = 010 - Prescaler set to 8. */
 6a6:	88 61       	ori	r24, 0x18	; 24
	TCCR1B = temp;
 6a8:	80 93 81 00 	sts	0x0081, r24

	temp = 0;
	temp |= (1 << TOIE0);
	TIMSK1 = temp;
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	80 93 6f 00 	sts	0x006F, r24

	OCR1A = topw_val;
 6b2:	70 93 89 00 	sts	0x0089, r23
 6b6:	60 93 88 00 	sts	0x0088, r22

	sei();
 6ba:	78 94       	sei
 6bc:	08 95       	ret

000006be <pause_loop>:
	}
}

void pause_loop(uint16_t pause)
{
	pause_time = pause;
 6be:	a0 e0       	ldi	r26, 0x00	; 0
 6c0:	b0 e0       	ldi	r27, 0x00	; 0
 6c2:	80 93 47 01 	sts	0x0147, r24
 6c6:	90 93 48 01 	sts	0x0148, r25
 6ca:	a0 93 49 01 	sts	0x0149, r26
 6ce:	b0 93 4a 01 	sts	0x014A, r27
	while(pause_time);
 6d2:	80 91 47 01 	lds	r24, 0x0147
 6d6:	90 91 48 01 	lds	r25, 0x0148
 6da:	a0 91 49 01 	lds	r26, 0x0149
 6de:	b0 91 4a 01 	lds	r27, 0x014A
 6e2:	89 2b       	or	r24, r25
 6e4:	8a 2b       	or	r24, r26
 6e6:	8b 2b       	or	r24, r27
 6e8:	a1 f7       	brne	.-24     	; 0x6d2 <pause_loop+0x14>
}
 6ea:	08 95       	ret

000006ec <threads_loop_example>:

void threads_loop_example()
{
	switch(fsm_step){
 6ec:	80 91 45 01 	lds	r24, 0x0145
 6f0:	81 30       	cpi	r24, 0x01	; 1
 6f2:	51 f1       	breq	.+84     	; 0x748 <threads_loop_example+0x5c>
 6f4:	20 f0       	brcs	.+8      	; 0x6fe <threads_loop_example+0x12>
 6f6:	82 30       	cpi	r24, 0x02	; 2
 6f8:	09 f4       	brne	.+2      	; 0x6fc <threads_loop_example+0x10>
 6fa:	4b c0       	rjmp	.+150    	; 0x792 <threads_loop_example+0xa6>
 6fc:	08 95       	ret

int get_timer(uint8_t timer_num)
{
	switch(timer_num) {
	case 0:
		return timer_node_0;
 6fe:	80 91 53 01 	lds	r24, 0x0153
 702:	90 91 54 01 	lds	r25, 0x0154
 706:	a0 91 55 01 	lds	r26, 0x0155
 70a:	b0 91 56 01 	lds	r27, 0x0156

void threads_loop_example()
{
	switch(fsm_step){
	case 0:
		if(!get_timer(0)) {
 70e:	89 2b       	or	r24, r25
 710:	a9 f4       	brne	.+42     	; 0x73c <threads_loop_example+0x50>
			toggle_pin(&PORTD, GPIO_PIN6);
 712:	66 e0       	ldi	r22, 0x06	; 6
 714:	8b e2       	ldi	r24, 0x2B	; 43
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	0e 94 10 01 	call	0x220	; 0x220 <toggle_pin>

void set_timer(uint8_t timer_num, uint32_t time)
{
	switch(timer_num) {
	case 0:
		timer_node_0 = time;
 71c:	8a ef       	ldi	r24, 0xFA	; 250
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	a0 e0       	ldi	r26, 0x00	; 0
 722:	b0 e0       	ldi	r27, 0x00	; 0
 724:	80 93 53 01 	sts	0x0153, r24
 728:	90 93 54 01 	sts	0x0154, r25
 72c:	a0 93 55 01 	sts	0x0155, r26
 730:	b0 93 56 01 	sts	0x0156, r27
	switch(fsm_step){
	case 0:
		if(!get_timer(0)) {
			toggle_pin(&PORTD, GPIO_PIN6);
			set_timer(0, 250);
			pause_loop(1);
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	0e 94 5f 03 	call	0x6be	; 0x6be <pause_loop>
		}
		fsm_step++;
 73c:	80 91 45 01 	lds	r24, 0x0145
 740:	8f 5f       	subi	r24, 0xFF	; 255
 742:	80 93 45 01 	sts	0x0145, r24
		break;
 746:	08 95       	ret
{
	switch(timer_num) {
	case 0:
		return timer_node_0;
	case 1:
		return timer_node_1;
 748:	80 91 4f 01 	lds	r24, 0x014F
 74c:	90 91 50 01 	lds	r25, 0x0150
 750:	a0 91 51 01 	lds	r26, 0x0151
 754:	b0 91 52 01 	lds	r27, 0x0152
			pause_loop(1);
		}
		fsm_step++;
		break;
	case 1:
		if(!get_timer(1)) {
 758:	89 2b       	or	r24, r25
 75a:	a9 f4       	brne	.+42     	; 0x786 <threads_loop_example+0x9a>
			toggle_pin(&PORTD, GPIO_PIN5);
 75c:	65 e0       	ldi	r22, 0x05	; 5
 75e:	8b e2       	ldi	r24, 0x2B	; 43
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	0e 94 10 01 	call	0x220	; 0x220 <toggle_pin>
	switch(timer_num) {
	case 0:
		timer_node_0 = time;
		break;
	case 1:
		timer_node_1 = time;
 766:	84 ef       	ldi	r24, 0xF4	; 244
 768:	91 e0       	ldi	r25, 0x01	; 1
 76a:	a0 e0       	ldi	r26, 0x00	; 0
 76c:	b0 e0       	ldi	r27, 0x00	; 0
 76e:	80 93 4f 01 	sts	0x014F, r24
 772:	90 93 50 01 	sts	0x0150, r25
 776:	a0 93 51 01 	sts	0x0151, r26
 77a:	b0 93 52 01 	sts	0x0152, r27
		break;
	case 1:
		if(!get_timer(1)) {
			toggle_pin(&PORTD, GPIO_PIN5);
			set_timer(1, 500);
			pause_loop(1);
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	0e 94 5f 03 	call	0x6be	; 0x6be <pause_loop>
		}
		fsm_step++;
 786:	80 91 45 01 	lds	r24, 0x0145
 78a:	8f 5f       	subi	r24, 0xFF	; 255
 78c:	80 93 45 01 	sts	0x0145, r24
		break;
 790:	08 95       	ret
	case 0:
		return timer_node_0;
	case 1:
		return timer_node_1;
	case 2:
		return timer_node_2;
 792:	80 91 4b 01 	lds	r24, 0x014B
 796:	90 91 4c 01 	lds	r25, 0x014C
 79a:	a0 91 4d 01 	lds	r26, 0x014D
 79e:	b0 91 4e 01 	lds	r27, 0x014E
			pause_loop(1);
		}
		fsm_step++;
		break;
	case 2:
		if(!get_timer(2)) {
 7a2:	89 2b       	or	r24, r25
 7a4:	a9 f4       	brne	.+42     	; 0x7d0 <threads_loop_example+0xe4>
			toggle_pin(&PORTD, GPIO_PIN7);
 7a6:	67 e0       	ldi	r22, 0x07	; 7
 7a8:	8b e2       	ldi	r24, 0x2B	; 43
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	0e 94 10 01 	call	0x220	; 0x220 <toggle_pin>
		break;
	case 1:
		timer_node_1 = time;
		break;
	case 2:
		timer_node_2 = time;
 7b0:	88 ee       	ldi	r24, 0xE8	; 232
 7b2:	93 e0       	ldi	r25, 0x03	; 3
 7b4:	a0 e0       	ldi	r26, 0x00	; 0
 7b6:	b0 e0       	ldi	r27, 0x00	; 0
 7b8:	80 93 4b 01 	sts	0x014B, r24
 7bc:	90 93 4c 01 	sts	0x014C, r25
 7c0:	a0 93 4d 01 	sts	0x014D, r26
 7c4:	b0 93 4e 01 	sts	0x014E, r27
		break;
	case 2:
		if(!get_timer(2)) {
			toggle_pin(&PORTD, GPIO_PIN7);
			set_timer(2, 1000);
			pause_loop(1);
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 94 5f 03 	call	0x6be	; 0x6be <pause_loop>
		}
		fsm_step = 0;
 7d0:	10 92 45 01 	sts	0x0145, r1
 7d4:	08 95       	ret

000007d6 <__vector_13>:
		break;
	}
}

ISR(TIMER1_OVF_vect)
{
 7d6:	1f 92       	push	r1
 7d8:	0f 92       	push	r0
 7da:	0f b6       	in	r0, 0x3f	; 63
 7dc:	0f 92       	push	r0
 7de:	11 24       	eor	r1, r1
 7e0:	2f 93       	push	r18
 7e2:	3f 93       	push	r19
 7e4:	4f 93       	push	r20
 7e6:	5f 93       	push	r21
 7e8:	6f 93       	push	r22
 7ea:	7f 93       	push	r23
 7ec:	8f 93       	push	r24
 7ee:	9f 93       	push	r25
 7f0:	af 93       	push	r26
 7f2:	bf 93       	push	r27
 7f4:	ef 93       	push	r30
 7f6:	ff 93       	push	r31
	if(pwm_flag == PWM_ON) {
 7f8:	80 91 46 01 	lds	r24, 0x0146
 7fc:	81 30       	cpi	r24, 0x01	; 1
 7fe:	09 f0       	breq	.+2      	; 0x802 <__vector_13+0x2c>
 800:	58 c0       	rjmp	.+176    	; 0x8b2 <__vector_13+0xdc>
		my_pwm.pwm_tick++;
 802:	e2 e6       	ldi	r30, 0x62	; 98
 804:	f1 e0       	ldi	r31, 0x01	; 1
 806:	80 81       	ld	r24, Z
 808:	91 81       	ldd	r25, Z+1	; 0x01
 80a:	a2 81       	ldd	r26, Z+2	; 0x02
 80c:	b3 81       	ldd	r27, Z+3	; 0x03
 80e:	01 96       	adiw	r24, 0x01	; 1
 810:	a1 1d       	adc	r26, r1
 812:	b1 1d       	adc	r27, r1
 814:	80 83       	st	Z, r24
 816:	91 83       	std	Z+1, r25	; 0x01
 818:	a2 83       	std	Z+2, r26	; 0x02
 81a:	b3 83       	std	Z+3, r27	; 0x03
		if(my_pwm.pwm_tick >= my_pwm.period && my_pwm.top_val > 0) {
 81c:	40 81       	ld	r20, Z
 81e:	51 81       	ldd	r21, Z+1	; 0x01
 820:	62 81       	ldd	r22, Z+2	; 0x02
 822:	73 81       	ldd	r23, Z+3	; 0x03
 824:	80 91 5a 01 	lds	r24, 0x015A
 828:	90 91 5b 01 	lds	r25, 0x015B
 82c:	a0 91 5c 01 	lds	r26, 0x015C
 830:	b0 91 5d 01 	lds	r27, 0x015D
 834:	48 17       	cp	r20, r24
 836:	59 07       	cpc	r21, r25
 838:	6a 07       	cpc	r22, r26
 83a:	7b 07       	cpc	r23, r27
 83c:	e8 f0       	brcs	.+58     	; 0x878 <__vector_13+0xa2>
 83e:	80 91 5e 01 	lds	r24, 0x015E
 842:	90 91 5f 01 	lds	r25, 0x015F
 846:	a0 91 60 01 	lds	r26, 0x0160
 84a:	b0 91 61 01 	lds	r27, 0x0161
 84e:	89 2b       	or	r24, r25
 850:	8a 2b       	or	r24, r26
 852:	8b 2b       	or	r24, r27
 854:	89 f0       	breq	.+34     	; 0x878 <__vector_13+0xa2>
			set_pin(my_pwm.port, my_pwm.pin);
 856:	60 91 59 01 	lds	r22, 0x0159
 85a:	80 91 57 01 	lds	r24, 0x0157
 85e:	90 91 58 01 	lds	r25, 0x0158
 862:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <set_pin>
			my_pwm.pwm_tick = 0;
 866:	10 92 62 01 	sts	0x0162, r1
 86a:	10 92 63 01 	sts	0x0163, r1
 86e:	10 92 64 01 	sts	0x0164, r1
 872:	10 92 65 01 	sts	0x0165, r1
 876:	1d c0       	rjmp	.+58     	; 0x8b2 <__vector_13+0xdc>
		} else if(my_pwm.pwm_tick >= my_pwm.top_val) {
 878:	40 91 62 01 	lds	r20, 0x0162
 87c:	50 91 63 01 	lds	r21, 0x0163
 880:	60 91 64 01 	lds	r22, 0x0164
 884:	70 91 65 01 	lds	r23, 0x0165
 888:	80 91 5e 01 	lds	r24, 0x015E
 88c:	90 91 5f 01 	lds	r25, 0x015F
 890:	a0 91 60 01 	lds	r26, 0x0160
 894:	b0 91 61 01 	lds	r27, 0x0161
 898:	48 17       	cp	r20, r24
 89a:	59 07       	cpc	r21, r25
 89c:	6a 07       	cpc	r22, r26
 89e:	7b 07       	cpc	r23, r27
 8a0:	40 f0       	brcs	.+16     	; 0x8b2 <__vector_13+0xdc>
			clear_pin(my_pwm.port, my_pwm.pin);
 8a2:	60 91 59 01 	lds	r22, 0x0159
 8a6:	80 91 57 01 	lds	r24, 0x0157
 8aa:	90 91 58 01 	lds	r25, 0x0158
 8ae:	0e 94 00 01 	call	0x200	; 0x200 <clear_pin>
		}
	}

	if(timer_node_0 > 0) timer_node_0--;
 8b2:	80 91 53 01 	lds	r24, 0x0153
 8b6:	90 91 54 01 	lds	r25, 0x0154
 8ba:	a0 91 55 01 	lds	r26, 0x0155
 8be:	b0 91 56 01 	lds	r27, 0x0156
 8c2:	89 2b       	or	r24, r25
 8c4:	8a 2b       	or	r24, r26
 8c6:	8b 2b       	or	r24, r27
 8c8:	99 f0       	breq	.+38     	; 0x8f0 <__vector_13+0x11a>
 8ca:	80 91 53 01 	lds	r24, 0x0153
 8ce:	90 91 54 01 	lds	r25, 0x0154
 8d2:	a0 91 55 01 	lds	r26, 0x0155
 8d6:	b0 91 56 01 	lds	r27, 0x0156
 8da:	01 97       	sbiw	r24, 0x01	; 1
 8dc:	a1 09       	sbc	r26, r1
 8de:	b1 09       	sbc	r27, r1
 8e0:	80 93 53 01 	sts	0x0153, r24
 8e4:	90 93 54 01 	sts	0x0154, r25
 8e8:	a0 93 55 01 	sts	0x0155, r26
 8ec:	b0 93 56 01 	sts	0x0156, r27
	if(timer_node_1 > 0) timer_node_1--;
 8f0:	80 91 4f 01 	lds	r24, 0x014F
 8f4:	90 91 50 01 	lds	r25, 0x0150
 8f8:	a0 91 51 01 	lds	r26, 0x0151
 8fc:	b0 91 52 01 	lds	r27, 0x0152
 900:	89 2b       	or	r24, r25
 902:	8a 2b       	or	r24, r26
 904:	8b 2b       	or	r24, r27
 906:	99 f0       	breq	.+38     	; 0x92e <__stack+0x2f>
 908:	80 91 4f 01 	lds	r24, 0x014F
 90c:	90 91 50 01 	lds	r25, 0x0150
 910:	a0 91 51 01 	lds	r26, 0x0151
 914:	b0 91 52 01 	lds	r27, 0x0152
 918:	01 97       	sbiw	r24, 0x01	; 1
 91a:	a1 09       	sbc	r26, r1
 91c:	b1 09       	sbc	r27, r1
 91e:	80 93 4f 01 	sts	0x014F, r24
 922:	90 93 50 01 	sts	0x0150, r25
 926:	a0 93 51 01 	sts	0x0151, r26
 92a:	b0 93 52 01 	sts	0x0152, r27
	if(timer_node_2 > 0) timer_node_2--;
 92e:	80 91 4b 01 	lds	r24, 0x014B
 932:	90 91 4c 01 	lds	r25, 0x014C
 936:	a0 91 4d 01 	lds	r26, 0x014D
 93a:	b0 91 4e 01 	lds	r27, 0x014E
 93e:	89 2b       	or	r24, r25
 940:	8a 2b       	or	r24, r26
 942:	8b 2b       	or	r24, r27
 944:	99 f0       	breq	.+38     	; 0x96c <__stack+0x6d>
 946:	80 91 4b 01 	lds	r24, 0x014B
 94a:	90 91 4c 01 	lds	r25, 0x014C
 94e:	a0 91 4d 01 	lds	r26, 0x014D
 952:	b0 91 4e 01 	lds	r27, 0x014E
 956:	01 97       	sbiw	r24, 0x01	; 1
 958:	a1 09       	sbc	r26, r1
 95a:	b1 09       	sbc	r27, r1
 95c:	80 93 4b 01 	sts	0x014B, r24
 960:	90 93 4c 01 	sts	0x014C, r25
 964:	a0 93 4d 01 	sts	0x014D, r26
 968:	b0 93 4e 01 	sts	0x014E, r27
	if(pause_time > 0) pause_time--;
 96c:	80 91 47 01 	lds	r24, 0x0147
 970:	90 91 48 01 	lds	r25, 0x0148
 974:	a0 91 49 01 	lds	r26, 0x0149
 978:	b0 91 4a 01 	lds	r27, 0x014A
 97c:	89 2b       	or	r24, r25
 97e:	8a 2b       	or	r24, r26
 980:	8b 2b       	or	r24, r27
 982:	99 f0       	breq	.+38     	; 0x9aa <__stack+0xab>
 984:	80 91 47 01 	lds	r24, 0x0147
 988:	90 91 48 01 	lds	r25, 0x0148
 98c:	a0 91 49 01 	lds	r26, 0x0149
 990:	b0 91 4a 01 	lds	r27, 0x014A
 994:	01 97       	sbiw	r24, 0x01	; 1
 996:	a1 09       	sbc	r26, r1
 998:	b1 09       	sbc	r27, r1
 99a:	80 93 47 01 	sts	0x0147, r24
 99e:	90 93 48 01 	sts	0x0148, r25
 9a2:	a0 93 49 01 	sts	0x0149, r26
 9a6:	b0 93 4a 01 	sts	0x014A, r27
}
 9aa:	ff 91       	pop	r31
 9ac:	ef 91       	pop	r30
 9ae:	bf 91       	pop	r27
 9b0:	af 91       	pop	r26
 9b2:	9f 91       	pop	r25
 9b4:	8f 91       	pop	r24
 9b6:	7f 91       	pop	r23
 9b8:	6f 91       	pop	r22
 9ba:	5f 91       	pop	r21
 9bc:	4f 91       	pop	r20
 9be:	3f 91       	pop	r19
 9c0:	2f 91       	pop	r18
 9c2:	0f 90       	pop	r0
 9c4:	0f be       	out	0x3f, r0	; 63
 9c6:	0f 90       	pop	r0
 9c8:	1f 90       	pop	r1
 9ca:	18 95       	reti

000009cc <clear_buffer>:
	*dest = '\0';
}

void clear_buffer()
{
	uart0_index = 0;
 9cc:	10 92 66 01 	sts	0x0166, r1
	uart0_buff[uart0_index] = '\0';
 9d0:	e0 91 66 01 	lds	r30, 0x0166
 9d4:	f0 e0       	ldi	r31, 0x00	; 0
 9d6:	e8 59       	subi	r30, 0x98	; 152
 9d8:	fe 4f       	sbci	r31, 0xFE	; 254
 9da:	10 82       	st	Z, r1
 9dc:	08 95       	ret

000009de <__vector_18>:
//{
//	uart0_sent = 1;
//}

ISR(USART_RX_vect)
{
 9de:	1f 92       	push	r1
 9e0:	0f 92       	push	r0
 9e2:	0f b6       	in	r0, 0x3f	; 63
 9e4:	0f 92       	push	r0
 9e6:	11 24       	eor	r1, r1
 9e8:	2f 93       	push	r18
 9ea:	3f 93       	push	r19
 9ec:	4f 93       	push	r20
 9ee:	5f 93       	push	r21
 9f0:	6f 93       	push	r22
 9f2:	7f 93       	push	r23
 9f4:	8f 93       	push	r24
 9f6:	9f 93       	push	r25
 9f8:	af 93       	push	r26
 9fa:	bf 93       	push	r27
 9fc:	ef 93       	push	r30
 9fe:	ff 93       	push	r31
	char temp;

	temp = UDR0;
 a00:	80 91 c6 00 	lds	r24, 0x00C6
	if (uart0_index < (UART0_SIZE - 2)) {
 a04:	90 91 66 01 	lds	r25, 0x0166
 a08:	9d 3f       	cpi	r25, 0xFD	; 253
 a0a:	d8 f4       	brcc	.+54     	; 0xa42 <__vector_18+0x64>
		/* There is room for more characters. */
		uart0_buff[uart0_index] = temp;
 a0c:	e0 91 66 01 	lds	r30, 0x0166
 a10:	f0 e0       	ldi	r31, 0x00	; 0
 a12:	e8 59       	subi	r30, 0x98	; 152
 a14:	fe 4f       	sbci	r31, 0xFE	; 254
 a16:	80 83       	st	Z, r24
		uart0_buff[uart0_index + 1] = '\0';
 a18:	e0 91 66 01 	lds	r30, 0x0166
 a1c:	f0 e0       	ldi	r31, 0x00	; 0
 a1e:	e7 59       	subi	r30, 0x97	; 151
 a20:	fe 4f       	sbci	r31, 0xFE	; 254
 a22:	10 82       	st	Z, r1
		uart0_index++;
 a24:	90 91 66 01 	lds	r25, 0x0166
 a28:	9f 5f       	subi	r25, 0xFF	; 255
 a2a:	90 93 66 01 	sts	0x0166, r25
		if (temp == '\0' || temp == '\n' || temp == '\r') {
 a2e:	88 23       	and	r24, r24
 a30:	21 f0       	breq	.+8      	; 0xa3a <__vector_18+0x5c>
 a32:	8a 30       	cpi	r24, 0x0A	; 10
 a34:	11 f0       	breq	.+4      	; 0xa3a <__vector_18+0x5c>
 a36:	8d 30       	cpi	r24, 0x0D	; 13
 a38:	31 f4       	brne	.+12     	; 0xa46 <__vector_18+0x68>
			uart0_received = 1;
 a3a:	81 e0       	ldi	r24, 0x01	; 1
 a3c:	80 93 67 01 	sts	0x0167, r24
 a40:	02 c0       	rjmp	.+4      	; 0xa46 <__vector_18+0x68>
		}
	} else {
		/* Wait for buffer to be cleared. */
		clear_buffer();	
 a42:	0e 94 e6 04 	call	0x9cc	; 0x9cc <clear_buffer>
	}
}
 a46:	ff 91       	pop	r31
 a48:	ef 91       	pop	r30
 a4a:	bf 91       	pop	r27
 a4c:	af 91       	pop	r26
 a4e:	9f 91       	pop	r25
 a50:	8f 91       	pop	r24
 a52:	7f 91       	pop	r23
 a54:	6f 91       	pop	r22
 a56:	5f 91       	pop	r21
 a58:	4f 91       	pop	r20
 a5a:	3f 91       	pop	r19
 a5c:	2f 91       	pop	r18
 a5e:	0f 90       	pop	r0
 a60:	0f be       	out	0x3f, r0	; 63
 a62:	0f 90       	pop	r0
 a64:	1f 90       	pop	r1
 a66:	18 95       	reti

00000a68 <__subsf3>:
 a68:	50 58       	subi	r21, 0x80	; 128

00000a6a <__addsf3>:
 a6a:	bb 27       	eor	r27, r27
 a6c:	aa 27       	eor	r26, r26
 a6e:	0e d0       	rcall	.+28     	; 0xa8c <__addsf3x>
 a70:	e5 c0       	rjmp	.+458    	; 0xc3c <__fp_round>
 a72:	d6 d0       	rcall	.+428    	; 0xc20 <__fp_pscA>
 a74:	30 f0       	brcs	.+12     	; 0xa82 <__addsf3+0x18>
 a76:	db d0       	rcall	.+438    	; 0xc2e <__fp_pscB>
 a78:	20 f0       	brcs	.+8      	; 0xa82 <__addsf3+0x18>
 a7a:	31 f4       	brne	.+12     	; 0xa88 <__addsf3+0x1e>
 a7c:	9f 3f       	cpi	r25, 0xFF	; 255
 a7e:	11 f4       	brne	.+4      	; 0xa84 <__addsf3+0x1a>
 a80:	1e f4       	brtc	.+6      	; 0xa88 <__addsf3+0x1e>
 a82:	cb c0       	rjmp	.+406    	; 0xc1a <__fp_nan>
 a84:	0e f4       	brtc	.+2      	; 0xa88 <__addsf3+0x1e>
 a86:	e0 95       	com	r30
 a88:	e7 fb       	bst	r30, 7
 a8a:	c1 c0       	rjmp	.+386    	; 0xc0e <__fp_inf>

00000a8c <__addsf3x>:
 a8c:	e9 2f       	mov	r30, r25
 a8e:	e7 d0       	rcall	.+462    	; 0xc5e <__fp_split3>
 a90:	80 f3       	brcs	.-32     	; 0xa72 <__addsf3+0x8>
 a92:	ba 17       	cp	r27, r26
 a94:	62 07       	cpc	r22, r18
 a96:	73 07       	cpc	r23, r19
 a98:	84 07       	cpc	r24, r20
 a9a:	95 07       	cpc	r25, r21
 a9c:	18 f0       	brcs	.+6      	; 0xaa4 <__addsf3x+0x18>
 a9e:	71 f4       	brne	.+28     	; 0xabc <__addsf3x+0x30>
 aa0:	9e f5       	brtc	.+102    	; 0xb08 <__addsf3x+0x7c>
 aa2:	ff c0       	rjmp	.+510    	; 0xca2 <__fp_zero>
 aa4:	0e f4       	brtc	.+2      	; 0xaa8 <__addsf3x+0x1c>
 aa6:	e0 95       	com	r30
 aa8:	0b 2e       	mov	r0, r27
 aaa:	ba 2f       	mov	r27, r26
 aac:	a0 2d       	mov	r26, r0
 aae:	0b 01       	movw	r0, r22
 ab0:	b9 01       	movw	r22, r18
 ab2:	90 01       	movw	r18, r0
 ab4:	0c 01       	movw	r0, r24
 ab6:	ca 01       	movw	r24, r20
 ab8:	a0 01       	movw	r20, r0
 aba:	11 24       	eor	r1, r1
 abc:	ff 27       	eor	r31, r31
 abe:	59 1b       	sub	r21, r25
 ac0:	99 f0       	breq	.+38     	; 0xae8 <__addsf3x+0x5c>
 ac2:	59 3f       	cpi	r21, 0xF9	; 249
 ac4:	50 f4       	brcc	.+20     	; 0xada <__addsf3x+0x4e>
 ac6:	50 3e       	cpi	r21, 0xE0	; 224
 ac8:	68 f1       	brcs	.+90     	; 0xb24 <__addsf3x+0x98>
 aca:	1a 16       	cp	r1, r26
 acc:	f0 40       	sbci	r31, 0x00	; 0
 ace:	a2 2f       	mov	r26, r18
 ad0:	23 2f       	mov	r18, r19
 ad2:	34 2f       	mov	r19, r20
 ad4:	44 27       	eor	r20, r20
 ad6:	58 5f       	subi	r21, 0xF8	; 248
 ad8:	f3 cf       	rjmp	.-26     	; 0xac0 <__addsf3x+0x34>
 ada:	46 95       	lsr	r20
 adc:	37 95       	ror	r19
 ade:	27 95       	ror	r18
 ae0:	a7 95       	ror	r26
 ae2:	f0 40       	sbci	r31, 0x00	; 0
 ae4:	53 95       	inc	r21
 ae6:	c9 f7       	brne	.-14     	; 0xada <__addsf3x+0x4e>
 ae8:	7e f4       	brtc	.+30     	; 0xb08 <__addsf3x+0x7c>
 aea:	1f 16       	cp	r1, r31
 aec:	ba 0b       	sbc	r27, r26
 aee:	62 0b       	sbc	r22, r18
 af0:	73 0b       	sbc	r23, r19
 af2:	84 0b       	sbc	r24, r20
 af4:	ba f0       	brmi	.+46     	; 0xb24 <__addsf3x+0x98>
 af6:	91 50       	subi	r25, 0x01	; 1
 af8:	a1 f0       	breq	.+40     	; 0xb22 <__addsf3x+0x96>
 afa:	ff 0f       	add	r31, r31
 afc:	bb 1f       	adc	r27, r27
 afe:	66 1f       	adc	r22, r22
 b00:	77 1f       	adc	r23, r23
 b02:	88 1f       	adc	r24, r24
 b04:	c2 f7       	brpl	.-16     	; 0xaf6 <__addsf3x+0x6a>
 b06:	0e c0       	rjmp	.+28     	; 0xb24 <__addsf3x+0x98>
 b08:	ba 0f       	add	r27, r26
 b0a:	62 1f       	adc	r22, r18
 b0c:	73 1f       	adc	r23, r19
 b0e:	84 1f       	adc	r24, r20
 b10:	48 f4       	brcc	.+18     	; 0xb24 <__addsf3x+0x98>
 b12:	87 95       	ror	r24
 b14:	77 95       	ror	r23
 b16:	67 95       	ror	r22
 b18:	b7 95       	ror	r27
 b1a:	f7 95       	ror	r31
 b1c:	9e 3f       	cpi	r25, 0xFE	; 254
 b1e:	08 f0       	brcs	.+2      	; 0xb22 <__addsf3x+0x96>
 b20:	b3 cf       	rjmp	.-154    	; 0xa88 <__addsf3+0x1e>
 b22:	93 95       	inc	r25
 b24:	88 0f       	add	r24, r24
 b26:	08 f0       	brcs	.+2      	; 0xb2a <__addsf3x+0x9e>
 b28:	99 27       	eor	r25, r25
 b2a:	ee 0f       	add	r30, r30
 b2c:	97 95       	ror	r25
 b2e:	87 95       	ror	r24
 b30:	08 95       	ret

00000b32 <__fixsfsi>:
 b32:	04 d0       	rcall	.+8      	; 0xb3c <__fixunssfsi>
 b34:	68 94       	set
 b36:	b1 11       	cpse	r27, r1
 b38:	b5 c0       	rjmp	.+362    	; 0xca4 <__fp_szero>
 b3a:	08 95       	ret

00000b3c <__fixunssfsi>:
 b3c:	98 d0       	rcall	.+304    	; 0xc6e <__fp_splitA>
 b3e:	88 f0       	brcs	.+34     	; 0xb62 <__fixunssfsi+0x26>
 b40:	9f 57       	subi	r25, 0x7F	; 127
 b42:	90 f0       	brcs	.+36     	; 0xb68 <__fixunssfsi+0x2c>
 b44:	b9 2f       	mov	r27, r25
 b46:	99 27       	eor	r25, r25
 b48:	b7 51       	subi	r27, 0x17	; 23
 b4a:	a0 f0       	brcs	.+40     	; 0xb74 <__fixunssfsi+0x38>
 b4c:	d1 f0       	breq	.+52     	; 0xb82 <__fixunssfsi+0x46>
 b4e:	66 0f       	add	r22, r22
 b50:	77 1f       	adc	r23, r23
 b52:	88 1f       	adc	r24, r24
 b54:	99 1f       	adc	r25, r25
 b56:	1a f0       	brmi	.+6      	; 0xb5e <__fixunssfsi+0x22>
 b58:	ba 95       	dec	r27
 b5a:	c9 f7       	brne	.-14     	; 0xb4e <__fixunssfsi+0x12>
 b5c:	12 c0       	rjmp	.+36     	; 0xb82 <__fixunssfsi+0x46>
 b5e:	b1 30       	cpi	r27, 0x01	; 1
 b60:	81 f0       	breq	.+32     	; 0xb82 <__fixunssfsi+0x46>
 b62:	9f d0       	rcall	.+318    	; 0xca2 <__fp_zero>
 b64:	b1 e0       	ldi	r27, 0x01	; 1
 b66:	08 95       	ret
 b68:	9c c0       	rjmp	.+312    	; 0xca2 <__fp_zero>
 b6a:	67 2f       	mov	r22, r23
 b6c:	78 2f       	mov	r23, r24
 b6e:	88 27       	eor	r24, r24
 b70:	b8 5f       	subi	r27, 0xF8	; 248
 b72:	39 f0       	breq	.+14     	; 0xb82 <__fixunssfsi+0x46>
 b74:	b9 3f       	cpi	r27, 0xF9	; 249
 b76:	cc f3       	brlt	.-14     	; 0xb6a <__fixunssfsi+0x2e>
 b78:	86 95       	lsr	r24
 b7a:	77 95       	ror	r23
 b7c:	67 95       	ror	r22
 b7e:	b3 95       	inc	r27
 b80:	d9 f7       	brne	.-10     	; 0xb78 <__fixunssfsi+0x3c>
 b82:	3e f4       	brtc	.+14     	; 0xb92 <__fixunssfsi+0x56>
 b84:	90 95       	com	r25
 b86:	80 95       	com	r24
 b88:	70 95       	com	r23
 b8a:	61 95       	neg	r22
 b8c:	7f 4f       	sbci	r23, 0xFF	; 255
 b8e:	8f 4f       	sbci	r24, 0xFF	; 255
 b90:	9f 4f       	sbci	r25, 0xFF	; 255
 b92:	08 95       	ret

00000b94 <__floatunsisf>:
 b94:	e8 94       	clt
 b96:	09 c0       	rjmp	.+18     	; 0xbaa <__floatsisf+0x12>

00000b98 <__floatsisf>:
 b98:	97 fb       	bst	r25, 7
 b9a:	3e f4       	brtc	.+14     	; 0xbaa <__floatsisf+0x12>
 b9c:	90 95       	com	r25
 b9e:	80 95       	com	r24
 ba0:	70 95       	com	r23
 ba2:	61 95       	neg	r22
 ba4:	7f 4f       	sbci	r23, 0xFF	; 255
 ba6:	8f 4f       	sbci	r24, 0xFF	; 255
 ba8:	9f 4f       	sbci	r25, 0xFF	; 255
 baa:	99 23       	and	r25, r25
 bac:	a9 f0       	breq	.+42     	; 0xbd8 <__floatsisf+0x40>
 bae:	f9 2f       	mov	r31, r25
 bb0:	96 e9       	ldi	r25, 0x96	; 150
 bb2:	bb 27       	eor	r27, r27
 bb4:	93 95       	inc	r25
 bb6:	f6 95       	lsr	r31
 bb8:	87 95       	ror	r24
 bba:	77 95       	ror	r23
 bbc:	67 95       	ror	r22
 bbe:	b7 95       	ror	r27
 bc0:	f1 11       	cpse	r31, r1
 bc2:	f8 cf       	rjmp	.-16     	; 0xbb4 <__floatsisf+0x1c>
 bc4:	fa f4       	brpl	.+62     	; 0xc04 <__floatsisf+0x6c>
 bc6:	bb 0f       	add	r27, r27
 bc8:	11 f4       	brne	.+4      	; 0xbce <__floatsisf+0x36>
 bca:	60 ff       	sbrs	r22, 0
 bcc:	1b c0       	rjmp	.+54     	; 0xc04 <__floatsisf+0x6c>
 bce:	6f 5f       	subi	r22, 0xFF	; 255
 bd0:	7f 4f       	sbci	r23, 0xFF	; 255
 bd2:	8f 4f       	sbci	r24, 0xFF	; 255
 bd4:	9f 4f       	sbci	r25, 0xFF	; 255
 bd6:	16 c0       	rjmp	.+44     	; 0xc04 <__floatsisf+0x6c>
 bd8:	88 23       	and	r24, r24
 bda:	11 f0       	breq	.+4      	; 0xbe0 <__floatsisf+0x48>
 bdc:	96 e9       	ldi	r25, 0x96	; 150
 bde:	11 c0       	rjmp	.+34     	; 0xc02 <__floatsisf+0x6a>
 be0:	77 23       	and	r23, r23
 be2:	21 f0       	breq	.+8      	; 0xbec <__floatsisf+0x54>
 be4:	9e e8       	ldi	r25, 0x8E	; 142
 be6:	87 2f       	mov	r24, r23
 be8:	76 2f       	mov	r23, r22
 bea:	05 c0       	rjmp	.+10     	; 0xbf6 <__floatsisf+0x5e>
 bec:	66 23       	and	r22, r22
 bee:	71 f0       	breq	.+28     	; 0xc0c <__floatsisf+0x74>
 bf0:	96 e8       	ldi	r25, 0x86	; 134
 bf2:	86 2f       	mov	r24, r22
 bf4:	70 e0       	ldi	r23, 0x00	; 0
 bf6:	60 e0       	ldi	r22, 0x00	; 0
 bf8:	2a f0       	brmi	.+10     	; 0xc04 <__floatsisf+0x6c>
 bfa:	9a 95       	dec	r25
 bfc:	66 0f       	add	r22, r22
 bfe:	77 1f       	adc	r23, r23
 c00:	88 1f       	adc	r24, r24
 c02:	da f7       	brpl	.-10     	; 0xbfa <__floatsisf+0x62>
 c04:	88 0f       	add	r24, r24
 c06:	96 95       	lsr	r25
 c08:	87 95       	ror	r24
 c0a:	97 f9       	bld	r25, 7
 c0c:	08 95       	ret

00000c0e <__fp_inf>:
 c0e:	97 f9       	bld	r25, 7
 c10:	9f 67       	ori	r25, 0x7F	; 127
 c12:	80 e8       	ldi	r24, 0x80	; 128
 c14:	70 e0       	ldi	r23, 0x00	; 0
 c16:	60 e0       	ldi	r22, 0x00	; 0
 c18:	08 95       	ret

00000c1a <__fp_nan>:
 c1a:	9f ef       	ldi	r25, 0xFF	; 255
 c1c:	80 ec       	ldi	r24, 0xC0	; 192
 c1e:	08 95       	ret

00000c20 <__fp_pscA>:
 c20:	00 24       	eor	r0, r0
 c22:	0a 94       	dec	r0
 c24:	16 16       	cp	r1, r22
 c26:	17 06       	cpc	r1, r23
 c28:	18 06       	cpc	r1, r24
 c2a:	09 06       	cpc	r0, r25
 c2c:	08 95       	ret

00000c2e <__fp_pscB>:
 c2e:	00 24       	eor	r0, r0
 c30:	0a 94       	dec	r0
 c32:	12 16       	cp	r1, r18
 c34:	13 06       	cpc	r1, r19
 c36:	14 06       	cpc	r1, r20
 c38:	05 06       	cpc	r0, r21
 c3a:	08 95       	ret

00000c3c <__fp_round>:
 c3c:	09 2e       	mov	r0, r25
 c3e:	03 94       	inc	r0
 c40:	00 0c       	add	r0, r0
 c42:	11 f4       	brne	.+4      	; 0xc48 <__fp_round+0xc>
 c44:	88 23       	and	r24, r24
 c46:	52 f0       	brmi	.+20     	; 0xc5c <__fp_round+0x20>
 c48:	bb 0f       	add	r27, r27
 c4a:	40 f4       	brcc	.+16     	; 0xc5c <__fp_round+0x20>
 c4c:	bf 2b       	or	r27, r31
 c4e:	11 f4       	brne	.+4      	; 0xc54 <__fp_round+0x18>
 c50:	60 ff       	sbrs	r22, 0
 c52:	04 c0       	rjmp	.+8      	; 0xc5c <__fp_round+0x20>
 c54:	6f 5f       	subi	r22, 0xFF	; 255
 c56:	7f 4f       	sbci	r23, 0xFF	; 255
 c58:	8f 4f       	sbci	r24, 0xFF	; 255
 c5a:	9f 4f       	sbci	r25, 0xFF	; 255
 c5c:	08 95       	ret

00000c5e <__fp_split3>:
 c5e:	57 fd       	sbrc	r21, 7
 c60:	90 58       	subi	r25, 0x80	; 128
 c62:	44 0f       	add	r20, r20
 c64:	55 1f       	adc	r21, r21
 c66:	59 f0       	breq	.+22     	; 0xc7e <__fp_splitA+0x10>
 c68:	5f 3f       	cpi	r21, 0xFF	; 255
 c6a:	71 f0       	breq	.+28     	; 0xc88 <__fp_splitA+0x1a>
 c6c:	47 95       	ror	r20

00000c6e <__fp_splitA>:
 c6e:	88 0f       	add	r24, r24
 c70:	97 fb       	bst	r25, 7
 c72:	99 1f       	adc	r25, r25
 c74:	61 f0       	breq	.+24     	; 0xc8e <__fp_splitA+0x20>
 c76:	9f 3f       	cpi	r25, 0xFF	; 255
 c78:	79 f0       	breq	.+30     	; 0xc98 <__fp_splitA+0x2a>
 c7a:	87 95       	ror	r24
 c7c:	08 95       	ret
 c7e:	12 16       	cp	r1, r18
 c80:	13 06       	cpc	r1, r19
 c82:	14 06       	cpc	r1, r20
 c84:	55 1f       	adc	r21, r21
 c86:	f2 cf       	rjmp	.-28     	; 0xc6c <__fp_split3+0xe>
 c88:	46 95       	lsr	r20
 c8a:	f1 df       	rcall	.-30     	; 0xc6e <__fp_splitA>
 c8c:	08 c0       	rjmp	.+16     	; 0xc9e <__fp_splitA+0x30>
 c8e:	16 16       	cp	r1, r22
 c90:	17 06       	cpc	r1, r23
 c92:	18 06       	cpc	r1, r24
 c94:	99 1f       	adc	r25, r25
 c96:	f1 cf       	rjmp	.-30     	; 0xc7a <__fp_splitA+0xc>
 c98:	86 95       	lsr	r24
 c9a:	71 05       	cpc	r23, r1
 c9c:	61 05       	cpc	r22, r1
 c9e:	08 94       	sec
 ca0:	08 95       	ret

00000ca2 <__fp_zero>:
 ca2:	e8 94       	clt

00000ca4 <__fp_szero>:
 ca4:	bb 27       	eor	r27, r27
 ca6:	66 27       	eor	r22, r22
 ca8:	77 27       	eor	r23, r23
 caa:	cb 01       	movw	r24, r22
 cac:	97 f9       	bld	r25, 7
 cae:	08 95       	ret

00000cb0 <__mulsf3>:
 cb0:	0b d0       	rcall	.+22     	; 0xcc8 <__mulsf3x>
 cb2:	c4 cf       	rjmp	.-120    	; 0xc3c <__fp_round>
 cb4:	b5 df       	rcall	.-150    	; 0xc20 <__fp_pscA>
 cb6:	28 f0       	brcs	.+10     	; 0xcc2 <__mulsf3+0x12>
 cb8:	ba df       	rcall	.-140    	; 0xc2e <__fp_pscB>
 cba:	18 f0       	brcs	.+6      	; 0xcc2 <__mulsf3+0x12>
 cbc:	95 23       	and	r25, r21
 cbe:	09 f0       	breq	.+2      	; 0xcc2 <__mulsf3+0x12>
 cc0:	a6 cf       	rjmp	.-180    	; 0xc0e <__fp_inf>
 cc2:	ab cf       	rjmp	.-170    	; 0xc1a <__fp_nan>
 cc4:	11 24       	eor	r1, r1
 cc6:	ee cf       	rjmp	.-36     	; 0xca4 <__fp_szero>

00000cc8 <__mulsf3x>:
 cc8:	ca df       	rcall	.-108    	; 0xc5e <__fp_split3>
 cca:	a0 f3       	brcs	.-24     	; 0xcb4 <__mulsf3+0x4>

00000ccc <__mulsf3_pse>:
 ccc:	95 9f       	mul	r25, r21
 cce:	d1 f3       	breq	.-12     	; 0xcc4 <__mulsf3+0x14>
 cd0:	95 0f       	add	r25, r21
 cd2:	50 e0       	ldi	r21, 0x00	; 0
 cd4:	55 1f       	adc	r21, r21
 cd6:	62 9f       	mul	r22, r18
 cd8:	f0 01       	movw	r30, r0
 cda:	72 9f       	mul	r23, r18
 cdc:	bb 27       	eor	r27, r27
 cde:	f0 0d       	add	r31, r0
 ce0:	b1 1d       	adc	r27, r1
 ce2:	63 9f       	mul	r22, r19
 ce4:	aa 27       	eor	r26, r26
 ce6:	f0 0d       	add	r31, r0
 ce8:	b1 1d       	adc	r27, r1
 cea:	aa 1f       	adc	r26, r26
 cec:	64 9f       	mul	r22, r20
 cee:	66 27       	eor	r22, r22
 cf0:	b0 0d       	add	r27, r0
 cf2:	a1 1d       	adc	r26, r1
 cf4:	66 1f       	adc	r22, r22
 cf6:	82 9f       	mul	r24, r18
 cf8:	22 27       	eor	r18, r18
 cfa:	b0 0d       	add	r27, r0
 cfc:	a1 1d       	adc	r26, r1
 cfe:	62 1f       	adc	r22, r18
 d00:	73 9f       	mul	r23, r19
 d02:	b0 0d       	add	r27, r0
 d04:	a1 1d       	adc	r26, r1
 d06:	62 1f       	adc	r22, r18
 d08:	83 9f       	mul	r24, r19
 d0a:	a0 0d       	add	r26, r0
 d0c:	61 1d       	adc	r22, r1
 d0e:	22 1f       	adc	r18, r18
 d10:	74 9f       	mul	r23, r20
 d12:	33 27       	eor	r19, r19
 d14:	a0 0d       	add	r26, r0
 d16:	61 1d       	adc	r22, r1
 d18:	23 1f       	adc	r18, r19
 d1a:	84 9f       	mul	r24, r20
 d1c:	60 0d       	add	r22, r0
 d1e:	21 1d       	adc	r18, r1
 d20:	82 2f       	mov	r24, r18
 d22:	76 2f       	mov	r23, r22
 d24:	6a 2f       	mov	r22, r26
 d26:	11 24       	eor	r1, r1
 d28:	9f 57       	subi	r25, 0x7F	; 127
 d2a:	50 40       	sbci	r21, 0x00	; 0
 d2c:	8a f0       	brmi	.+34     	; 0xd50 <__mulsf3_pse+0x84>
 d2e:	e1 f0       	breq	.+56     	; 0xd68 <__mulsf3_pse+0x9c>
 d30:	88 23       	and	r24, r24
 d32:	4a f0       	brmi	.+18     	; 0xd46 <__mulsf3_pse+0x7a>
 d34:	ee 0f       	add	r30, r30
 d36:	ff 1f       	adc	r31, r31
 d38:	bb 1f       	adc	r27, r27
 d3a:	66 1f       	adc	r22, r22
 d3c:	77 1f       	adc	r23, r23
 d3e:	88 1f       	adc	r24, r24
 d40:	91 50       	subi	r25, 0x01	; 1
 d42:	50 40       	sbci	r21, 0x00	; 0
 d44:	a9 f7       	brne	.-22     	; 0xd30 <__mulsf3_pse+0x64>
 d46:	9e 3f       	cpi	r25, 0xFE	; 254
 d48:	51 05       	cpc	r21, r1
 d4a:	70 f0       	brcs	.+28     	; 0xd68 <__mulsf3_pse+0x9c>
 d4c:	60 cf       	rjmp	.-320    	; 0xc0e <__fp_inf>
 d4e:	aa cf       	rjmp	.-172    	; 0xca4 <__fp_szero>
 d50:	5f 3f       	cpi	r21, 0xFF	; 255
 d52:	ec f3       	brlt	.-6      	; 0xd4e <__mulsf3_pse+0x82>
 d54:	98 3e       	cpi	r25, 0xE8	; 232
 d56:	dc f3       	brlt	.-10     	; 0xd4e <__mulsf3_pse+0x82>
 d58:	86 95       	lsr	r24
 d5a:	77 95       	ror	r23
 d5c:	67 95       	ror	r22
 d5e:	b7 95       	ror	r27
 d60:	f7 95       	ror	r31
 d62:	e7 95       	ror	r30
 d64:	9f 5f       	subi	r25, 0xFF	; 255
 d66:	c1 f7       	brne	.-16     	; 0xd58 <__mulsf3_pse+0x8c>
 d68:	fe 2b       	or	r31, r30
 d6a:	88 0f       	add	r24, r24
 d6c:	91 1d       	adc	r25, r1
 d6e:	96 95       	lsr	r25
 d70:	87 95       	ror	r24
 d72:	97 f9       	bld	r25, 7
 d74:	08 95       	ret

00000d76 <_exit>:
 d76:	f8 94       	cli

00000d78 <__stop_program>:
 d78:	ff cf       	rjmp	.-2      	; 0xd78 <__stop_program>
