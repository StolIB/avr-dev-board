
avr-dev-board-pwm-example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d1c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000015a  00800100  00800100  00000d90  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000001b0  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000109d  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000070a  00000000  00000000  0000200d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000079f  00000000  00000000  00002717  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000042c  00000000  00000000  00002eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000004f3  00000000  00000000  000032e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000aeb  00000000  00000000  000037d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000150  00000000  00000000  000042c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 35       	cpi	r26, 0x5A	; 90
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  9e:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:
	/* If more than 8-bit precision is used - read ADCL first and ADCH second. */
	return adc_result;
}

ISR(ADC_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
	adc_done = 1;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	80 93 02 01 	sts	0x0102, r24
	uint16_t temp = 0;
	temp |= ADCL;
  bc:	80 91 78 00 	lds	r24, 0x0078
	temp |= (ADCH << 8);
  c0:	20 91 79 00 	lds	r18, 0x0079
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	92 2b       	or	r25, r18
	adc_result = temp;
  c8:	90 93 01 01 	sts	0x0101, r25
  cc:	80 93 00 01 	sts	0x0100, r24

	//adc_result = (int)(adc_result + (float)((temp - adc_result)*0.20));
}
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	2f 91       	pop	r18
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <main>:
#include <avr/io.h>
#include "timer.h"
#include "gpio.h"

int main(void)
{
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	2f 97       	sbiw	r28, 0x0f	; 15
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	f8 94       	cli
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	cd bf       	out	0x3d, r28	; 61
	init_timer_1(PRESCALER8, 100);	//100us interrupt
  f4:	64 e6       	ldi	r22, 0x64	; 100
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	0e 94 56 01 	call	0x2ac	; 0x2ac <init_timer_1>
	
	set_pin_dir(&DDRB, GPIO_PIN0, OUTPUT);	//Postavljanje pina na koji zelimo da prosledimo PWM signal
  fe:	41 e0       	ldi	r20, 0x01	; 1
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	84 e2       	ldi	r24, 0x24	; 36
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 10 01 	call	0x220	; 0x220 <set_pin_dir>
											//u izlazni rezim rada
	
	PWM_S pwm_init_struct;					//Stvaranje strukture za inicijalizaciju PWM-a
	pwm_init_struct.port = &PORTB;			//Port (mora biti isti kao i u set_pin_dir funkciji u prethodnom koraku)
 10a:	85 e2       	ldi	r24, 0x25	; 37
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	9a 83       	std	Y+2, r25	; 0x02
 110:	89 83       	std	Y+1, r24	; 0x01
	pwm_init_struct.pin = GPIO_PIN0;		//Pin (mora biti isti kao i u set_pin_dir funkciji u prethodnom koraku)
 112:	1b 82       	std	Y+3, r1	; 0x03
	pwm_init_struct.period = 200;			//20ms perioda
 114:	88 ec       	ldi	r24, 0xC8	; 200
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	a0 e0       	ldi	r26, 0x00	; 0
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	8c 83       	std	Y+4, r24	; 0x04
 11e:	9d 83       	std	Y+5, r25	; 0x05
 120:	ae 83       	std	Y+6, r26	; 0x06
 122:	bf 83       	std	Y+7, r27	; 0x07
	pwm_init_struct.top_val = 0;			//Inicijalni faktor ispune
 124:	18 86       	std	Y+8, r1	; 0x08
 126:	19 86       	std	Y+9, r1	; 0x09
 128:	1a 86       	std	Y+10, r1	; 0x0a
 12a:	1b 86       	std	Y+11, r1	; 0x0b
	init_pwm(&pwm_init_struct);				//Inicijalizacija PWM-a
 12c:	ce 01       	movw	r24, r28
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	0e 94 65 01 	call	0x2ca	; 0x2ca <init_pwm>
		
	uint8_t i = 0;
	
    while(1){
		for(i = 0; i < 200; i++){			//Naizmenicno ispunjavanje faktora ispune od minimalne do maksimalne vrednosti
 134:	10 e0       	ldi	r17, 0x00	; 0
 136:	0f 2e       	mov	r0, r31
 138:	f8 ec       	ldi	r31, 0xC8	; 200
 13a:	9f 2e       	mov	r9, r31
 13c:	f0 2d       	mov	r31, r0
 13e:	a1 2c       	mov	r10, r1
 140:	b1 2c       	mov	r11, r1
 142:	00 e0       	ldi	r16, 0x00	; 0
 144:	81 2c       	mov	r8, r1
 146:	0d c0       	rjmp	.+26     	; 0x162 <main+0x82>
			pwm_ref_val(i);
 148:	61 2f       	mov	r22, r17
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 93 01 	call	0x326	; 0x326 <pwm_ref_val>
			pause_loop(50);
 154:	82 e3       	ldi	r24, 0x32	; 50
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <pause_loop>
	init_pwm(&pwm_init_struct);				//Inicijalizacija PWM-a
		
	uint8_t i = 0;
	
    while(1){
		for(i = 0; i < 200; i++){			//Naizmenicno ispunjavanje faktora ispune od minimalne do maksimalne vrednosti
 15c:	1f 5f       	subi	r17, 0xFF	; 255
 15e:	01 c0       	rjmp	.+2      	; 0x162 <main+0x82>
 160:	18 2d       	mov	r17, r8
 162:	18 3c       	cpi	r17, 0xC8	; 200
 164:	88 f3       	brcs	.-30     	; 0x148 <main+0x68>
 166:	c9 2c       	mov	r12, r9
 168:	da 2c       	mov	r13, r10
 16a:	eb 2c       	mov	r14, r11
 16c:	f0 2e       	mov	r15, r16
			pwm_ref_val(i);
			pause_loop(50);
		}
		for(i = 200; i > 0; i--){
			pwm_ref_val(i);
 16e:	c7 01       	movw	r24, r14
 170:	b6 01       	movw	r22, r12
 172:	0e 94 93 01 	call	0x326	; 0x326 <pwm_ref_val>
			pause_loop(50);
 176:	82 e3       	ldi	r24, 0x32	; 50
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <pause_loop>
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	c8 1a       	sub	r12, r24
 182:	d1 08       	sbc	r13, r1
 184:	e1 08       	sbc	r14, r1
 186:	f1 08       	sbc	r15, r1
    while(1){
		for(i = 0; i < 200; i++){			//Naizmenicno ispunjavanje faktora ispune od minimalne do maksimalne vrednosti
			pwm_ref_val(i);
			pause_loop(50);
		}
		for(i = 200; i > 0; i--){
 188:	c1 14       	cp	r12, r1
 18a:	d1 04       	cpc	r13, r1
 18c:	e1 04       	cpc	r14, r1
 18e:	f1 04       	cpc	r15, r1
 190:	71 f7       	brne	.-36     	; 0x16e <main+0x8e>
 192:	e6 cf       	rjmp	.-52     	; 0x160 <main+0x80>

00000194 <get_count>:
	sei();
}

long get_count()
{
	return counts;
 194:	60 91 03 01 	lds	r22, 0x0103
 198:	70 91 04 01 	lds	r23, 0x0104
 19c:	80 91 05 01 	lds	r24, 0x0105
 1a0:	90 91 06 01 	lds	r25, 0x0106
}
 1a4:	08 95       	ret

000001a6 <__vector_2>:

ISR(INT1_vect)
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
 1b4:	af 93       	push	r26
 1b6:	bf 93       	push	r27
	if( EXT_PORT & (1 << EXT_CH_A) ) counts--;			/* CCW */
 1b8:	4a 9b       	sbis	0x09, 2	; 9
 1ba:	14 c0       	rjmp	.+40     	; 0x1e4 <__vector_2+0x3e>
 1bc:	80 91 03 01 	lds	r24, 0x0103
 1c0:	90 91 04 01 	lds	r25, 0x0104
 1c4:	a0 91 05 01 	lds	r26, 0x0105
 1c8:	b0 91 06 01 	lds	r27, 0x0106
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	a1 09       	sbc	r26, r1
 1d0:	b1 09       	sbc	r27, r1
 1d2:	80 93 03 01 	sts	0x0103, r24
 1d6:	90 93 04 01 	sts	0x0104, r25
 1da:	a0 93 05 01 	sts	0x0105, r26
 1de:	b0 93 06 01 	sts	0x0106, r27
 1e2:	15 c0       	rjmp	.+42     	; 0x20e <__vector_2+0x68>
	else if( !(EXT_PORT & (1 << EXT_CH_A)) ) counts++;	/* CW */
 1e4:	4a 99       	sbic	0x09, 2	; 9
 1e6:	13 c0       	rjmp	.+38     	; 0x20e <__vector_2+0x68>
 1e8:	80 91 03 01 	lds	r24, 0x0103
 1ec:	90 91 04 01 	lds	r25, 0x0104
 1f0:	a0 91 05 01 	lds	r26, 0x0105
 1f4:	b0 91 06 01 	lds	r27, 0x0106
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	a1 1d       	adc	r26, r1
 1fc:	b1 1d       	adc	r27, r1
 1fe:	80 93 03 01 	sts	0x0103, r24
 202:	90 93 04 01 	sts	0x0104, r25
 206:	a0 93 05 01 	sts	0x0105, r26
 20a:	b0 93 06 01 	sts	0x0106, r27
}
 20e:	bf 91       	pop	r27
 210:	af 91       	pop	r26
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <set_pin_dir>:

#include "gpio.h"

void set_pin_dir(volatile uint8_t *target_port, uint8_t pin_no, uint8_t dir)
{
	switch(dir){
 220:	44 23       	and	r20, r20
 222:	89 f0       	breq	.+34     	; 0x246 <set_pin_dir+0x26>
 224:	41 30       	cpi	r20, 0x01	; 1
 226:	f1 f4       	brne	.+60     	; 0x264 <set_pin_dir+0x44>
	case OUTPUT:
		(*target_port) |= (1 << pin_no);
 228:	fc 01       	movw	r30, r24
 22a:	40 81       	ld	r20, Z
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	f9 01       	movw	r30, r18
 232:	02 c0       	rjmp	.+4      	; 0x238 <set_pin_dir+0x18>
 234:	ee 0f       	add	r30, r30
 236:	ff 1f       	adc	r31, r31
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <set_pin_dir+0x14>
 23c:	bf 01       	movw	r22, r30
 23e:	64 2b       	or	r22, r20
 240:	fc 01       	movw	r30, r24
 242:	60 83       	st	Z, r22
		break;
 244:	08 95       	ret
	case INPUT:
		(*target_port) &= ~(1 << pin_no);
 246:	fc 01       	movw	r30, r24
 248:	40 81       	ld	r20, Z
 24a:	21 e0       	ldi	r18, 0x01	; 1
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	f9 01       	movw	r30, r18
 250:	02 c0       	rjmp	.+4      	; 0x256 <set_pin_dir+0x36>
 252:	ee 0f       	add	r30, r30
 254:	ff 1f       	adc	r31, r31
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <set_pin_dir+0x32>
 25a:	bf 01       	movw	r22, r30
 25c:	60 95       	com	r22
 25e:	64 23       	and	r22, r20
 260:	fc 01       	movw	r30, r24
 262:	60 83       	st	Z, r22
 264:	08 95       	ret

00000266 <write_pin>:
	(*target_port) &= ~(1 << pin_no);
}

void write_pin(volatile uint8_t *target_port, uint8_t pin_no, uint8_t pin_val)
{
	switch(pin_val){
 266:	44 23       	and	r20, r20
 268:	89 f0       	breq	.+34     	; 0x28c <write_pin+0x26>
 26a:	41 30       	cpi	r20, 0x01	; 1
 26c:	f1 f4       	brne	.+60     	; 0x2aa <write_pin+0x44>
	case HIGH:
		(*target_port) |= (1 << pin_no);
 26e:	fc 01       	movw	r30, r24
 270:	40 81       	ld	r20, Z
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	f9 01       	movw	r30, r18
 278:	02 c0       	rjmp	.+4      	; 0x27e <write_pin+0x18>
 27a:	ee 0f       	add	r30, r30
 27c:	ff 1f       	adc	r31, r31
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <write_pin+0x14>
 282:	bf 01       	movw	r22, r30
 284:	64 2b       	or	r22, r20
 286:	fc 01       	movw	r30, r24
 288:	60 83       	st	Z, r22
		break;
 28a:	08 95       	ret
	case LOW:
		(*target_port) &= ~(1 << pin_no);
 28c:	fc 01       	movw	r30, r24
 28e:	40 81       	ld	r20, Z
 290:	21 e0       	ldi	r18, 0x01	; 1
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	f9 01       	movw	r30, r18
 296:	02 c0       	rjmp	.+4      	; 0x29c <write_pin+0x36>
 298:	ee 0f       	add	r30, r30
 29a:	ff 1f       	adc	r31, r31
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <write_pin+0x32>
 2a0:	bf 01       	movw	r22, r30
 2a2:	60 95       	com	r22
 2a4:	64 23       	and	r22, r20
 2a6:	fc 01       	movw	r30, r24
 2a8:	60 83       	st	Z, r22
 2aa:	08 95       	ret

000002ac <init_timer_1>:
{
	uint16_t temp;

	temp = 0;
	temp |= (1 << WGM10 | 1 << WGM11); /* Fast PWM mode - TOP is OCR1A, auto restart. */
	TCCR1A = temp;
 2ac:	93 e0       	ldi	r25, 0x03	; 3
 2ae:	90 93 80 00 	sts	0x0080, r25

	temp = 0;
	temp |= (1 << WGM12 | 1 << WGM13); /* Fast PWM mode - TOP is OCR1A, auto restart. */
	temp |= (prescaler << CS10); /* CS2:0 = 010 - Prescaler set to 8. */
 2b2:	88 61       	ori	r24, 0x18	; 24
	TCCR1B = temp;
 2b4:	80 93 81 00 	sts	0x0081, r24

	temp = 0;
	temp |= (1 << TOIE0);
	TIMSK1 = temp;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	80 93 6f 00 	sts	0x006F, r24

	OCR1A = topw_val;
 2be:	70 93 89 00 	sts	0x0089, r23
 2c2:	60 93 88 00 	sts	0x0088, r22

	sei();
 2c6:	78 94       	sei
 2c8:	08 95       	ret

000002ca <init_pwm>:
}

void init_pwm(PWM_S *pwm)
{
 2ca:	fc 01       	movw	r30, r24
	my_pwm.port = pwm->port;
 2cc:	80 81       	ld	r24, Z
 2ce:	91 81       	ldd	r25, Z+1	; 0x01
 2d0:	90 93 4b 01 	sts	0x014B, r25
 2d4:	80 93 4a 01 	sts	0x014A, r24
	my_pwm.pin = pwm->pin;
 2d8:	82 81       	ldd	r24, Z+2	; 0x02
 2da:	80 93 4c 01 	sts	0x014C, r24
	my_pwm.period = (volatile uint32_t) pwm->period;
 2de:	43 81       	ldd	r20, Z+3	; 0x03
 2e0:	54 81       	ldd	r21, Z+4	; 0x04
 2e2:	65 81       	ldd	r22, Z+5	; 0x05
 2e4:	76 81       	ldd	r23, Z+6	; 0x06
 2e6:	40 93 4d 01 	sts	0x014D, r20
 2ea:	50 93 4e 01 	sts	0x014E, r21
 2ee:	60 93 4f 01 	sts	0x014F, r22
 2f2:	70 93 50 01 	sts	0x0150, r23
	my_pwm.top_val = (volatile uint32_t) pwm->top_val;
 2f6:	87 81       	ldd	r24, Z+7	; 0x07
 2f8:	90 85       	ldd	r25, Z+8	; 0x08
 2fa:	a1 85       	ldd	r26, Z+9	; 0x09
 2fc:	b2 85       	ldd	r27, Z+10	; 0x0a
 2fe:	80 93 51 01 	sts	0x0151, r24
 302:	90 93 52 01 	sts	0x0152, r25
 306:	a0 93 53 01 	sts	0x0153, r26
 30a:	b0 93 54 01 	sts	0x0154, r27
	my_pwm.pwm_tick = 0;
 30e:	10 92 55 01 	sts	0x0155, r1
 312:	10 92 56 01 	sts	0x0156, r1
 316:	10 92 57 01 	sts	0x0157, r1
 31a:	10 92 58 01 	sts	0x0158, r1
	pwm_flag = PWM_ON;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 08 01 	sts	0x0108, r24
 324:	08 95       	ret

00000326 <pwm_ref_val>:
}

void pwm_ref_val(uint32_t reff)
{
 326:	0f 93       	push	r16
 328:	1f 93       	push	r17
	if(reff < my_pwm.period ) my_pwm.top_val = reff;
 32a:	00 91 4d 01 	lds	r16, 0x014D
 32e:	10 91 4e 01 	lds	r17, 0x014E
 332:	20 91 4f 01 	lds	r18, 0x014F
 336:	30 91 50 01 	lds	r19, 0x0150
 33a:	60 17       	cp	r22, r16
 33c:	71 07       	cpc	r23, r17
 33e:	82 07       	cpc	r24, r18
 340:	93 07       	cpc	r25, r19
 342:	48 f4       	brcc	.+18     	; 0x356 <pwm_ref_val+0x30>
 344:	60 93 51 01 	sts	0x0151, r22
 348:	70 93 52 01 	sts	0x0152, r23
 34c:	80 93 53 01 	sts	0x0153, r24
 350:	90 93 54 01 	sts	0x0154, r25
 354:	10 c0       	rjmp	.+32     	; 0x376 <pwm_ref_val+0x50>
	else my_pwm.top_val = my_pwm.period;
 356:	80 91 4d 01 	lds	r24, 0x014D
 35a:	90 91 4e 01 	lds	r25, 0x014E
 35e:	a0 91 4f 01 	lds	r26, 0x014F
 362:	b0 91 50 01 	lds	r27, 0x0150
 366:	80 93 51 01 	sts	0x0151, r24
 36a:	90 93 52 01 	sts	0x0152, r25
 36e:	a0 93 53 01 	sts	0x0153, r26
 372:	b0 93 54 01 	sts	0x0154, r27
}
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	08 95       	ret

0000037c <pid>:
{
	my_pid.dir = mot_dir;
}

void pid()
{
 37c:	4f 92       	push	r4
 37e:	5f 92       	push	r5
 380:	6f 92       	push	r6
 382:	7f 92       	push	r7
 384:	8f 92       	push	r8
 386:	9f 92       	push	r9
 388:	af 92       	push	r10
 38a:	bf 92       	push	r11
 38c:	cf 92       	push	r12
 38e:	df 92       	push	r13
 390:	ef 92       	push	r14
 392:	ff 92       	push	r15
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	cd b7       	in	r28, 0x3d	; 61
 39a:	de b7       	in	r29, 0x3e	; 62
 39c:	2c 97       	sbiw	r28, 0x0c	; 12
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	f8 94       	cli
 3a2:	de bf       	out	0x3e, r29	; 62
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	cd bf       	out	0x3d, r28	; 61
	long count = get_count();
 3a8:	0e 94 ca 00 	call	0x194	; 0x194 <get_count>
 3ac:	6b 01       	movw	r12, r22
 3ae:	7c 01       	movw	r14, r24
	int temp = 0;
	/* Speed difference. */
	my_pid.err = my_pid.ref_speed - (uint16_t)(count - my_pid.last_count);
 3b0:	20 91 26 01 	lds	r18, 0x0126
 3b4:	30 91 27 01 	lds	r19, 0x0127
 3b8:	80 91 46 01 	lds	r24, 0x0146
 3bc:	90 91 47 01 	lds	r25, 0x0147
 3c0:	a0 91 48 01 	lds	r26, 0x0148
 3c4:	b0 91 49 01 	lds	r27, 0x0149
 3c8:	82 0f       	add	r24, r18
 3ca:	93 1f       	adc	r25, r19
 3cc:	8c 19       	sub	r24, r12
 3ce:	9d 09       	sbc	r25, r13
 3d0:	a0 e0       	ldi	r26, 0x00	; 0
 3d2:	b0 e0       	ldi	r27, 0x00	; 0
 3d4:	26 e3       	ldi	r18, 0x36	; 54
 3d6:	31 e0       	ldi	r19, 0x01	; 1
 3d8:	f9 01       	movw	r30, r18
 3da:	80 83       	st	Z, r24
 3dc:	91 83       	std	Z+1, r25	; 0x01
 3de:	a2 83       	std	Z+2, r26	; 0x02
 3e0:	b3 83       	std	Z+3, r27	; 0x03

	/* Error sum. */
	my_pid.err_sum += my_pid.err;
 3e2:	e2 e4       	ldi	r30, 0x42	; 66
 3e4:	f1 e0       	ldi	r31, 0x01	; 1
 3e6:	40 81       	ld	r20, Z
 3e8:	51 81       	ldd	r21, Z+1	; 0x01
 3ea:	62 81       	ldd	r22, Z+2	; 0x02
 3ec:	73 81       	ldd	r23, Z+3	; 0x03
 3ee:	d9 01       	movw	r26, r18
 3f0:	8d 90       	ld	r8, X+
 3f2:	9d 90       	ld	r9, X+
 3f4:	ad 90       	ld	r10, X+
 3f6:	bc 90       	ld	r11, X
 3f8:	d5 01       	movw	r26, r10
 3fa:	c4 01       	movw	r24, r8
 3fc:	84 0f       	add	r24, r20
 3fe:	95 1f       	adc	r25, r21
 400:	a6 1f       	adc	r26, r22
 402:	b7 1f       	adc	r27, r23
 404:	80 83       	st	Z, r24
 406:	91 83       	std	Z+1, r25	; 0x01
 408:	a2 83       	std	Z+2, r26	; 0x02
 40a:	b3 83       	std	Z+3, r27	; 0x03
	if(my_pid.err_sum > 200) {
 40c:	80 81       	ld	r24, Z
 40e:	91 81       	ldd	r25, Z+1	; 0x01
 410:	a2 81       	ldd	r26, Z+2	; 0x02
 412:	b3 81       	ldd	r27, Z+3	; 0x03
 414:	89 3c       	cpi	r24, 0xC9	; 201
 416:	91 05       	cpc	r25, r1
 418:	a1 05       	cpc	r26, r1
 41a:	b1 05       	cpc	r27, r1
 41c:	64 f0       	brlt	.+24     	; 0x436 <pid+0xba>
		my_pid.err_sum = 200;
 41e:	88 ec       	ldi	r24, 0xC8	; 200
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	a0 e0       	ldi	r26, 0x00	; 0
 424:	b0 e0       	ldi	r27, 0x00	; 0
 426:	80 93 42 01 	sts	0x0142, r24
 42a:	90 93 43 01 	sts	0x0143, r25
 42e:	a0 93 44 01 	sts	0x0144, r26
 432:	b0 93 45 01 	sts	0x0145, r27
	}

	/* Error difference. */
	my_pid.err_diff = my_pid.err - my_pid.last_err;
 436:	26 e3       	ldi	r18, 0x36	; 54
 438:	31 e0       	ldi	r19, 0x01	; 1
 43a:	f9 01       	movw	r30, r18
 43c:	80 81       	ld	r24, Z
 43e:	91 81       	ldd	r25, Z+1	; 0x01
 440:	a2 81       	ldd	r26, Z+2	; 0x02
 442:	b3 81       	ldd	r27, Z+3	; 0x03
 444:	40 91 3a 01 	lds	r20, 0x013A
 448:	50 91 3b 01 	lds	r21, 0x013B
 44c:	60 91 3c 01 	lds	r22, 0x013C
 450:	70 91 3d 01 	lds	r23, 0x013D
 454:	84 1b       	sub	r24, r20
 456:	95 0b       	sbc	r25, r21
 458:	a6 0b       	sbc	r26, r22
 45a:	b7 0b       	sbc	r27, r23
 45c:	ee e3       	ldi	r30, 0x3E	; 62
 45e:	f1 e0       	ldi	r31, 0x01	; 1
 460:	80 83       	st	Z, r24
 462:	91 83       	std	Z+1, r25	; 0x01
 464:	a2 83       	std	Z+2, r26	; 0x02
 466:	b3 83       	std	Z+3, r27	; 0x03

	/* PID output */
	temp = (my_pid.kp*my_pid.err + my_pid.ki*my_pid.err_sum + my_pid.kd*my_pid.err_diff)/PID_CONST;
 468:	80 90 1a 01 	lds	r8, 0x011A
 46c:	90 90 1b 01 	lds	r9, 0x011B
 470:	a0 90 1c 01 	lds	r10, 0x011C
 474:	b0 90 1d 01 	lds	r11, 0x011D
 478:	d9 01       	movw	r26, r18
 47a:	6d 91       	ld	r22, X+
 47c:	7d 91       	ld	r23, X+
 47e:	8d 91       	ld	r24, X+
 480:	9c 91       	ld	r25, X
 482:	20 91 1e 01 	lds	r18, 0x011E
 486:	30 91 1f 01 	lds	r19, 0x011F
 48a:	40 91 20 01 	lds	r20, 0x0120
 48e:	50 91 21 01 	lds	r21, 0x0121
 492:	29 83       	std	Y+1, r18	; 0x01
 494:	3a 83       	std	Y+2, r19	; 0x02
 496:	4b 83       	std	Y+3, r20	; 0x03
 498:	5c 83       	std	Y+4, r21	; 0x04
 49a:	40 90 42 01 	lds	r4, 0x0142
 49e:	50 90 43 01 	lds	r5, 0x0143
 4a2:	60 90 44 01 	lds	r6, 0x0144
 4a6:	70 90 45 01 	lds	r7, 0x0145
 4aa:	20 91 22 01 	lds	r18, 0x0122
 4ae:	30 91 23 01 	lds	r19, 0x0123
 4b2:	40 91 24 01 	lds	r20, 0x0124
 4b6:	50 91 25 01 	lds	r21, 0x0125
 4ba:	2d 83       	std	Y+5, r18	; 0x05
 4bc:	3e 83       	std	Y+6, r19	; 0x06
 4be:	4f 83       	std	Y+7, r20	; 0x07
 4c0:	58 87       	std	Y+8, r21	; 0x08
 4c2:	20 81       	ld	r18, Z
 4c4:	31 81       	ldd	r19, Z+1	; 0x01
 4c6:	42 81       	ldd	r20, Z+2	; 0x02
 4c8:	53 81       	ldd	r21, Z+3	; 0x03
 4ca:	29 87       	std	Y+9, r18	; 0x09
 4cc:	3a 87       	std	Y+10, r19	; 0x0a
 4ce:	4b 87       	std	Y+11, r20	; 0x0b
 4d0:	5c 87       	std	Y+12, r21	; 0x0c
 4d2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__floatsisf>
 4d6:	9b 01       	movw	r18, r22
 4d8:	ac 01       	movw	r20, r24
 4da:	c5 01       	movw	r24, r10
 4dc:	b4 01       	movw	r22, r8
 4de:	0e 94 29 06 	call	0xc52	; 0xc52 <__mulsf3>
 4e2:	4b 01       	movw	r8, r22
 4e4:	5c 01       	movw	r10, r24
 4e6:	c3 01       	movw	r24, r6
 4e8:	b2 01       	movw	r22, r4
 4ea:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__floatsisf>
 4ee:	9b 01       	movw	r18, r22
 4f0:	ac 01       	movw	r20, r24
 4f2:	69 81       	ldd	r22, Y+1	; 0x01
 4f4:	7a 81       	ldd	r23, Y+2	; 0x02
 4f6:	8b 81       	ldd	r24, Y+3	; 0x03
 4f8:	9c 81       	ldd	r25, Y+4	; 0x04
 4fa:	0e 94 29 06 	call	0xc52	; 0xc52 <__mulsf3>
 4fe:	9b 01       	movw	r18, r22
 500:	ac 01       	movw	r20, r24
 502:	c5 01       	movw	r24, r10
 504:	b4 01       	movw	r22, r8
 506:	0e 94 9e 04 	call	0x93c	; 0x93c <__addsf3>
 50a:	4b 01       	movw	r8, r22
 50c:	5c 01       	movw	r10, r24
 50e:	69 85       	ldd	r22, Y+9	; 0x09
 510:	7a 85       	ldd	r23, Y+10	; 0x0a
 512:	8b 85       	ldd	r24, Y+11	; 0x0b
 514:	9c 85       	ldd	r25, Y+12	; 0x0c
 516:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__floatsisf>
 51a:	9b 01       	movw	r18, r22
 51c:	ac 01       	movw	r20, r24
 51e:	6d 81       	ldd	r22, Y+5	; 0x05
 520:	7e 81       	ldd	r23, Y+6	; 0x06
 522:	8f 81       	ldd	r24, Y+7	; 0x07
 524:	98 85       	ldd	r25, Y+8	; 0x08
 526:	0e 94 29 06 	call	0xc52	; 0xc52 <__mulsf3>
 52a:	9b 01       	movw	r18, r22
 52c:	ac 01       	movw	r20, r24
 52e:	c5 01       	movw	r24, r10
 530:	b4 01       	movw	r22, r8
 532:	0e 94 9e 04 	call	0x93c	; 0x93c <__addsf3>
 536:	20 e0       	ldi	r18, 0x00	; 0
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	40 e2       	ldi	r20, 0x20	; 32
 53c:	51 e4       	ldi	r21, 0x41	; 65
 53e:	0e 94 02 05 	call	0xa04	; 0xa04 <__divsf3>
 542:	0e 94 6a 05 	call	0xad4	; 0xad4 <__fixsfsi>
	if(temp > my_pid.pwm_period) {
 546:	20 91 32 01 	lds	r18, 0x0132
 54a:	30 91 33 01 	lds	r19, 0x0133
 54e:	26 17       	cp	r18, r22
 550:	37 07       	cpc	r19, r23
 552:	48 f4       	brcc	.+18     	; 0x566 <pid+0x1ea>
		my_pid.pwm_top_val = my_pid.pwm_period;
 554:	80 91 32 01 	lds	r24, 0x0132
 558:	90 91 33 01 	lds	r25, 0x0133
 55c:	90 93 31 01 	sts	0x0131, r25
 560:	80 93 30 01 	sts	0x0130, r24
 564:	04 c0       	rjmp	.+8      	; 0x56e <pid+0x1f2>
	} else {
		my_pid.pwm_top_val = temp;
 566:	70 93 31 01 	sts	0x0131, r23
 56a:	60 93 30 01 	sts	0x0130, r22
	}

	/* Memorize last values. */
	my_pid.last_count = count;
 56e:	c0 92 46 01 	sts	0x0146, r12
 572:	d0 92 47 01 	sts	0x0147, r13
 576:	e0 92 48 01 	sts	0x0148, r14
 57a:	f0 92 49 01 	sts	0x0149, r15
	my_pid.last_err = my_pid.err;
 57e:	80 91 36 01 	lds	r24, 0x0136
 582:	90 91 37 01 	lds	r25, 0x0137
 586:	a0 91 38 01 	lds	r26, 0x0138
 58a:	b0 91 39 01 	lds	r27, 0x0139
 58e:	80 93 3a 01 	sts	0x013A, r24
 592:	90 93 3b 01 	sts	0x013B, r25
 596:	a0 93 3c 01 	sts	0x013C, r26
 59a:	b0 93 3d 01 	sts	0x013D, r27
}
 59e:	2c 96       	adiw	r28, 0x0c	; 12
 5a0:	0f b6       	in	r0, 0x3f	; 63
 5a2:	f8 94       	cli
 5a4:	de bf       	out	0x3e, r29	; 62
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	cd bf       	out	0x3d, r28	; 61
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	ff 90       	pop	r15
 5b0:	ef 90       	pop	r14
 5b2:	df 90       	pop	r13
 5b4:	cf 90       	pop	r12
 5b6:	bf 90       	pop	r11
 5b8:	af 90       	pop	r10
 5ba:	9f 90       	pop	r9
 5bc:	8f 90       	pop	r8
 5be:	7f 90       	pop	r7
 5c0:	6f 90       	pop	r6
 5c2:	5f 90       	pop	r5
 5c4:	4f 90       	pop	r4
 5c6:	08 95       	ret

000005c8 <pause_loop>:
	}
}

void pause_loop(uint16_t pause)
{
	pause_time = pause;
 5c8:	a0 e0       	ldi	r26, 0x00	; 0
 5ca:	b0 e0       	ldi	r27, 0x00	; 0
 5cc:	80 93 09 01 	sts	0x0109, r24
 5d0:	90 93 0a 01 	sts	0x010A, r25
 5d4:	a0 93 0b 01 	sts	0x010B, r26
 5d8:	b0 93 0c 01 	sts	0x010C, r27
	while(pause_time);
 5dc:	80 91 09 01 	lds	r24, 0x0109
 5e0:	90 91 0a 01 	lds	r25, 0x010A
 5e4:	a0 91 0b 01 	lds	r26, 0x010B
 5e8:	b0 91 0c 01 	lds	r27, 0x010C
 5ec:	89 2b       	or	r24, r25
 5ee:	8a 2b       	or	r24, r26
 5f0:	8b 2b       	or	r24, r27
 5f2:	a1 f7       	brne	.-24     	; 0x5dc <pause_loop+0x14>
}
 5f4:	08 95       	ret

000005f6 <__vector_13>:
		break;
	}
}

ISR(TIMER1_OVF_vect)
{
 5f6:	1f 92       	push	r1
 5f8:	0f 92       	push	r0
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	0f 92       	push	r0
 5fe:	11 24       	eor	r1, r1
 600:	2f 93       	push	r18
 602:	3f 93       	push	r19
 604:	4f 93       	push	r20
 606:	5f 93       	push	r21
 608:	6f 93       	push	r22
 60a:	7f 93       	push	r23
 60c:	8f 93       	push	r24
 60e:	9f 93       	push	r25
 610:	af 93       	push	r26
 612:	bf 93       	push	r27
 614:	ef 93       	push	r30
 616:	ff 93       	push	r31
	if(pwm_flag == PWM_ON) {
 618:	80 91 08 01 	lds	r24, 0x0108
 61c:	81 30       	cpi	r24, 0x01	; 1
 61e:	09 f0       	breq	.+2      	; 0x622 <__vector_13+0x2c>
 620:	5a c0       	rjmp	.+180    	; 0x6d6 <__vector_13+0xe0>
		my_pwm.pwm_tick++;
 622:	e5 e5       	ldi	r30, 0x55	; 85
 624:	f1 e0       	ldi	r31, 0x01	; 1
 626:	80 81       	ld	r24, Z
 628:	91 81       	ldd	r25, Z+1	; 0x01
 62a:	a2 81       	ldd	r26, Z+2	; 0x02
 62c:	b3 81       	ldd	r27, Z+3	; 0x03
 62e:	01 96       	adiw	r24, 0x01	; 1
 630:	a1 1d       	adc	r26, r1
 632:	b1 1d       	adc	r27, r1
 634:	80 83       	st	Z, r24
 636:	91 83       	std	Z+1, r25	; 0x01
 638:	a2 83       	std	Z+2, r26	; 0x02
 63a:	b3 83       	std	Z+3, r27	; 0x03
		if(my_pwm.pwm_tick >= my_pwm.period && my_pwm.top_val > 0) {
 63c:	40 81       	ld	r20, Z
 63e:	51 81       	ldd	r21, Z+1	; 0x01
 640:	62 81       	ldd	r22, Z+2	; 0x02
 642:	73 81       	ldd	r23, Z+3	; 0x03
 644:	80 91 4d 01 	lds	r24, 0x014D
 648:	90 91 4e 01 	lds	r25, 0x014E
 64c:	a0 91 4f 01 	lds	r26, 0x014F
 650:	b0 91 50 01 	lds	r27, 0x0150
 654:	48 17       	cp	r20, r24
 656:	59 07       	cpc	r21, r25
 658:	6a 07       	cpc	r22, r26
 65a:	7b 07       	cpc	r23, r27
 65c:	f0 f0       	brcs	.+60     	; 0x69a <__vector_13+0xa4>
 65e:	80 91 51 01 	lds	r24, 0x0151
 662:	90 91 52 01 	lds	r25, 0x0152
 666:	a0 91 53 01 	lds	r26, 0x0153
 66a:	b0 91 54 01 	lds	r27, 0x0154
 66e:	89 2b       	or	r24, r25
 670:	8a 2b       	or	r24, r26
 672:	8b 2b       	or	r24, r27
 674:	91 f0       	breq	.+36     	; 0x69a <__vector_13+0xa4>
			write_pin(my_pwm.port, my_pwm.pin, HIGH);
 676:	60 91 4c 01 	lds	r22, 0x014C
 67a:	80 91 4a 01 	lds	r24, 0x014A
 67e:	90 91 4b 01 	lds	r25, 0x014B
 682:	41 e0       	ldi	r20, 0x01	; 1
 684:	0e 94 33 01 	call	0x266	; 0x266 <write_pin>
			my_pwm.pwm_tick = 0;
 688:	10 92 55 01 	sts	0x0155, r1
 68c:	10 92 56 01 	sts	0x0156, r1
 690:	10 92 57 01 	sts	0x0157, r1
 694:	10 92 58 01 	sts	0x0158, r1
 698:	1e c0       	rjmp	.+60     	; 0x6d6 <__vector_13+0xe0>
		} else if(my_pwm.pwm_tick >= my_pwm.top_val) {
 69a:	40 91 55 01 	lds	r20, 0x0155
 69e:	50 91 56 01 	lds	r21, 0x0156
 6a2:	60 91 57 01 	lds	r22, 0x0157
 6a6:	70 91 58 01 	lds	r23, 0x0158
 6aa:	80 91 51 01 	lds	r24, 0x0151
 6ae:	90 91 52 01 	lds	r25, 0x0152
 6b2:	a0 91 53 01 	lds	r26, 0x0153
 6b6:	b0 91 54 01 	lds	r27, 0x0154
 6ba:	48 17       	cp	r20, r24
 6bc:	59 07       	cpc	r21, r25
 6be:	6a 07       	cpc	r22, r26
 6c0:	7b 07       	cpc	r23, r27
 6c2:	48 f0       	brcs	.+18     	; 0x6d6 <__vector_13+0xe0>
			write_pin(my_pwm.port, my_pwm.pin, LOW);
 6c4:	60 91 4c 01 	lds	r22, 0x014C
 6c8:	80 91 4a 01 	lds	r24, 0x014A
 6cc:	90 91 4b 01 	lds	r25, 0x014B
 6d0:	40 e0       	ldi	r20, 0x00	; 0
 6d2:	0e 94 33 01 	call	0x266	; 0x266 <write_pin>
		}
	}

	if(pid_flag == 1) {
 6d6:	80 91 07 01 	lds	r24, 0x0107
 6da:	81 30       	cpi	r24, 0x01	; 1
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <__vector_13+0xea>
 6de:	52 c0       	rjmp	.+164    	; 0x784 <__vector_13+0x18e>
		my_pid.pid_tick_sample++;
 6e0:	ee e2       	ldi	r30, 0x2E	; 46
 6e2:	f1 e0       	ldi	r31, 0x01	; 1
 6e4:	80 81       	ld	r24, Z
 6e6:	91 81       	ldd	r25, Z+1	; 0x01
 6e8:	01 96       	adiw	r24, 0x01	; 1
 6ea:	91 83       	std	Z+1, r25	; 0x01
 6ec:	80 83       	st	Z, r24
		if(my_pid.pid_tick_sample >= my_pid.sample_period) {
 6ee:	20 81       	ld	r18, Z
 6f0:	31 81       	ldd	r19, Z+1	; 0x01
 6f2:	80 91 28 01 	lds	r24, 0x0128
 6f6:	90 91 29 01 	lds	r25, 0x0129
 6fa:	28 17       	cp	r18, r24
 6fc:	39 07       	cpc	r19, r25
 6fe:	30 f0       	brcs	.+12     	; 0x70c <__vector_13+0x116>
			my_pid.pid_tick_sample = 0;
 700:	10 92 2f 01 	sts	0x012F, r1
 704:	10 92 2e 01 	sts	0x012E, r1
			pid();
 708:	0e 94 be 01 	call	0x37c	; 0x37c <pid>
		}

		my_pid.pid_pwm_tick++;
 70c:	e4 e3       	ldi	r30, 0x34	; 52
 70e:	f1 e0       	ldi	r31, 0x01	; 1
 710:	80 81       	ld	r24, Z
 712:	91 81       	ldd	r25, Z+1	; 0x01
 714:	01 96       	adiw	r24, 0x01	; 1
 716:	91 83       	std	Z+1, r25	; 0x01
 718:	80 83       	st	Z, r24
		if(my_pid.pid_pwm_tick >= my_pid.pwm_period && my_pid.pwm_top_val > 0) {
 71a:	20 81       	ld	r18, Z
 71c:	31 81       	ldd	r19, Z+1	; 0x01
 71e:	80 91 32 01 	lds	r24, 0x0132
 722:	90 91 33 01 	lds	r25, 0x0133
 726:	28 17       	cp	r18, r24
 728:	39 07       	cpc	r19, r25
 72a:	b0 f0       	brcs	.+44     	; 0x758 <__vector_13+0x162>
 72c:	80 91 30 01 	lds	r24, 0x0130
 730:	90 91 31 01 	lds	r25, 0x0131
 734:	89 2b       	or	r24, r25
 736:	81 f0       	breq	.+32     	; 0x758 <__vector_13+0x162>
			my_pid.pid_pwm_tick = 0;
 738:	10 92 35 01 	sts	0x0135, r1
 73c:	10 92 34 01 	sts	0x0134, r1

			if(my_pid.dir == CW) {
 740:	80 91 19 01 	lds	r24, 0x0119
 744:	81 11       	cpse	r24, r1
 746:	02 c0       	rjmp	.+4      	; 0x74c <__vector_13+0x156>
				MOT_PORT |= (1 << MOT_PIN0);
 748:	29 9a       	sbi	0x05, 1	; 5
 74a:	1c c0       	rjmp	.+56     	; 0x784 <__vector_13+0x18e>
			} else if(my_pid.dir == CCW) {
 74c:	80 91 19 01 	lds	r24, 0x0119
 750:	81 30       	cpi	r24, 0x01	; 1
 752:	c1 f4       	brne	.+48     	; 0x784 <__vector_13+0x18e>
				MOT_PORT |= (1 << MOT_PIN1);
 754:	2a 9a       	sbi	0x05, 2	; 5
 756:	16 c0       	rjmp	.+44     	; 0x784 <__vector_13+0x18e>
			}
		} else if (my_pid.pid_pwm_tick >= my_pid.pwm_top_val) {
 758:	20 91 34 01 	lds	r18, 0x0134
 75c:	30 91 35 01 	lds	r19, 0x0135
 760:	80 91 30 01 	lds	r24, 0x0130
 764:	90 91 31 01 	lds	r25, 0x0131
 768:	28 17       	cp	r18, r24
 76a:	39 07       	cpc	r19, r25
 76c:	58 f0       	brcs	.+22     	; 0x784 <__vector_13+0x18e>
			if(my_pid.dir == CW) {
 76e:	80 91 19 01 	lds	r24, 0x0119
 772:	81 11       	cpse	r24, r1
 774:	02 c0       	rjmp	.+4      	; 0x77a <__vector_13+0x184>
				MOT_PORT &= ~(1 << MOT_PIN0);
 776:	29 98       	cbi	0x05, 1	; 5
 778:	05 c0       	rjmp	.+10     	; 0x784 <__vector_13+0x18e>
			} else if(my_pid.dir == CCW) {
 77a:	80 91 19 01 	lds	r24, 0x0119
 77e:	81 30       	cpi	r24, 0x01	; 1
 780:	09 f4       	brne	.+2      	; 0x784 <__vector_13+0x18e>
				MOT_PORT &= ~(1 << MOT_PIN1);
 782:	2a 98       	cbi	0x05, 2	; 5
			}
		}
	}


	if(timer_node_0 > 0) timer_node_0--;
 784:	80 91 15 01 	lds	r24, 0x0115
 788:	90 91 16 01 	lds	r25, 0x0116
 78c:	a0 91 17 01 	lds	r26, 0x0117
 790:	b0 91 18 01 	lds	r27, 0x0118
 794:	89 2b       	or	r24, r25
 796:	8a 2b       	or	r24, r26
 798:	8b 2b       	or	r24, r27
 79a:	99 f0       	breq	.+38     	; 0x7c2 <__vector_13+0x1cc>
 79c:	80 91 15 01 	lds	r24, 0x0115
 7a0:	90 91 16 01 	lds	r25, 0x0116
 7a4:	a0 91 17 01 	lds	r26, 0x0117
 7a8:	b0 91 18 01 	lds	r27, 0x0118
 7ac:	01 97       	sbiw	r24, 0x01	; 1
 7ae:	a1 09       	sbc	r26, r1
 7b0:	b1 09       	sbc	r27, r1
 7b2:	80 93 15 01 	sts	0x0115, r24
 7b6:	90 93 16 01 	sts	0x0116, r25
 7ba:	a0 93 17 01 	sts	0x0117, r26
 7be:	b0 93 18 01 	sts	0x0118, r27
	if(timer_node_1 > 0) timer_node_1--;
 7c2:	80 91 11 01 	lds	r24, 0x0111
 7c6:	90 91 12 01 	lds	r25, 0x0112
 7ca:	a0 91 13 01 	lds	r26, 0x0113
 7ce:	b0 91 14 01 	lds	r27, 0x0114
 7d2:	89 2b       	or	r24, r25
 7d4:	8a 2b       	or	r24, r26
 7d6:	8b 2b       	or	r24, r27
 7d8:	99 f0       	breq	.+38     	; 0x800 <__vector_13+0x20a>
 7da:	80 91 11 01 	lds	r24, 0x0111
 7de:	90 91 12 01 	lds	r25, 0x0112
 7e2:	a0 91 13 01 	lds	r26, 0x0113
 7e6:	b0 91 14 01 	lds	r27, 0x0114
 7ea:	01 97       	sbiw	r24, 0x01	; 1
 7ec:	a1 09       	sbc	r26, r1
 7ee:	b1 09       	sbc	r27, r1
 7f0:	80 93 11 01 	sts	0x0111, r24
 7f4:	90 93 12 01 	sts	0x0112, r25
 7f8:	a0 93 13 01 	sts	0x0113, r26
 7fc:	b0 93 14 01 	sts	0x0114, r27
	if(timer_node_2 > 0) timer_node_2--;
 800:	80 91 0d 01 	lds	r24, 0x010D
 804:	90 91 0e 01 	lds	r25, 0x010E
 808:	a0 91 0f 01 	lds	r26, 0x010F
 80c:	b0 91 10 01 	lds	r27, 0x0110
 810:	89 2b       	or	r24, r25
 812:	8a 2b       	or	r24, r26
 814:	8b 2b       	or	r24, r27
 816:	99 f0       	breq	.+38     	; 0x83e <__vector_13+0x248>
 818:	80 91 0d 01 	lds	r24, 0x010D
 81c:	90 91 0e 01 	lds	r25, 0x010E
 820:	a0 91 0f 01 	lds	r26, 0x010F
 824:	b0 91 10 01 	lds	r27, 0x0110
 828:	01 97       	sbiw	r24, 0x01	; 1
 82a:	a1 09       	sbc	r26, r1
 82c:	b1 09       	sbc	r27, r1
 82e:	80 93 0d 01 	sts	0x010D, r24
 832:	90 93 0e 01 	sts	0x010E, r25
 836:	a0 93 0f 01 	sts	0x010F, r26
 83a:	b0 93 10 01 	sts	0x0110, r27
	if(pause_time > 0) pause_time--;
 83e:	80 91 09 01 	lds	r24, 0x0109
 842:	90 91 0a 01 	lds	r25, 0x010A
 846:	a0 91 0b 01 	lds	r26, 0x010B
 84a:	b0 91 0c 01 	lds	r27, 0x010C
 84e:	89 2b       	or	r24, r25
 850:	8a 2b       	or	r24, r26
 852:	8b 2b       	or	r24, r27
 854:	99 f0       	breq	.+38     	; 0x87c <__vector_13+0x286>
 856:	80 91 09 01 	lds	r24, 0x0109
 85a:	90 91 0a 01 	lds	r25, 0x010A
 85e:	a0 91 0b 01 	lds	r26, 0x010B
 862:	b0 91 0c 01 	lds	r27, 0x010C
 866:	01 97       	sbiw	r24, 0x01	; 1
 868:	a1 09       	sbc	r26, r1
 86a:	b1 09       	sbc	r27, r1
 86c:	80 93 09 01 	sts	0x0109, r24
 870:	90 93 0a 01 	sts	0x010A, r25
 874:	a0 93 0b 01 	sts	0x010B, r26
 878:	b0 93 0c 01 	sts	0x010C, r27
}
 87c:	ff 91       	pop	r31
 87e:	ef 91       	pop	r30
 880:	bf 91       	pop	r27
 882:	af 91       	pop	r26
 884:	9f 91       	pop	r25
 886:	8f 91       	pop	r24
 888:	7f 91       	pop	r23
 88a:	6f 91       	pop	r22
 88c:	5f 91       	pop	r21
 88e:	4f 91       	pop	r20
 890:	3f 91       	pop	r19
 892:	2f 91       	pop	r18
 894:	0f 90       	pop	r0
 896:	0f be       	out	0x3f, r0	; 63
 898:	0f 90       	pop	r0
 89a:	1f 90       	pop	r1
 89c:	18 95       	reti

0000089e <clear_buffer>:
	*dest = '\0';
}

void clear_buffer()
{
	uart0_index = 0;
 89e:	10 92 59 01 	sts	0x0159, r1
	uart0_buff[uart0_index] = '\0';
 8a2:	e0 91 59 01 	lds	r30, 0x0159
 8a6:	f0 e0       	ldi	r31, 0x00	; 0
 8a8:	e5 5a       	subi	r30, 0xA5	; 165
 8aa:	fe 4f       	sbci	r31, 0xFE	; 254
 8ac:	10 82       	st	Z, r1
 8ae:	08 95       	ret

000008b0 <__vector_18>:
//{
//	uart0_sent = 1;
//}

ISR(USART_RX_vect)
{
 8b0:	1f 92       	push	r1
 8b2:	0f 92       	push	r0
 8b4:	0f b6       	in	r0, 0x3f	; 63
 8b6:	0f 92       	push	r0
 8b8:	11 24       	eor	r1, r1
 8ba:	2f 93       	push	r18
 8bc:	3f 93       	push	r19
 8be:	4f 93       	push	r20
 8c0:	5f 93       	push	r21
 8c2:	6f 93       	push	r22
 8c4:	7f 93       	push	r23
 8c6:	8f 93       	push	r24
 8c8:	9f 93       	push	r25
 8ca:	af 93       	push	r26
 8cc:	bf 93       	push	r27
 8ce:	ef 93       	push	r30
 8d0:	ff 93       	push	r31
	char temp;

	temp = UDR0;
 8d2:	80 91 c6 00 	lds	r24, 0x00C6
	if (uart0_index < (UART0_SIZE - 2)) {
 8d6:	90 91 59 01 	lds	r25, 0x0159
 8da:	9d 3f       	cpi	r25, 0xFD	; 253
 8dc:	d8 f4       	brcc	.+54     	; 0x914 <__stack+0x15>
		/* There is room for more characters. */
		uart0_buff[uart0_index] = temp;
 8de:	e0 91 59 01 	lds	r30, 0x0159
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	e5 5a       	subi	r30, 0xA5	; 165
 8e6:	fe 4f       	sbci	r31, 0xFE	; 254
 8e8:	80 83       	st	Z, r24
		uart0_buff[uart0_index + 1] = '\0';
 8ea:	e0 91 59 01 	lds	r30, 0x0159
 8ee:	f0 e0       	ldi	r31, 0x00	; 0
 8f0:	e4 5a       	subi	r30, 0xA4	; 164
 8f2:	fe 4f       	sbci	r31, 0xFE	; 254
 8f4:	10 82       	st	Z, r1
		uart0_index++;
 8f6:	90 91 59 01 	lds	r25, 0x0159
 8fa:	9f 5f       	subi	r25, 0xFF	; 255
 8fc:	90 93 59 01 	sts	0x0159, r25
		if (temp == '\0' || temp == '\n' || temp == '\r') {
 900:	88 23       	and	r24, r24
 902:	21 f0       	breq	.+8      	; 0x90c <__stack+0xd>
 904:	8a 30       	cpi	r24, 0x0A	; 10
 906:	11 f0       	breq	.+4      	; 0x90c <__stack+0xd>
 908:	8d 30       	cpi	r24, 0x0D	; 13
 90a:	31 f4       	brne	.+12     	; 0x918 <__stack+0x19>
			uart0_received = 1;
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	80 93 5a 01 	sts	0x015A, r24
 912:	02 c0       	rjmp	.+4      	; 0x918 <__stack+0x19>
		}
	} else {
		/* Wait for buffer to be cleared. */
		clear_buffer();	
 914:	0e 94 4f 04 	call	0x89e	; 0x89e <clear_buffer>
	}
}
 918:	ff 91       	pop	r31
 91a:	ef 91       	pop	r30
 91c:	bf 91       	pop	r27
 91e:	af 91       	pop	r26
 920:	9f 91       	pop	r25
 922:	8f 91       	pop	r24
 924:	7f 91       	pop	r23
 926:	6f 91       	pop	r22
 928:	5f 91       	pop	r21
 92a:	4f 91       	pop	r20
 92c:	3f 91       	pop	r19
 92e:	2f 91       	pop	r18
 930:	0f 90       	pop	r0
 932:	0f be       	out	0x3f, r0	; 63
 934:	0f 90       	pop	r0
 936:	1f 90       	pop	r1
 938:	18 95       	reti

0000093a <__subsf3>:
 93a:	50 58       	subi	r21, 0x80	; 128

0000093c <__addsf3>:
 93c:	bb 27       	eor	r27, r27
 93e:	aa 27       	eor	r26, r26
 940:	0e d0       	rcall	.+28     	; 0x95e <__addsf3x>
 942:	4d c1       	rjmp	.+666    	; 0xbde <__fp_round>
 944:	3e d1       	rcall	.+636    	; 0xbc2 <__fp_pscA>
 946:	30 f0       	brcs	.+12     	; 0x954 <__addsf3+0x18>
 948:	43 d1       	rcall	.+646    	; 0xbd0 <__fp_pscB>
 94a:	20 f0       	brcs	.+8      	; 0x954 <__addsf3+0x18>
 94c:	31 f4       	brne	.+12     	; 0x95a <__addsf3+0x1e>
 94e:	9f 3f       	cpi	r25, 0xFF	; 255
 950:	11 f4       	brne	.+4      	; 0x956 <__addsf3+0x1a>
 952:	1e f4       	brtc	.+6      	; 0x95a <__addsf3+0x1e>
 954:	33 c1       	rjmp	.+614    	; 0xbbc <__fp_nan>
 956:	0e f4       	brtc	.+2      	; 0x95a <__addsf3+0x1e>
 958:	e0 95       	com	r30
 95a:	e7 fb       	bst	r30, 7
 95c:	29 c1       	rjmp	.+594    	; 0xbb0 <__fp_inf>

0000095e <__addsf3x>:
 95e:	e9 2f       	mov	r30, r25
 960:	4f d1       	rcall	.+670    	; 0xc00 <__fp_split3>
 962:	80 f3       	brcs	.-32     	; 0x944 <__addsf3+0x8>
 964:	ba 17       	cp	r27, r26
 966:	62 07       	cpc	r22, r18
 968:	73 07       	cpc	r23, r19
 96a:	84 07       	cpc	r24, r20
 96c:	95 07       	cpc	r25, r21
 96e:	18 f0       	brcs	.+6      	; 0x976 <__addsf3x+0x18>
 970:	71 f4       	brne	.+28     	; 0x98e <__addsf3x+0x30>
 972:	9e f5       	brtc	.+102    	; 0x9da <__addsf3x+0x7c>
 974:	67 c1       	rjmp	.+718    	; 0xc44 <__fp_zero>
 976:	0e f4       	brtc	.+2      	; 0x97a <__addsf3x+0x1c>
 978:	e0 95       	com	r30
 97a:	0b 2e       	mov	r0, r27
 97c:	ba 2f       	mov	r27, r26
 97e:	a0 2d       	mov	r26, r0
 980:	0b 01       	movw	r0, r22
 982:	b9 01       	movw	r22, r18
 984:	90 01       	movw	r18, r0
 986:	0c 01       	movw	r0, r24
 988:	ca 01       	movw	r24, r20
 98a:	a0 01       	movw	r20, r0
 98c:	11 24       	eor	r1, r1
 98e:	ff 27       	eor	r31, r31
 990:	59 1b       	sub	r21, r25
 992:	99 f0       	breq	.+38     	; 0x9ba <__addsf3x+0x5c>
 994:	59 3f       	cpi	r21, 0xF9	; 249
 996:	50 f4       	brcc	.+20     	; 0x9ac <__addsf3x+0x4e>
 998:	50 3e       	cpi	r21, 0xE0	; 224
 99a:	68 f1       	brcs	.+90     	; 0x9f6 <__addsf3x+0x98>
 99c:	1a 16       	cp	r1, r26
 99e:	f0 40       	sbci	r31, 0x00	; 0
 9a0:	a2 2f       	mov	r26, r18
 9a2:	23 2f       	mov	r18, r19
 9a4:	34 2f       	mov	r19, r20
 9a6:	44 27       	eor	r20, r20
 9a8:	58 5f       	subi	r21, 0xF8	; 248
 9aa:	f3 cf       	rjmp	.-26     	; 0x992 <__addsf3x+0x34>
 9ac:	46 95       	lsr	r20
 9ae:	37 95       	ror	r19
 9b0:	27 95       	ror	r18
 9b2:	a7 95       	ror	r26
 9b4:	f0 40       	sbci	r31, 0x00	; 0
 9b6:	53 95       	inc	r21
 9b8:	c9 f7       	brne	.-14     	; 0x9ac <__addsf3x+0x4e>
 9ba:	7e f4       	brtc	.+30     	; 0x9da <__addsf3x+0x7c>
 9bc:	1f 16       	cp	r1, r31
 9be:	ba 0b       	sbc	r27, r26
 9c0:	62 0b       	sbc	r22, r18
 9c2:	73 0b       	sbc	r23, r19
 9c4:	84 0b       	sbc	r24, r20
 9c6:	ba f0       	brmi	.+46     	; 0x9f6 <__addsf3x+0x98>
 9c8:	91 50       	subi	r25, 0x01	; 1
 9ca:	a1 f0       	breq	.+40     	; 0x9f4 <__addsf3x+0x96>
 9cc:	ff 0f       	add	r31, r31
 9ce:	bb 1f       	adc	r27, r27
 9d0:	66 1f       	adc	r22, r22
 9d2:	77 1f       	adc	r23, r23
 9d4:	88 1f       	adc	r24, r24
 9d6:	c2 f7       	brpl	.-16     	; 0x9c8 <__addsf3x+0x6a>
 9d8:	0e c0       	rjmp	.+28     	; 0x9f6 <__addsf3x+0x98>
 9da:	ba 0f       	add	r27, r26
 9dc:	62 1f       	adc	r22, r18
 9de:	73 1f       	adc	r23, r19
 9e0:	84 1f       	adc	r24, r20
 9e2:	48 f4       	brcc	.+18     	; 0x9f6 <__addsf3x+0x98>
 9e4:	87 95       	ror	r24
 9e6:	77 95       	ror	r23
 9e8:	67 95       	ror	r22
 9ea:	b7 95       	ror	r27
 9ec:	f7 95       	ror	r31
 9ee:	9e 3f       	cpi	r25, 0xFE	; 254
 9f0:	08 f0       	brcs	.+2      	; 0x9f4 <__addsf3x+0x96>
 9f2:	b3 cf       	rjmp	.-154    	; 0x95a <__addsf3+0x1e>
 9f4:	93 95       	inc	r25
 9f6:	88 0f       	add	r24, r24
 9f8:	08 f0       	brcs	.+2      	; 0x9fc <__addsf3x+0x9e>
 9fa:	99 27       	eor	r25, r25
 9fc:	ee 0f       	add	r30, r30
 9fe:	97 95       	ror	r25
 a00:	87 95       	ror	r24
 a02:	08 95       	ret

00000a04 <__divsf3>:
 a04:	0c d0       	rcall	.+24     	; 0xa1e <__divsf3x>
 a06:	eb c0       	rjmp	.+470    	; 0xbde <__fp_round>
 a08:	e3 d0       	rcall	.+454    	; 0xbd0 <__fp_pscB>
 a0a:	40 f0       	brcs	.+16     	; 0xa1c <__divsf3+0x18>
 a0c:	da d0       	rcall	.+436    	; 0xbc2 <__fp_pscA>
 a0e:	30 f0       	brcs	.+12     	; 0xa1c <__divsf3+0x18>
 a10:	21 f4       	brne	.+8      	; 0xa1a <__divsf3+0x16>
 a12:	5f 3f       	cpi	r21, 0xFF	; 255
 a14:	19 f0       	breq	.+6      	; 0xa1c <__divsf3+0x18>
 a16:	cc c0       	rjmp	.+408    	; 0xbb0 <__fp_inf>
 a18:	51 11       	cpse	r21, r1
 a1a:	15 c1       	rjmp	.+554    	; 0xc46 <__fp_szero>
 a1c:	cf c0       	rjmp	.+414    	; 0xbbc <__fp_nan>

00000a1e <__divsf3x>:
 a1e:	f0 d0       	rcall	.+480    	; 0xc00 <__fp_split3>
 a20:	98 f3       	brcs	.-26     	; 0xa08 <__divsf3+0x4>

00000a22 <__divsf3_pse>:
 a22:	99 23       	and	r25, r25
 a24:	c9 f3       	breq	.-14     	; 0xa18 <__divsf3+0x14>
 a26:	55 23       	and	r21, r21
 a28:	b1 f3       	breq	.-20     	; 0xa16 <__divsf3+0x12>
 a2a:	95 1b       	sub	r25, r21
 a2c:	55 0b       	sbc	r21, r21
 a2e:	bb 27       	eor	r27, r27
 a30:	aa 27       	eor	r26, r26
 a32:	62 17       	cp	r22, r18
 a34:	73 07       	cpc	r23, r19
 a36:	84 07       	cpc	r24, r20
 a38:	38 f0       	brcs	.+14     	; 0xa48 <__divsf3_pse+0x26>
 a3a:	9f 5f       	subi	r25, 0xFF	; 255
 a3c:	5f 4f       	sbci	r21, 0xFF	; 255
 a3e:	22 0f       	add	r18, r18
 a40:	33 1f       	adc	r19, r19
 a42:	44 1f       	adc	r20, r20
 a44:	aa 1f       	adc	r26, r26
 a46:	a9 f3       	breq	.-22     	; 0xa32 <__divsf3_pse+0x10>
 a48:	33 d0       	rcall	.+102    	; 0xab0 <__divsf3_pse+0x8e>
 a4a:	0e 2e       	mov	r0, r30
 a4c:	3a f0       	brmi	.+14     	; 0xa5c <__divsf3_pse+0x3a>
 a4e:	e0 e8       	ldi	r30, 0x80	; 128
 a50:	30 d0       	rcall	.+96     	; 0xab2 <__divsf3_pse+0x90>
 a52:	91 50       	subi	r25, 0x01	; 1
 a54:	50 40       	sbci	r21, 0x00	; 0
 a56:	e6 95       	lsr	r30
 a58:	00 1c       	adc	r0, r0
 a5a:	ca f7       	brpl	.-14     	; 0xa4e <__divsf3_pse+0x2c>
 a5c:	29 d0       	rcall	.+82     	; 0xab0 <__divsf3_pse+0x8e>
 a5e:	fe 2f       	mov	r31, r30
 a60:	27 d0       	rcall	.+78     	; 0xab0 <__divsf3_pse+0x8e>
 a62:	66 0f       	add	r22, r22
 a64:	77 1f       	adc	r23, r23
 a66:	88 1f       	adc	r24, r24
 a68:	bb 1f       	adc	r27, r27
 a6a:	26 17       	cp	r18, r22
 a6c:	37 07       	cpc	r19, r23
 a6e:	48 07       	cpc	r20, r24
 a70:	ab 07       	cpc	r26, r27
 a72:	b0 e8       	ldi	r27, 0x80	; 128
 a74:	09 f0       	breq	.+2      	; 0xa78 <__divsf3_pse+0x56>
 a76:	bb 0b       	sbc	r27, r27
 a78:	80 2d       	mov	r24, r0
 a7a:	bf 01       	movw	r22, r30
 a7c:	ff 27       	eor	r31, r31
 a7e:	93 58       	subi	r25, 0x83	; 131
 a80:	5f 4f       	sbci	r21, 0xFF	; 255
 a82:	2a f0       	brmi	.+10     	; 0xa8e <__divsf3_pse+0x6c>
 a84:	9e 3f       	cpi	r25, 0xFE	; 254
 a86:	51 05       	cpc	r21, r1
 a88:	68 f0       	brcs	.+26     	; 0xaa4 <__divsf3_pse+0x82>
 a8a:	92 c0       	rjmp	.+292    	; 0xbb0 <__fp_inf>
 a8c:	dc c0       	rjmp	.+440    	; 0xc46 <__fp_szero>
 a8e:	5f 3f       	cpi	r21, 0xFF	; 255
 a90:	ec f3       	brlt	.-6      	; 0xa8c <__divsf3_pse+0x6a>
 a92:	98 3e       	cpi	r25, 0xE8	; 232
 a94:	dc f3       	brlt	.-10     	; 0xa8c <__divsf3_pse+0x6a>
 a96:	86 95       	lsr	r24
 a98:	77 95       	ror	r23
 a9a:	67 95       	ror	r22
 a9c:	b7 95       	ror	r27
 a9e:	f7 95       	ror	r31
 aa0:	9f 5f       	subi	r25, 0xFF	; 255
 aa2:	c9 f7       	brne	.-14     	; 0xa96 <__divsf3_pse+0x74>
 aa4:	88 0f       	add	r24, r24
 aa6:	91 1d       	adc	r25, r1
 aa8:	96 95       	lsr	r25
 aaa:	87 95       	ror	r24
 aac:	97 f9       	bld	r25, 7
 aae:	08 95       	ret
 ab0:	e1 e0       	ldi	r30, 0x01	; 1
 ab2:	66 0f       	add	r22, r22
 ab4:	77 1f       	adc	r23, r23
 ab6:	88 1f       	adc	r24, r24
 ab8:	bb 1f       	adc	r27, r27
 aba:	62 17       	cp	r22, r18
 abc:	73 07       	cpc	r23, r19
 abe:	84 07       	cpc	r24, r20
 ac0:	ba 07       	cpc	r27, r26
 ac2:	20 f0       	brcs	.+8      	; 0xacc <__divsf3_pse+0xaa>
 ac4:	62 1b       	sub	r22, r18
 ac6:	73 0b       	sbc	r23, r19
 ac8:	84 0b       	sbc	r24, r20
 aca:	ba 0b       	sbc	r27, r26
 acc:	ee 1f       	adc	r30, r30
 ace:	88 f7       	brcc	.-30     	; 0xab2 <__divsf3_pse+0x90>
 ad0:	e0 95       	com	r30
 ad2:	08 95       	ret

00000ad4 <__fixsfsi>:
 ad4:	04 d0       	rcall	.+8      	; 0xade <__fixunssfsi>
 ad6:	68 94       	set
 ad8:	b1 11       	cpse	r27, r1
 ada:	b5 c0       	rjmp	.+362    	; 0xc46 <__fp_szero>
 adc:	08 95       	ret

00000ade <__fixunssfsi>:
 ade:	98 d0       	rcall	.+304    	; 0xc10 <__fp_splitA>
 ae0:	88 f0       	brcs	.+34     	; 0xb04 <__fixunssfsi+0x26>
 ae2:	9f 57       	subi	r25, 0x7F	; 127
 ae4:	90 f0       	brcs	.+36     	; 0xb0a <__fixunssfsi+0x2c>
 ae6:	b9 2f       	mov	r27, r25
 ae8:	99 27       	eor	r25, r25
 aea:	b7 51       	subi	r27, 0x17	; 23
 aec:	a0 f0       	brcs	.+40     	; 0xb16 <__fixunssfsi+0x38>
 aee:	d1 f0       	breq	.+52     	; 0xb24 <__fixunssfsi+0x46>
 af0:	66 0f       	add	r22, r22
 af2:	77 1f       	adc	r23, r23
 af4:	88 1f       	adc	r24, r24
 af6:	99 1f       	adc	r25, r25
 af8:	1a f0       	brmi	.+6      	; 0xb00 <__fixunssfsi+0x22>
 afa:	ba 95       	dec	r27
 afc:	c9 f7       	brne	.-14     	; 0xaf0 <__fixunssfsi+0x12>
 afe:	12 c0       	rjmp	.+36     	; 0xb24 <__fixunssfsi+0x46>
 b00:	b1 30       	cpi	r27, 0x01	; 1
 b02:	81 f0       	breq	.+32     	; 0xb24 <__fixunssfsi+0x46>
 b04:	9f d0       	rcall	.+318    	; 0xc44 <__fp_zero>
 b06:	b1 e0       	ldi	r27, 0x01	; 1
 b08:	08 95       	ret
 b0a:	9c c0       	rjmp	.+312    	; 0xc44 <__fp_zero>
 b0c:	67 2f       	mov	r22, r23
 b0e:	78 2f       	mov	r23, r24
 b10:	88 27       	eor	r24, r24
 b12:	b8 5f       	subi	r27, 0xF8	; 248
 b14:	39 f0       	breq	.+14     	; 0xb24 <__fixunssfsi+0x46>
 b16:	b9 3f       	cpi	r27, 0xF9	; 249
 b18:	cc f3       	brlt	.-14     	; 0xb0c <__fixunssfsi+0x2e>
 b1a:	86 95       	lsr	r24
 b1c:	77 95       	ror	r23
 b1e:	67 95       	ror	r22
 b20:	b3 95       	inc	r27
 b22:	d9 f7       	brne	.-10     	; 0xb1a <__fixunssfsi+0x3c>
 b24:	3e f4       	brtc	.+14     	; 0xb34 <__fixunssfsi+0x56>
 b26:	90 95       	com	r25
 b28:	80 95       	com	r24
 b2a:	70 95       	com	r23
 b2c:	61 95       	neg	r22
 b2e:	7f 4f       	sbci	r23, 0xFF	; 255
 b30:	8f 4f       	sbci	r24, 0xFF	; 255
 b32:	9f 4f       	sbci	r25, 0xFF	; 255
 b34:	08 95       	ret

00000b36 <__floatunsisf>:
 b36:	e8 94       	clt
 b38:	09 c0       	rjmp	.+18     	; 0xb4c <__floatsisf+0x12>

00000b3a <__floatsisf>:
 b3a:	97 fb       	bst	r25, 7
 b3c:	3e f4       	brtc	.+14     	; 0xb4c <__floatsisf+0x12>
 b3e:	90 95       	com	r25
 b40:	80 95       	com	r24
 b42:	70 95       	com	r23
 b44:	61 95       	neg	r22
 b46:	7f 4f       	sbci	r23, 0xFF	; 255
 b48:	8f 4f       	sbci	r24, 0xFF	; 255
 b4a:	9f 4f       	sbci	r25, 0xFF	; 255
 b4c:	99 23       	and	r25, r25
 b4e:	a9 f0       	breq	.+42     	; 0xb7a <__floatsisf+0x40>
 b50:	f9 2f       	mov	r31, r25
 b52:	96 e9       	ldi	r25, 0x96	; 150
 b54:	bb 27       	eor	r27, r27
 b56:	93 95       	inc	r25
 b58:	f6 95       	lsr	r31
 b5a:	87 95       	ror	r24
 b5c:	77 95       	ror	r23
 b5e:	67 95       	ror	r22
 b60:	b7 95       	ror	r27
 b62:	f1 11       	cpse	r31, r1
 b64:	f8 cf       	rjmp	.-16     	; 0xb56 <__floatsisf+0x1c>
 b66:	fa f4       	brpl	.+62     	; 0xba6 <__floatsisf+0x6c>
 b68:	bb 0f       	add	r27, r27
 b6a:	11 f4       	brne	.+4      	; 0xb70 <__floatsisf+0x36>
 b6c:	60 ff       	sbrs	r22, 0
 b6e:	1b c0       	rjmp	.+54     	; 0xba6 <__floatsisf+0x6c>
 b70:	6f 5f       	subi	r22, 0xFF	; 255
 b72:	7f 4f       	sbci	r23, 0xFF	; 255
 b74:	8f 4f       	sbci	r24, 0xFF	; 255
 b76:	9f 4f       	sbci	r25, 0xFF	; 255
 b78:	16 c0       	rjmp	.+44     	; 0xba6 <__floatsisf+0x6c>
 b7a:	88 23       	and	r24, r24
 b7c:	11 f0       	breq	.+4      	; 0xb82 <__floatsisf+0x48>
 b7e:	96 e9       	ldi	r25, 0x96	; 150
 b80:	11 c0       	rjmp	.+34     	; 0xba4 <__floatsisf+0x6a>
 b82:	77 23       	and	r23, r23
 b84:	21 f0       	breq	.+8      	; 0xb8e <__floatsisf+0x54>
 b86:	9e e8       	ldi	r25, 0x8E	; 142
 b88:	87 2f       	mov	r24, r23
 b8a:	76 2f       	mov	r23, r22
 b8c:	05 c0       	rjmp	.+10     	; 0xb98 <__floatsisf+0x5e>
 b8e:	66 23       	and	r22, r22
 b90:	71 f0       	breq	.+28     	; 0xbae <__floatsisf+0x74>
 b92:	96 e8       	ldi	r25, 0x86	; 134
 b94:	86 2f       	mov	r24, r22
 b96:	70 e0       	ldi	r23, 0x00	; 0
 b98:	60 e0       	ldi	r22, 0x00	; 0
 b9a:	2a f0       	brmi	.+10     	; 0xba6 <__floatsisf+0x6c>
 b9c:	9a 95       	dec	r25
 b9e:	66 0f       	add	r22, r22
 ba0:	77 1f       	adc	r23, r23
 ba2:	88 1f       	adc	r24, r24
 ba4:	da f7       	brpl	.-10     	; 0xb9c <__floatsisf+0x62>
 ba6:	88 0f       	add	r24, r24
 ba8:	96 95       	lsr	r25
 baa:	87 95       	ror	r24
 bac:	97 f9       	bld	r25, 7
 bae:	08 95       	ret

00000bb0 <__fp_inf>:
 bb0:	97 f9       	bld	r25, 7
 bb2:	9f 67       	ori	r25, 0x7F	; 127
 bb4:	80 e8       	ldi	r24, 0x80	; 128
 bb6:	70 e0       	ldi	r23, 0x00	; 0
 bb8:	60 e0       	ldi	r22, 0x00	; 0
 bba:	08 95       	ret

00000bbc <__fp_nan>:
 bbc:	9f ef       	ldi	r25, 0xFF	; 255
 bbe:	80 ec       	ldi	r24, 0xC0	; 192
 bc0:	08 95       	ret

00000bc2 <__fp_pscA>:
 bc2:	00 24       	eor	r0, r0
 bc4:	0a 94       	dec	r0
 bc6:	16 16       	cp	r1, r22
 bc8:	17 06       	cpc	r1, r23
 bca:	18 06       	cpc	r1, r24
 bcc:	09 06       	cpc	r0, r25
 bce:	08 95       	ret

00000bd0 <__fp_pscB>:
 bd0:	00 24       	eor	r0, r0
 bd2:	0a 94       	dec	r0
 bd4:	12 16       	cp	r1, r18
 bd6:	13 06       	cpc	r1, r19
 bd8:	14 06       	cpc	r1, r20
 bda:	05 06       	cpc	r0, r21
 bdc:	08 95       	ret

00000bde <__fp_round>:
 bde:	09 2e       	mov	r0, r25
 be0:	03 94       	inc	r0
 be2:	00 0c       	add	r0, r0
 be4:	11 f4       	brne	.+4      	; 0xbea <__fp_round+0xc>
 be6:	88 23       	and	r24, r24
 be8:	52 f0       	brmi	.+20     	; 0xbfe <__fp_round+0x20>
 bea:	bb 0f       	add	r27, r27
 bec:	40 f4       	brcc	.+16     	; 0xbfe <__fp_round+0x20>
 bee:	bf 2b       	or	r27, r31
 bf0:	11 f4       	brne	.+4      	; 0xbf6 <__fp_round+0x18>
 bf2:	60 ff       	sbrs	r22, 0
 bf4:	04 c0       	rjmp	.+8      	; 0xbfe <__fp_round+0x20>
 bf6:	6f 5f       	subi	r22, 0xFF	; 255
 bf8:	7f 4f       	sbci	r23, 0xFF	; 255
 bfa:	8f 4f       	sbci	r24, 0xFF	; 255
 bfc:	9f 4f       	sbci	r25, 0xFF	; 255
 bfe:	08 95       	ret

00000c00 <__fp_split3>:
 c00:	57 fd       	sbrc	r21, 7
 c02:	90 58       	subi	r25, 0x80	; 128
 c04:	44 0f       	add	r20, r20
 c06:	55 1f       	adc	r21, r21
 c08:	59 f0       	breq	.+22     	; 0xc20 <__fp_splitA+0x10>
 c0a:	5f 3f       	cpi	r21, 0xFF	; 255
 c0c:	71 f0       	breq	.+28     	; 0xc2a <__fp_splitA+0x1a>
 c0e:	47 95       	ror	r20

00000c10 <__fp_splitA>:
 c10:	88 0f       	add	r24, r24
 c12:	97 fb       	bst	r25, 7
 c14:	99 1f       	adc	r25, r25
 c16:	61 f0       	breq	.+24     	; 0xc30 <__fp_splitA+0x20>
 c18:	9f 3f       	cpi	r25, 0xFF	; 255
 c1a:	79 f0       	breq	.+30     	; 0xc3a <__fp_splitA+0x2a>
 c1c:	87 95       	ror	r24
 c1e:	08 95       	ret
 c20:	12 16       	cp	r1, r18
 c22:	13 06       	cpc	r1, r19
 c24:	14 06       	cpc	r1, r20
 c26:	55 1f       	adc	r21, r21
 c28:	f2 cf       	rjmp	.-28     	; 0xc0e <__fp_split3+0xe>
 c2a:	46 95       	lsr	r20
 c2c:	f1 df       	rcall	.-30     	; 0xc10 <__fp_splitA>
 c2e:	08 c0       	rjmp	.+16     	; 0xc40 <__fp_splitA+0x30>
 c30:	16 16       	cp	r1, r22
 c32:	17 06       	cpc	r1, r23
 c34:	18 06       	cpc	r1, r24
 c36:	99 1f       	adc	r25, r25
 c38:	f1 cf       	rjmp	.-30     	; 0xc1c <__fp_splitA+0xc>
 c3a:	86 95       	lsr	r24
 c3c:	71 05       	cpc	r23, r1
 c3e:	61 05       	cpc	r22, r1
 c40:	08 94       	sec
 c42:	08 95       	ret

00000c44 <__fp_zero>:
 c44:	e8 94       	clt

00000c46 <__fp_szero>:
 c46:	bb 27       	eor	r27, r27
 c48:	66 27       	eor	r22, r22
 c4a:	77 27       	eor	r23, r23
 c4c:	cb 01       	movw	r24, r22
 c4e:	97 f9       	bld	r25, 7
 c50:	08 95       	ret

00000c52 <__mulsf3>:
 c52:	0b d0       	rcall	.+22     	; 0xc6a <__mulsf3x>
 c54:	c4 cf       	rjmp	.-120    	; 0xbde <__fp_round>
 c56:	b5 df       	rcall	.-150    	; 0xbc2 <__fp_pscA>
 c58:	28 f0       	brcs	.+10     	; 0xc64 <__mulsf3+0x12>
 c5a:	ba df       	rcall	.-140    	; 0xbd0 <__fp_pscB>
 c5c:	18 f0       	brcs	.+6      	; 0xc64 <__mulsf3+0x12>
 c5e:	95 23       	and	r25, r21
 c60:	09 f0       	breq	.+2      	; 0xc64 <__mulsf3+0x12>
 c62:	a6 cf       	rjmp	.-180    	; 0xbb0 <__fp_inf>
 c64:	ab cf       	rjmp	.-170    	; 0xbbc <__fp_nan>
 c66:	11 24       	eor	r1, r1
 c68:	ee cf       	rjmp	.-36     	; 0xc46 <__fp_szero>

00000c6a <__mulsf3x>:
 c6a:	ca df       	rcall	.-108    	; 0xc00 <__fp_split3>
 c6c:	a0 f3       	brcs	.-24     	; 0xc56 <__mulsf3+0x4>

00000c6e <__mulsf3_pse>:
 c6e:	95 9f       	mul	r25, r21
 c70:	d1 f3       	breq	.-12     	; 0xc66 <__mulsf3+0x14>
 c72:	95 0f       	add	r25, r21
 c74:	50 e0       	ldi	r21, 0x00	; 0
 c76:	55 1f       	adc	r21, r21
 c78:	62 9f       	mul	r22, r18
 c7a:	f0 01       	movw	r30, r0
 c7c:	72 9f       	mul	r23, r18
 c7e:	bb 27       	eor	r27, r27
 c80:	f0 0d       	add	r31, r0
 c82:	b1 1d       	adc	r27, r1
 c84:	63 9f       	mul	r22, r19
 c86:	aa 27       	eor	r26, r26
 c88:	f0 0d       	add	r31, r0
 c8a:	b1 1d       	adc	r27, r1
 c8c:	aa 1f       	adc	r26, r26
 c8e:	64 9f       	mul	r22, r20
 c90:	66 27       	eor	r22, r22
 c92:	b0 0d       	add	r27, r0
 c94:	a1 1d       	adc	r26, r1
 c96:	66 1f       	adc	r22, r22
 c98:	82 9f       	mul	r24, r18
 c9a:	22 27       	eor	r18, r18
 c9c:	b0 0d       	add	r27, r0
 c9e:	a1 1d       	adc	r26, r1
 ca0:	62 1f       	adc	r22, r18
 ca2:	73 9f       	mul	r23, r19
 ca4:	b0 0d       	add	r27, r0
 ca6:	a1 1d       	adc	r26, r1
 ca8:	62 1f       	adc	r22, r18
 caa:	83 9f       	mul	r24, r19
 cac:	a0 0d       	add	r26, r0
 cae:	61 1d       	adc	r22, r1
 cb0:	22 1f       	adc	r18, r18
 cb2:	74 9f       	mul	r23, r20
 cb4:	33 27       	eor	r19, r19
 cb6:	a0 0d       	add	r26, r0
 cb8:	61 1d       	adc	r22, r1
 cba:	23 1f       	adc	r18, r19
 cbc:	84 9f       	mul	r24, r20
 cbe:	60 0d       	add	r22, r0
 cc0:	21 1d       	adc	r18, r1
 cc2:	82 2f       	mov	r24, r18
 cc4:	76 2f       	mov	r23, r22
 cc6:	6a 2f       	mov	r22, r26
 cc8:	11 24       	eor	r1, r1
 cca:	9f 57       	subi	r25, 0x7F	; 127
 ccc:	50 40       	sbci	r21, 0x00	; 0
 cce:	8a f0       	brmi	.+34     	; 0xcf2 <__mulsf3_pse+0x84>
 cd0:	e1 f0       	breq	.+56     	; 0xd0a <__mulsf3_pse+0x9c>
 cd2:	88 23       	and	r24, r24
 cd4:	4a f0       	brmi	.+18     	; 0xce8 <__mulsf3_pse+0x7a>
 cd6:	ee 0f       	add	r30, r30
 cd8:	ff 1f       	adc	r31, r31
 cda:	bb 1f       	adc	r27, r27
 cdc:	66 1f       	adc	r22, r22
 cde:	77 1f       	adc	r23, r23
 ce0:	88 1f       	adc	r24, r24
 ce2:	91 50       	subi	r25, 0x01	; 1
 ce4:	50 40       	sbci	r21, 0x00	; 0
 ce6:	a9 f7       	brne	.-22     	; 0xcd2 <__mulsf3_pse+0x64>
 ce8:	9e 3f       	cpi	r25, 0xFE	; 254
 cea:	51 05       	cpc	r21, r1
 cec:	70 f0       	brcs	.+28     	; 0xd0a <__mulsf3_pse+0x9c>
 cee:	60 cf       	rjmp	.-320    	; 0xbb0 <__fp_inf>
 cf0:	aa cf       	rjmp	.-172    	; 0xc46 <__fp_szero>
 cf2:	5f 3f       	cpi	r21, 0xFF	; 255
 cf4:	ec f3       	brlt	.-6      	; 0xcf0 <__mulsf3_pse+0x82>
 cf6:	98 3e       	cpi	r25, 0xE8	; 232
 cf8:	dc f3       	brlt	.-10     	; 0xcf0 <__mulsf3_pse+0x82>
 cfa:	86 95       	lsr	r24
 cfc:	77 95       	ror	r23
 cfe:	67 95       	ror	r22
 d00:	b7 95       	ror	r27
 d02:	f7 95       	ror	r31
 d04:	e7 95       	ror	r30
 d06:	9f 5f       	subi	r25, 0xFF	; 255
 d08:	c1 f7       	brne	.-16     	; 0xcfa <__mulsf3_pse+0x8c>
 d0a:	fe 2b       	or	r31, r30
 d0c:	88 0f       	add	r24, r24
 d0e:	91 1d       	adc	r25, r1
 d10:	96 95       	lsr	r25
 d12:	87 95       	ror	r24
 d14:	97 f9       	bld	r25, 7
 d16:	08 95       	ret

00000d18 <_exit>:
 d18:	f8 94       	cli

00000d1a <__stop_program>:
 d1a:	ff cf       	rjmp	.-2      	; 0xd1a <__stop_program>
