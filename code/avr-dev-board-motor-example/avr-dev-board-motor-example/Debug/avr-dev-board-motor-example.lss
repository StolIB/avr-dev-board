
avr-dev-board-motor-example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c08  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000015a  00800100  00800100  00000c7c  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000c7c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000001f8  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000013dd  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000761  00000000  00000000  00002281  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008b3  00000000  00000000  000029e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000490  00000000  00000000  00003298  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000053c  00000000  00000000  00003728  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000b12  00000000  00000000  00003c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000188  00000000  00000000  00004776  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ce 03 	jmp	0x79c	; 0x79c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 35       	cpi	r26, 0x5A	; 90
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  9e:	0c 94 02 06 	jmp	0xc04	; 0xc04 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:
	/* If more than 8-bit precision is used - read ADCL first and ADCH second. */
	return adc_result;
}

ISR(ADC_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
	adc_done = 1;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	80 93 02 01 	sts	0x0102, r24
	uint16_t temp = 0;
	temp |= ADCL;
  bc:	80 91 78 00 	lds	r24, 0x0078
	temp |= (ADCH << 8);
  c0:	20 91 79 00 	lds	r18, 0x0079
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	92 2b       	or	r25, r18
	adc_result = temp;
  c8:	90 93 01 01 	sts	0x0101, r25
  cc:	80 93 00 01 	sts	0x0100, r24

	//adc_result = (int)(adc_result + (float)((temp - adc_result)*0.20));
}
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	2f 91       	pop	r18
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <main>:
#include "motor.h"
#include "timer.h"

int main()
{
	enable_h_bridge();					//Pali H-most
  e0:	0e 94 1c 01 	call	0x238	; 0x238 <enable_h_bridge>
	init_timer_1(PRESCALER8, 1000);		//Inicijalizuj tajmer 1 sa interrupt periodom od 1ms
  e4:	68 ee       	ldi	r22, 0xE8	; 232
  e6:	73 e0       	ldi	r23, 0x03	; 3
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	0e 94 68 01 	call	0x2d0	; 0x2d0 <init_timer_1>

	while(1){
		start_motor_CCW();				//Pokreni motor u CCW smeru
  ee:	0e 94 4e 01 	call	0x29c	; 0x29c <start_motor_CCW>
		pause_loop(4000);				//Pauziraj 4 sekunde
  f2:	80 ea       	ldi	r24, 0xA0	; 160
  f4:	9f e0       	ldi	r25, 0x0F	; 15
  f6:	0e 94 63 02 	call	0x4c6	; 0x4c6 <pause_loop>
		
		stop_motor();					//Zaustavi motor
  fa:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <stop_motor>
		pause_loop(2000);				//Pauziraj 2 sekunde
  fe:	80 ed       	ldi	r24, 0xD0	; 208
 100:	97 e0       	ldi	r25, 0x07	; 7
 102:	0e 94 63 02 	call	0x4c6	; 0x4c6 <pause_loop>
		
		start_motor_CW();				//Pokreni motor u CW smeru
 106:	0e 94 41 01 	call	0x282	; 0x282 <start_motor_CW>
		pause_loop(4000);				//Pauziraj 4 sekunde
 10a:	80 ea       	ldi	r24, 0xA0	; 160
 10c:	9f e0       	ldi	r25, 0x0F	; 15
 10e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <pause_loop>
		
		stop_motor();					//Zaustavi motor
 112:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <stop_motor>
		pause_loop(2000);				//Pauziraj 2 sekunde
 116:	80 ed       	ldi	r24, 0xD0	; 208
 118:	97 e0       	ldi	r25, 0x07	; 7
 11a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <pause_loop>
 11e:	e7 cf       	rjmp	.-50     	; 0xee <main+0xe>

00000120 <get_count>:
	sei();
}

long get_count()
{
	return counts;
 120:	60 91 03 01 	lds	r22, 0x0103
 124:	70 91 04 01 	lds	r23, 0x0104
 128:	80 91 05 01 	lds	r24, 0x0105
 12c:	90 91 06 01 	lds	r25, 0x0106
}
 130:	08 95       	ret

00000132 <__vector_2>:

ISR(INT1_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
	if( EXT_PORT & (1 << EXT_CH_A) ) counts--;			/* CCW */
 144:	4a 9b       	sbis	0x09, 2	; 9
 146:	14 c0       	rjmp	.+40     	; 0x170 <__vector_2+0x3e>
 148:	80 91 03 01 	lds	r24, 0x0103
 14c:	90 91 04 01 	lds	r25, 0x0104
 150:	a0 91 05 01 	lds	r26, 0x0105
 154:	b0 91 06 01 	lds	r27, 0x0106
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	a1 09       	sbc	r26, r1
 15c:	b1 09       	sbc	r27, r1
 15e:	80 93 03 01 	sts	0x0103, r24
 162:	90 93 04 01 	sts	0x0104, r25
 166:	a0 93 05 01 	sts	0x0105, r26
 16a:	b0 93 06 01 	sts	0x0106, r27
 16e:	15 c0       	rjmp	.+42     	; 0x19a <__vector_2+0x68>
	else if( !(EXT_PORT & (1 << EXT_CH_A)) ) counts++;	/* CW */
 170:	4a 99       	sbic	0x09, 2	; 9
 172:	13 c0       	rjmp	.+38     	; 0x19a <__vector_2+0x68>
 174:	80 91 03 01 	lds	r24, 0x0103
 178:	90 91 04 01 	lds	r25, 0x0104
 17c:	a0 91 05 01 	lds	r26, 0x0105
 180:	b0 91 06 01 	lds	r27, 0x0106
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	a1 1d       	adc	r26, r1
 188:	b1 1d       	adc	r27, r1
 18a:	80 93 03 01 	sts	0x0103, r24
 18e:	90 93 04 01 	sts	0x0104, r25
 192:	a0 93 05 01 	sts	0x0105, r26
 196:	b0 93 06 01 	sts	0x0106, r27
}
 19a:	bf 91       	pop	r27
 19c:	af 91       	pop	r26
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <set_pin_dir>:

#include "gpio.h"

void set_pin_dir(volatile uint8_t *target_port, uint8_t pin_no, uint8_t dir)
{
	switch(dir){
 1ac:	44 23       	and	r20, r20
 1ae:	89 f0       	breq	.+34     	; 0x1d2 <set_pin_dir+0x26>
 1b0:	41 30       	cpi	r20, 0x01	; 1
 1b2:	f1 f4       	brne	.+60     	; 0x1f0 <set_pin_dir+0x44>
	case OUTPUT:
		(*target_port) |= (1 << pin_no);
 1b4:	fc 01       	movw	r30, r24
 1b6:	40 81       	ld	r20, Z
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	f9 01       	movw	r30, r18
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <set_pin_dir+0x18>
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <set_pin_dir+0x14>
 1c8:	bf 01       	movw	r22, r30
 1ca:	64 2b       	or	r22, r20
 1cc:	fc 01       	movw	r30, r24
 1ce:	60 83       	st	Z, r22
		break;
 1d0:	08 95       	ret
	case INPUT:
		(*target_port) &= ~(1 << pin_no);
 1d2:	fc 01       	movw	r30, r24
 1d4:	40 81       	ld	r20, Z
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	f9 01       	movw	r30, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <set_pin_dir+0x36>
 1de:	ee 0f       	add	r30, r30
 1e0:	ff 1f       	adc	r31, r31
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <set_pin_dir+0x32>
 1e6:	bf 01       	movw	r22, r30
 1e8:	60 95       	com	r22
 1ea:	64 23       	and	r22, r20
 1ec:	fc 01       	movw	r30, r24
 1ee:	60 83       	st	Z, r22
 1f0:	08 95       	ret

000001f2 <write_pin>:
	(*target_port) &= ~(1 << pin_no);
}

void write_pin(volatile uint8_t *target_port, uint8_t pin_no, uint8_t pin_val)
{
	switch(pin_val){
 1f2:	44 23       	and	r20, r20
 1f4:	89 f0       	breq	.+34     	; 0x218 <write_pin+0x26>
 1f6:	41 30       	cpi	r20, 0x01	; 1
 1f8:	f1 f4       	brne	.+60     	; 0x236 <write_pin+0x44>
	case HIGH:
		(*target_port) |= (1 << pin_no);
 1fa:	fc 01       	movw	r30, r24
 1fc:	40 81       	ld	r20, Z
 1fe:	21 e0       	ldi	r18, 0x01	; 1
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	f9 01       	movw	r30, r18
 204:	02 c0       	rjmp	.+4      	; 0x20a <write_pin+0x18>
 206:	ee 0f       	add	r30, r30
 208:	ff 1f       	adc	r31, r31
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <write_pin+0x14>
 20e:	bf 01       	movw	r22, r30
 210:	64 2b       	or	r22, r20
 212:	fc 01       	movw	r30, r24
 214:	60 83       	st	Z, r22
		break;
 216:	08 95       	ret
	case LOW:
		(*target_port) &= ~(1 << pin_no);
 218:	fc 01       	movw	r30, r24
 21a:	40 81       	ld	r20, Z
 21c:	21 e0       	ldi	r18, 0x01	; 1
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	f9 01       	movw	r30, r18
 222:	02 c0       	rjmp	.+4      	; 0x228 <write_pin+0x36>
 224:	ee 0f       	add	r30, r30
 226:	ff 1f       	adc	r31, r31
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <write_pin+0x32>
 22c:	bf 01       	movw	r22, r30
 22e:	60 95       	com	r22
 230:	64 23       	and	r22, r20
 232:	fc 01       	movw	r30, r24
 234:	60 83       	st	Z, r22
 236:	08 95       	ret

00000238 <enable_h_bridge>:
 */ 
#include "motor.h"

void enable_h_bridge()
{
	set_pin_dir(&MOT_DDR, MOT_EN, OUTPUT);
 238:	41 e0       	ldi	r20, 0x01	; 1
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	84 e2       	ldi	r24, 0x24	; 36
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 d6 00 	call	0x1ac	; 0x1ac <set_pin_dir>
	set_pin_dir(&MOT_DDR, MOT_PIN0, OUTPUT);
 244:	41 e0       	ldi	r20, 0x01	; 1
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	84 e2       	ldi	r24, 0x24	; 36
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <set_pin_dir>
	set_pin_dir(&MOT_DDR, MOT_PIN1, OUTPUT);
 250:	41 e0       	ldi	r20, 0x01	; 1
 252:	62 e0       	ldi	r22, 0x02	; 2
 254:	84 e2       	ldi	r24, 0x24	; 36
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 d6 00 	call	0x1ac	; 0x1ac <set_pin_dir>

	write_pin(&MOT_PORT, MOT_EN, HIGH);
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	85 e2       	ldi	r24, 0x25	; 37
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <write_pin>
	write_pin(&MOT_PORT, MOT_PIN0, LOW);
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	85 e2       	ldi	r24, 0x25	; 37
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <write_pin>
	write_pin(&MOT_PORT, MOT_PIN1, LOW);
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	62 e0       	ldi	r22, 0x02	; 2
 278:	85 e2       	ldi	r24, 0x25	; 37
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <write_pin>
 280:	08 95       	ret

00000282 <start_motor_CW>:
	write_pin(&MOT_PORT, MOT_PIN1, LOW);
}

void start_motor_CW()
{
	write_pin(&MOT_PORT, MOT_PIN0, LOW);
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	85 e2       	ldi	r24, 0x25	; 37
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <write_pin>
	write_pin(&MOT_PORT, MOT_PIN1, HIGH);
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	62 e0       	ldi	r22, 0x02	; 2
 292:	85 e2       	ldi	r24, 0x25	; 37
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <write_pin>
 29a:	08 95       	ret

0000029c <start_motor_CCW>:
}

void start_motor_CCW()
{
	write_pin(&MOT_PORT, MOT_PIN0, HIGH);
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	85 e2       	ldi	r24, 0x25	; 37
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <write_pin>
	write_pin(&MOT_PORT, MOT_PIN1, LOW);
 2a8:	40 e0       	ldi	r20, 0x00	; 0
 2aa:	62 e0       	ldi	r22, 0x02	; 2
 2ac:	85 e2       	ldi	r24, 0x25	; 37
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <write_pin>
 2b4:	08 95       	ret

000002b6 <stop_motor>:
}

void stop_motor()
{
	write_pin(&MOT_PORT, MOT_PIN0, LOW);
 2b6:	40 e0       	ldi	r20, 0x00	; 0
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	85 e2       	ldi	r24, 0x25	; 37
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <write_pin>
	write_pin(&MOT_PORT, MOT_PIN1, LOW);
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	62 e0       	ldi	r22, 0x02	; 2
 2c6:	85 e2       	ldi	r24, 0x25	; 37
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <write_pin>
 2ce:	08 95       	ret

000002d0 <init_timer_1>:
{
	uint16_t temp;

	temp = 0;
	temp |= (1 << WGM10 | 1 << WGM11); /* Fast PWM mode - TOP is OCR1A, auto restart. */
	TCCR1A = temp;
 2d0:	93 e0       	ldi	r25, 0x03	; 3
 2d2:	90 93 80 00 	sts	0x0080, r25

	temp = 0;
	temp |= (1 << WGM12 | 1 << WGM13); /* Fast PWM mode - TOP is OCR1A, auto restart. */
	temp |= (prescaler << CS10); /* CS2:0 = 010 - Prescaler set to 8. */
 2d6:	88 61       	ori	r24, 0x18	; 24
	TCCR1B = temp;
 2d8:	80 93 81 00 	sts	0x0081, r24

	temp = 0;
	temp |= (1 << TOIE0);
	TIMSK1 = temp;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	80 93 6f 00 	sts	0x006F, r24

	OCR1A = topw_val;
 2e2:	70 93 89 00 	sts	0x0089, r23
 2e6:	60 93 88 00 	sts	0x0088, r22

	sei();
 2ea:	78 94       	sei
 2ec:	08 95       	ret

000002ee <pid>:
{
	my_pid.dir = mot_dir;
}

void pid()
{
 2ee:	4f 92       	push	r4
 2f0:	5f 92       	push	r5
 2f2:	6f 92       	push	r6
 2f4:	7f 92       	push	r7
 2f6:	8f 92       	push	r8
 2f8:	9f 92       	push	r9
 2fa:	af 92       	push	r10
 2fc:	bf 92       	push	r11
 2fe:	cf 92       	push	r12
 300:	df 92       	push	r13
 302:	ef 92       	push	r14
 304:	ff 92       	push	r15
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	00 d0       	rcall	.+0      	; 0x30c <pid+0x1e>
 30c:	00 d0       	rcall	.+0      	; 0x30e <pid+0x20>
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
	long count = get_count();
 312:	0e 94 90 00 	call	0x120	; 0x120 <get_count>
 316:	69 83       	std	Y+1, r22	; 0x01
 318:	7a 83       	std	Y+2, r23	; 0x02
 31a:	8b 83       	std	Y+3, r24	; 0x03
 31c:	9c 83       	std	Y+4, r25	; 0x04
	int temp = 0;
	/* Speed difference. */
	my_pid.err = my_pid.ref_speed - (uint16_t)(count - my_pid.last_count);
 31e:	20 91 46 01 	lds	r18, 0x0146
 322:	30 91 47 01 	lds	r19, 0x0147
 326:	80 91 26 01 	lds	r24, 0x0126
 32a:	90 91 27 01 	lds	r25, 0x0127
 32e:	82 0f       	add	r24, r18
 330:	93 1f       	adc	r25, r19
 332:	29 81       	ldd	r18, Y+1	; 0x01
 334:	3a 81       	ldd	r19, Y+2	; 0x02
 336:	82 1b       	sub	r24, r18
 338:	93 0b       	sbc	r25, r19
 33a:	6c 01       	movw	r12, r24
 33c:	e1 2c       	mov	r14, r1
 33e:	f1 2c       	mov	r15, r1
 340:	c0 92 36 01 	sts	0x0136, r12
 344:	d0 92 37 01 	sts	0x0137, r13
 348:	e0 92 38 01 	sts	0x0138, r14
 34c:	f0 92 39 01 	sts	0x0139, r15

	/* Error sum. */
	my_pid.err_sum += my_pid.err;
 350:	80 91 42 01 	lds	r24, 0x0142
 354:	90 91 43 01 	lds	r25, 0x0143
 358:	a0 91 44 01 	lds	r26, 0x0144
 35c:	b0 91 45 01 	lds	r27, 0x0145
 360:	8c 0d       	add	r24, r12
 362:	9d 1d       	adc	r25, r13
 364:	ae 1d       	adc	r26, r14
 366:	bf 1d       	adc	r27, r15
	if(my_pid.err_sum > 200) {
 368:	89 3c       	cpi	r24, 0xC9	; 201
 36a:	91 05       	cpc	r25, r1
 36c:	a1 05       	cpc	r26, r1
 36e:	b1 05       	cpc	r27, r1
 370:	4c f4       	brge	.+18     	; 0x384 <pid+0x96>
	int temp = 0;
	/* Speed difference. */
	my_pid.err = my_pid.ref_speed - (uint16_t)(count - my_pid.last_count);

	/* Error sum. */
	my_pid.err_sum += my_pid.err;
 372:	80 93 42 01 	sts	0x0142, r24
 376:	90 93 43 01 	sts	0x0143, r25
 37a:	a0 93 44 01 	sts	0x0144, r26
 37e:	b0 93 45 01 	sts	0x0145, r27
 382:	0c c0       	rjmp	.+24     	; 0x39c <pid+0xae>
	if(my_pid.err_sum > 200) {
		my_pid.err_sum = 200;
 384:	88 ec       	ldi	r24, 0xC8	; 200
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	a0 e0       	ldi	r26, 0x00	; 0
 38a:	b0 e0       	ldi	r27, 0x00	; 0
 38c:	80 93 42 01 	sts	0x0142, r24
 390:	90 93 43 01 	sts	0x0143, r25
 394:	a0 93 44 01 	sts	0x0144, r26
 398:	b0 93 45 01 	sts	0x0145, r27
	}

	/* Error difference. */
	my_pid.err_diff = my_pid.err - my_pid.last_err;
 39c:	80 91 3a 01 	lds	r24, 0x013A
 3a0:	90 91 3b 01 	lds	r25, 0x013B
 3a4:	a0 91 3c 01 	lds	r26, 0x013C
 3a8:	b0 91 3d 01 	lds	r27, 0x013D
 3ac:	46 01       	movw	r8, r12
 3ae:	57 01       	movw	r10, r14
 3b0:	88 1a       	sub	r8, r24
 3b2:	99 0a       	sbc	r9, r25
 3b4:	aa 0a       	sbc	r10, r26
 3b6:	bb 0a       	sbc	r11, r27
 3b8:	80 92 3e 01 	sts	0x013E, r8
 3bc:	90 92 3f 01 	sts	0x013F, r9
 3c0:	a0 92 40 01 	sts	0x0140, r10
 3c4:	b0 92 41 01 	sts	0x0141, r11

	/* PID output */
	temp = (my_pid.kp*my_pid.err + my_pid.ki*my_pid.err_sum + my_pid.kd*my_pid.err_diff)/PID_CONST;
 3c8:	c7 01       	movw	r24, r14
 3ca:	b6 01       	movw	r22, r12
 3cc:	0e 94 13 05 	call	0xa26	; 0xa26 <__floatsisf>
 3d0:	20 91 1a 01 	lds	r18, 0x011A
 3d4:	30 91 1b 01 	lds	r19, 0x011B
 3d8:	40 91 1c 01 	lds	r20, 0x011C
 3dc:	50 91 1d 01 	lds	r21, 0x011D
 3e0:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__mulsf3>
 3e4:	2b 01       	movw	r4, r22
 3e6:	3c 01       	movw	r6, r24
 3e8:	60 91 42 01 	lds	r22, 0x0142
 3ec:	70 91 43 01 	lds	r23, 0x0143
 3f0:	80 91 44 01 	lds	r24, 0x0144
 3f4:	90 91 45 01 	lds	r25, 0x0145
 3f8:	0e 94 13 05 	call	0xa26	; 0xa26 <__floatsisf>
 3fc:	20 91 1e 01 	lds	r18, 0x011E
 400:	30 91 1f 01 	lds	r19, 0x011F
 404:	40 91 20 01 	lds	r20, 0x0120
 408:	50 91 21 01 	lds	r21, 0x0121
 40c:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__mulsf3>
 410:	9b 01       	movw	r18, r22
 412:	ac 01       	movw	r20, r24
 414:	c3 01       	movw	r24, r6
 416:	b2 01       	movw	r22, r4
 418:	0e 94 14 04 	call	0x828	; 0x828 <__addsf3>
 41c:	2b 01       	movw	r4, r22
 41e:	3c 01       	movw	r6, r24
 420:	c5 01       	movw	r24, r10
 422:	b4 01       	movw	r22, r8
 424:	0e 94 13 05 	call	0xa26	; 0xa26 <__floatsisf>
 428:	20 91 22 01 	lds	r18, 0x0122
 42c:	30 91 23 01 	lds	r19, 0x0123
 430:	40 91 24 01 	lds	r20, 0x0124
 434:	50 91 25 01 	lds	r21, 0x0125
 438:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__mulsf3>
 43c:	9b 01       	movw	r18, r22
 43e:	ac 01       	movw	r20, r24
 440:	c3 01       	movw	r24, r6
 442:	b2 01       	movw	r22, r4
 444:	0e 94 14 04 	call	0x828	; 0x828 <__addsf3>
 448:	20 e0       	ldi	r18, 0x00	; 0
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	40 e2       	ldi	r20, 0x20	; 32
 44e:	51 e4       	ldi	r21, 0x41	; 65
 450:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__divsf3>
 454:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__fixsfsi>
	if(temp > my_pid.pwm_period) {
 458:	20 91 32 01 	lds	r18, 0x0132
 45c:	30 91 33 01 	lds	r19, 0x0133
 460:	26 17       	cp	r18, r22
 462:	37 07       	cpc	r19, r23
 464:	28 f4       	brcc	.+10     	; 0x470 <pid+0x182>
		my_pid.pwm_top_val = my_pid.pwm_period;
 466:	30 93 31 01 	sts	0x0131, r19
 46a:	20 93 30 01 	sts	0x0130, r18
 46e:	04 c0       	rjmp	.+8      	; 0x478 <pid+0x18a>
	} else {
		my_pid.pwm_top_val = temp;
 470:	70 93 31 01 	sts	0x0131, r23
 474:	60 93 30 01 	sts	0x0130, r22
	}

	/* Memorize last values. */
	my_pid.last_count = count;
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	9a 81       	ldd	r25, Y+2	; 0x02
 47c:	ab 81       	ldd	r26, Y+3	; 0x03
 47e:	bc 81       	ldd	r27, Y+4	; 0x04
 480:	80 93 46 01 	sts	0x0146, r24
 484:	90 93 47 01 	sts	0x0147, r25
 488:	a0 93 48 01 	sts	0x0148, r26
 48c:	b0 93 49 01 	sts	0x0149, r27
	my_pid.last_err = my_pid.err;
 490:	c0 92 3a 01 	sts	0x013A, r12
 494:	d0 92 3b 01 	sts	0x013B, r13
 498:	e0 92 3c 01 	sts	0x013C, r14
 49c:	f0 92 3d 01 	sts	0x013D, r15
}
 4a0:	0f 90       	pop	r0
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	0f 90       	pop	r0
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	ff 90       	pop	r15
 4ae:	ef 90       	pop	r14
 4b0:	df 90       	pop	r13
 4b2:	cf 90       	pop	r12
 4b4:	bf 90       	pop	r11
 4b6:	af 90       	pop	r10
 4b8:	9f 90       	pop	r9
 4ba:	8f 90       	pop	r8
 4bc:	7f 90       	pop	r7
 4be:	6f 90       	pop	r6
 4c0:	5f 90       	pop	r5
 4c2:	4f 90       	pop	r4
 4c4:	08 95       	ret

000004c6 <pause_loop>:
	}
}

void pause_loop(uint16_t pause)
{
	pause_time = pause;
 4c6:	a0 e0       	ldi	r26, 0x00	; 0
 4c8:	b0 e0       	ldi	r27, 0x00	; 0
 4ca:	80 93 09 01 	sts	0x0109, r24
 4ce:	90 93 0a 01 	sts	0x010A, r25
 4d2:	a0 93 0b 01 	sts	0x010B, r26
 4d6:	b0 93 0c 01 	sts	0x010C, r27
	while(pause_time);
 4da:	80 91 09 01 	lds	r24, 0x0109
 4de:	90 91 0a 01 	lds	r25, 0x010A
 4e2:	a0 91 0b 01 	lds	r26, 0x010B
 4e6:	b0 91 0c 01 	lds	r27, 0x010C
 4ea:	89 2b       	or	r24, r25
 4ec:	8a 2b       	or	r24, r26
 4ee:	8b 2b       	or	r24, r27
 4f0:	a1 f7       	brne	.-24     	; 0x4da <pause_loop+0x14>
}
 4f2:	08 95       	ret

000004f4 <__vector_13>:
		break;
	}
}

ISR(TIMER1_OVF_vect)
{
 4f4:	1f 92       	push	r1
 4f6:	0f 92       	push	r0
 4f8:	0f b6       	in	r0, 0x3f	; 63
 4fa:	0f 92       	push	r0
 4fc:	11 24       	eor	r1, r1
 4fe:	2f 93       	push	r18
 500:	3f 93       	push	r19
 502:	4f 93       	push	r20
 504:	5f 93       	push	r21
 506:	6f 93       	push	r22
 508:	7f 93       	push	r23
 50a:	8f 93       	push	r24
 50c:	9f 93       	push	r25
 50e:	af 93       	push	r26
 510:	bf 93       	push	r27
 512:	ef 93       	push	r30
 514:	ff 93       	push	r31
	if(pwm_flag == PWM_ON) {
 516:	80 91 08 01 	lds	r24, 0x0108
 51a:	81 30       	cpi	r24, 0x01	; 1
 51c:	09 f0       	breq	.+2      	; 0x520 <__vector_13+0x2c>
 51e:	4e c0       	rjmp	.+156    	; 0x5bc <__vector_13+0xc8>
		my_pwm.pwm_tick++;
 520:	e5 e5       	ldi	r30, 0x55	; 85
 522:	f1 e0       	ldi	r31, 0x01	; 1
 524:	80 81       	ld	r24, Z
 526:	91 81       	ldd	r25, Z+1	; 0x01
 528:	a2 81       	ldd	r26, Z+2	; 0x02
 52a:	b3 81       	ldd	r27, Z+3	; 0x03
 52c:	01 96       	adiw	r24, 0x01	; 1
 52e:	a1 1d       	adc	r26, r1
 530:	b1 1d       	adc	r27, r1
 532:	80 83       	st	Z, r24
 534:	91 83       	std	Z+1, r25	; 0x01
 536:	a2 83       	std	Z+2, r26	; 0x02
 538:	b3 83       	std	Z+3, r27	; 0x03
		if(my_pwm.pwm_tick >= my_pwm.period && my_pwm.top_val > 0) {
 53a:	40 91 4d 01 	lds	r20, 0x014D
 53e:	50 91 4e 01 	lds	r21, 0x014E
 542:	60 91 4f 01 	lds	r22, 0x014F
 546:	70 91 50 01 	lds	r23, 0x0150
 54a:	84 17       	cp	r24, r20
 54c:	95 07       	cpc	r25, r21
 54e:	a6 07       	cpc	r26, r22
 550:	b7 07       	cpc	r27, r23
 552:	f0 f0       	brcs	.+60     	; 0x590 <__vector_13+0x9c>
 554:	80 91 51 01 	lds	r24, 0x0151
 558:	90 91 52 01 	lds	r25, 0x0152
 55c:	a0 91 53 01 	lds	r26, 0x0153
 560:	b0 91 54 01 	lds	r27, 0x0154
 564:	89 2b       	or	r24, r25
 566:	8a 2b       	or	r24, r26
 568:	8b 2b       	or	r24, r27
 56a:	f9 f0       	breq	.+62     	; 0x5aa <__vector_13+0xb6>
			write_pin(my_pwm.target_port, my_pwm.pin, HIGH);
 56c:	41 e0       	ldi	r20, 0x01	; 1
 56e:	60 91 4c 01 	lds	r22, 0x014C
 572:	80 91 4a 01 	lds	r24, 0x014A
 576:	90 91 4b 01 	lds	r25, 0x014B
 57a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <write_pin>
			my_pwm.pwm_tick = 0;
 57e:	10 92 55 01 	sts	0x0155, r1
 582:	10 92 56 01 	sts	0x0156, r1
 586:	10 92 57 01 	sts	0x0157, r1
 58a:	10 92 58 01 	sts	0x0158, r1
 58e:	16 c0       	rjmp	.+44     	; 0x5bc <__vector_13+0xc8>
		} else if(my_pwm.pwm_tick >= my_pwm.top_val) {
 590:	40 91 51 01 	lds	r20, 0x0151
 594:	50 91 52 01 	lds	r21, 0x0152
 598:	60 91 53 01 	lds	r22, 0x0153
 59c:	70 91 54 01 	lds	r23, 0x0154
 5a0:	84 17       	cp	r24, r20
 5a2:	95 07       	cpc	r25, r21
 5a4:	a6 07       	cpc	r26, r22
 5a6:	b7 07       	cpc	r27, r23
 5a8:	48 f0       	brcs	.+18     	; 0x5bc <__vector_13+0xc8>
			write_pin(my_pwm.target_port, my_pwm.pin, LOW);
 5aa:	40 e0       	ldi	r20, 0x00	; 0
 5ac:	60 91 4c 01 	lds	r22, 0x014C
 5b0:	80 91 4a 01 	lds	r24, 0x014A
 5b4:	90 91 4b 01 	lds	r25, 0x014B
 5b8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <write_pin>
		}
	}

	if(pid_flag == 1) {
 5bc:	80 91 07 01 	lds	r24, 0x0107
 5c0:	81 30       	cpi	r24, 0x01	; 1
 5c2:	09 f0       	breq	.+2      	; 0x5c6 <__vector_13+0xd2>
 5c4:	4f c0       	rjmp	.+158    	; 0x664 <__vector_13+0x170>
		my_pid.pid_tick_sample++;
 5c6:	ee e2       	ldi	r30, 0x2E	; 46
 5c8:	f1 e0       	ldi	r31, 0x01	; 1
 5ca:	80 81       	ld	r24, Z
 5cc:	91 81       	ldd	r25, Z+1	; 0x01
 5ce:	01 96       	adiw	r24, 0x01	; 1
 5d0:	91 83       	std	Z+1, r25	; 0x01
 5d2:	80 83       	st	Z, r24
		if(my_pid.pid_tick_sample >= my_pid.sample_period) {
 5d4:	20 81       	ld	r18, Z
 5d6:	31 81       	ldd	r19, Z+1	; 0x01
 5d8:	80 91 28 01 	lds	r24, 0x0128
 5dc:	90 91 29 01 	lds	r25, 0x0129
 5e0:	28 17       	cp	r18, r24
 5e2:	39 07       	cpc	r19, r25
 5e4:	30 f0       	brcs	.+12     	; 0x5f2 <__vector_13+0xfe>
			my_pid.pid_tick_sample = 0;
 5e6:	10 92 2f 01 	sts	0x012F, r1
 5ea:	10 92 2e 01 	sts	0x012E, r1
			pid();
 5ee:	0e 94 77 01 	call	0x2ee	; 0x2ee <pid>
		}

		my_pid.pid_pwm_tick++;
 5f2:	e4 e3       	ldi	r30, 0x34	; 52
 5f4:	f1 e0       	ldi	r31, 0x01	; 1
 5f6:	80 81       	ld	r24, Z
 5f8:	91 81       	ldd	r25, Z+1	; 0x01
 5fa:	01 96       	adiw	r24, 0x01	; 1
 5fc:	91 83       	std	Z+1, r25	; 0x01
 5fe:	80 83       	st	Z, r24
		if(my_pid.pid_pwm_tick >= my_pid.pwm_period && my_pid.pwm_top_val > 0) {
 600:	20 81       	ld	r18, Z
 602:	31 81       	ldd	r19, Z+1	; 0x01
 604:	80 91 32 01 	lds	r24, 0x0132
 608:	90 91 33 01 	lds	r25, 0x0133
 60c:	28 17       	cp	r18, r24
 60e:	39 07       	cpc	r19, r25
 610:	a8 f0       	brcs	.+42     	; 0x63c <__vector_13+0x148>
 612:	80 91 30 01 	lds	r24, 0x0130
 616:	90 91 31 01 	lds	r25, 0x0131
 61a:	89 2b       	or	r24, r25
 61c:	09 f4       	brne	.+2      	; 0x620 <__vector_13+0x12c>
 61e:	9f c0       	rjmp	.+318    	; 0x75e <__vector_13+0x26a>
			my_pid.pid_pwm_tick = 0;
 620:	10 92 35 01 	sts	0x0135, r1
 624:	10 92 34 01 	sts	0x0134, r1

			if(my_pid.dir == CW) {
 628:	80 91 19 01 	lds	r24, 0x0119
 62c:	81 11       	cpse	r24, r1
 62e:	02 c0       	rjmp	.+4      	; 0x634 <__vector_13+0x140>
				MOT_PORT |= (1 << MOT_PIN0);
 630:	29 9a       	sbi	0x05, 1	; 5
 632:	18 c0       	rjmp	.+48     	; 0x664 <__vector_13+0x170>
			} else if(my_pid.dir == CCW) {
 634:	81 30       	cpi	r24, 0x01	; 1
 636:	b1 f4       	brne	.+44     	; 0x664 <__vector_13+0x170>
				MOT_PORT |= (1 << MOT_PIN1);
 638:	2a 9a       	sbi	0x05, 2	; 5
 63a:	14 c0       	rjmp	.+40     	; 0x664 <__vector_13+0x170>
			}
		} else if (my_pid.pid_pwm_tick >= my_pid.pwm_top_val) {
 63c:	20 91 34 01 	lds	r18, 0x0134
 640:	30 91 35 01 	lds	r19, 0x0135
 644:	80 91 30 01 	lds	r24, 0x0130
 648:	90 91 31 01 	lds	r25, 0x0131
 64c:	28 17       	cp	r18, r24
 64e:	39 07       	cpc	r19, r25
 650:	48 f0       	brcs	.+18     	; 0x664 <__vector_13+0x170>
			if(my_pid.dir == CW) {
 652:	80 91 19 01 	lds	r24, 0x0119
 656:	81 11       	cpse	r24, r1
 658:	02 c0       	rjmp	.+4      	; 0x65e <__vector_13+0x16a>
				MOT_PORT &= ~(1 << MOT_PIN0);
 65a:	29 98       	cbi	0x05, 1	; 5
 65c:	03 c0       	rjmp	.+6      	; 0x664 <__vector_13+0x170>
			} else if(my_pid.dir == CCW) {
 65e:	81 30       	cpi	r24, 0x01	; 1
 660:	09 f4       	brne	.+2      	; 0x664 <__vector_13+0x170>
				MOT_PORT &= ~(1 << MOT_PIN1);
 662:	2a 98       	cbi	0x05, 2	; 5
			}
		}
	}


	if(timer_node_0 > 0) timer_node_0--;
 664:	80 91 15 01 	lds	r24, 0x0115
 668:	90 91 16 01 	lds	r25, 0x0116
 66c:	a0 91 17 01 	lds	r26, 0x0117
 670:	b0 91 18 01 	lds	r27, 0x0118
 674:	89 2b       	or	r24, r25
 676:	8a 2b       	or	r24, r26
 678:	8b 2b       	or	r24, r27
 67a:	99 f0       	breq	.+38     	; 0x6a2 <__vector_13+0x1ae>
 67c:	80 91 15 01 	lds	r24, 0x0115
 680:	90 91 16 01 	lds	r25, 0x0116
 684:	a0 91 17 01 	lds	r26, 0x0117
 688:	b0 91 18 01 	lds	r27, 0x0118
 68c:	01 97       	sbiw	r24, 0x01	; 1
 68e:	a1 09       	sbc	r26, r1
 690:	b1 09       	sbc	r27, r1
 692:	80 93 15 01 	sts	0x0115, r24
 696:	90 93 16 01 	sts	0x0116, r25
 69a:	a0 93 17 01 	sts	0x0117, r26
 69e:	b0 93 18 01 	sts	0x0118, r27
	if(timer_node_1 > 0) timer_node_1--;
 6a2:	80 91 11 01 	lds	r24, 0x0111
 6a6:	90 91 12 01 	lds	r25, 0x0112
 6aa:	a0 91 13 01 	lds	r26, 0x0113
 6ae:	b0 91 14 01 	lds	r27, 0x0114
 6b2:	89 2b       	or	r24, r25
 6b4:	8a 2b       	or	r24, r26
 6b6:	8b 2b       	or	r24, r27
 6b8:	99 f0       	breq	.+38     	; 0x6e0 <__vector_13+0x1ec>
 6ba:	80 91 11 01 	lds	r24, 0x0111
 6be:	90 91 12 01 	lds	r25, 0x0112
 6c2:	a0 91 13 01 	lds	r26, 0x0113
 6c6:	b0 91 14 01 	lds	r27, 0x0114
 6ca:	01 97       	sbiw	r24, 0x01	; 1
 6cc:	a1 09       	sbc	r26, r1
 6ce:	b1 09       	sbc	r27, r1
 6d0:	80 93 11 01 	sts	0x0111, r24
 6d4:	90 93 12 01 	sts	0x0112, r25
 6d8:	a0 93 13 01 	sts	0x0113, r26
 6dc:	b0 93 14 01 	sts	0x0114, r27
	if(timer_node_2 > 0) timer_node_2--;
 6e0:	80 91 0d 01 	lds	r24, 0x010D
 6e4:	90 91 0e 01 	lds	r25, 0x010E
 6e8:	a0 91 0f 01 	lds	r26, 0x010F
 6ec:	b0 91 10 01 	lds	r27, 0x0110
 6f0:	89 2b       	or	r24, r25
 6f2:	8a 2b       	or	r24, r26
 6f4:	8b 2b       	or	r24, r27
 6f6:	99 f0       	breq	.+38     	; 0x71e <__vector_13+0x22a>
 6f8:	80 91 0d 01 	lds	r24, 0x010D
 6fc:	90 91 0e 01 	lds	r25, 0x010E
 700:	a0 91 0f 01 	lds	r26, 0x010F
 704:	b0 91 10 01 	lds	r27, 0x0110
 708:	01 97       	sbiw	r24, 0x01	; 1
 70a:	a1 09       	sbc	r26, r1
 70c:	b1 09       	sbc	r27, r1
 70e:	80 93 0d 01 	sts	0x010D, r24
 712:	90 93 0e 01 	sts	0x010E, r25
 716:	a0 93 0f 01 	sts	0x010F, r26
 71a:	b0 93 10 01 	sts	0x0110, r27
	if(pause_time > 0) pause_time--;
 71e:	80 91 09 01 	lds	r24, 0x0109
 722:	90 91 0a 01 	lds	r25, 0x010A
 726:	a0 91 0b 01 	lds	r26, 0x010B
 72a:	b0 91 0c 01 	lds	r27, 0x010C
 72e:	89 2b       	or	r24, r25
 730:	8a 2b       	or	r24, r26
 732:	8b 2b       	or	r24, r27
 734:	c9 f0       	breq	.+50     	; 0x768 <__vector_13+0x274>
 736:	80 91 09 01 	lds	r24, 0x0109
 73a:	90 91 0a 01 	lds	r25, 0x010A
 73e:	a0 91 0b 01 	lds	r26, 0x010B
 742:	b0 91 0c 01 	lds	r27, 0x010C
 746:	01 97       	sbiw	r24, 0x01	; 1
 748:	a1 09       	sbc	r26, r1
 74a:	b1 09       	sbc	r27, r1
 74c:	80 93 09 01 	sts	0x0109, r24
 750:	90 93 0a 01 	sts	0x010A, r25
 754:	a0 93 0b 01 	sts	0x010B, r26
 758:	b0 93 0c 01 	sts	0x010C, r27
 75c:	05 c0       	rjmp	.+10     	; 0x768 <__vector_13+0x274>
			if(my_pid.dir == CW) {
				MOT_PORT |= (1 << MOT_PIN0);
			} else if(my_pid.dir == CCW) {
				MOT_PORT |= (1 << MOT_PIN1);
			}
		} else if (my_pid.pid_pwm_tick >= my_pid.pwm_top_val) {
 75e:	80 91 34 01 	lds	r24, 0x0134
 762:	90 91 35 01 	lds	r25, 0x0135
 766:	75 cf       	rjmp	.-278    	; 0x652 <__vector_13+0x15e>

	if(timer_node_0 > 0) timer_node_0--;
	if(timer_node_1 > 0) timer_node_1--;
	if(timer_node_2 > 0) timer_node_2--;
	if(pause_time > 0) pause_time--;
}
 768:	ff 91       	pop	r31
 76a:	ef 91       	pop	r30
 76c:	bf 91       	pop	r27
 76e:	af 91       	pop	r26
 770:	9f 91       	pop	r25
 772:	8f 91       	pop	r24
 774:	7f 91       	pop	r23
 776:	6f 91       	pop	r22
 778:	5f 91       	pop	r21
 77a:	4f 91       	pop	r20
 77c:	3f 91       	pop	r19
 77e:	2f 91       	pop	r18
 780:	0f 90       	pop	r0
 782:	0f be       	out	0x3f, r0	; 63
 784:	0f 90       	pop	r0
 786:	1f 90       	pop	r1
 788:	18 95       	reti

0000078a <clear_buffer>:
	*dest = '\0';
}

void clear_buffer()
{
	uart0_index = 0;
 78a:	10 92 59 01 	sts	0x0159, r1
	uart0_buff[uart0_index] = '\0';
 78e:	e0 91 59 01 	lds	r30, 0x0159
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	e5 5a       	subi	r30, 0xA5	; 165
 796:	fe 4f       	sbci	r31, 0xFE	; 254
 798:	10 82       	st	Z, r1
 79a:	08 95       	ret

0000079c <__vector_18>:
//{
//	uart0_sent = 1;
//}

ISR(USART_RX_vect)
{
 79c:	1f 92       	push	r1
 79e:	0f 92       	push	r0
 7a0:	0f b6       	in	r0, 0x3f	; 63
 7a2:	0f 92       	push	r0
 7a4:	11 24       	eor	r1, r1
 7a6:	2f 93       	push	r18
 7a8:	3f 93       	push	r19
 7aa:	4f 93       	push	r20
 7ac:	5f 93       	push	r21
 7ae:	6f 93       	push	r22
 7b0:	7f 93       	push	r23
 7b2:	8f 93       	push	r24
 7b4:	9f 93       	push	r25
 7b6:	af 93       	push	r26
 7b8:	bf 93       	push	r27
 7ba:	ef 93       	push	r30
 7bc:	ff 93       	push	r31
	char temp;

	temp = UDR0;
 7be:	80 91 c6 00 	lds	r24, 0x00C6
	if (uart0_index < (UART0_SIZE - 2)) {
 7c2:	90 91 59 01 	lds	r25, 0x0159
 7c6:	9d 3f       	cpi	r25, 0xFD	; 253
 7c8:	d8 f4       	brcc	.+54     	; 0x800 <__vector_18+0x64>
		/* There is room for more characters. */
		uart0_buff[uart0_index] = temp;
 7ca:	e0 91 59 01 	lds	r30, 0x0159
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	e5 5a       	subi	r30, 0xA5	; 165
 7d2:	fe 4f       	sbci	r31, 0xFE	; 254
 7d4:	80 83       	st	Z, r24
		uart0_buff[uart0_index + 1] = '\0';
 7d6:	e0 91 59 01 	lds	r30, 0x0159
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	e4 5a       	subi	r30, 0xA4	; 164
 7de:	fe 4f       	sbci	r31, 0xFE	; 254
 7e0:	10 82       	st	Z, r1
		uart0_index++;
 7e2:	90 91 59 01 	lds	r25, 0x0159
 7e6:	9f 5f       	subi	r25, 0xFF	; 255
 7e8:	90 93 59 01 	sts	0x0159, r25
		if (temp == '\0' || temp == '\n' || temp == '\r') {
 7ec:	88 23       	and	r24, r24
 7ee:	21 f0       	breq	.+8      	; 0x7f8 <__vector_18+0x5c>
 7f0:	8a 30       	cpi	r24, 0x0A	; 10
 7f2:	11 f0       	breq	.+4      	; 0x7f8 <__vector_18+0x5c>
 7f4:	8d 30       	cpi	r24, 0x0D	; 13
 7f6:	31 f4       	brne	.+12     	; 0x804 <__vector_18+0x68>
			uart0_received = 1;
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	80 93 5a 01 	sts	0x015A, r24
 7fe:	02 c0       	rjmp	.+4      	; 0x804 <__vector_18+0x68>
		}
	} else {
		/* Wait for buffer to be cleared. */
		clear_buffer();	
 800:	0e 94 c5 03 	call	0x78a	; 0x78a <clear_buffer>
	}
}
 804:	ff 91       	pop	r31
 806:	ef 91       	pop	r30
 808:	bf 91       	pop	r27
 80a:	af 91       	pop	r26
 80c:	9f 91       	pop	r25
 80e:	8f 91       	pop	r24
 810:	7f 91       	pop	r23
 812:	6f 91       	pop	r22
 814:	5f 91       	pop	r21
 816:	4f 91       	pop	r20
 818:	3f 91       	pop	r19
 81a:	2f 91       	pop	r18
 81c:	0f 90       	pop	r0
 81e:	0f be       	out	0x3f, r0	; 63
 820:	0f 90       	pop	r0
 822:	1f 90       	pop	r1
 824:	18 95       	reti

00000826 <__subsf3>:
 826:	50 58       	subi	r21, 0x80	; 128

00000828 <__addsf3>:
 828:	bb 27       	eor	r27, r27
 82a:	aa 27       	eor	r26, r26
 82c:	0e d0       	rcall	.+28     	; 0x84a <__addsf3x>
 82e:	4d c1       	rjmp	.+666    	; 0xaca <__fp_round>
 830:	3e d1       	rcall	.+636    	; 0xaae <__fp_pscA>
 832:	30 f0       	brcs	.+12     	; 0x840 <__addsf3+0x18>
 834:	43 d1       	rcall	.+646    	; 0xabc <__fp_pscB>
 836:	20 f0       	brcs	.+8      	; 0x840 <__addsf3+0x18>
 838:	31 f4       	brne	.+12     	; 0x846 <__addsf3+0x1e>
 83a:	9f 3f       	cpi	r25, 0xFF	; 255
 83c:	11 f4       	brne	.+4      	; 0x842 <__addsf3+0x1a>
 83e:	1e f4       	brtc	.+6      	; 0x846 <__addsf3+0x1e>
 840:	33 c1       	rjmp	.+614    	; 0xaa8 <__fp_nan>
 842:	0e f4       	brtc	.+2      	; 0x846 <__addsf3+0x1e>
 844:	e0 95       	com	r30
 846:	e7 fb       	bst	r30, 7
 848:	29 c1       	rjmp	.+594    	; 0xa9c <__fp_inf>

0000084a <__addsf3x>:
 84a:	e9 2f       	mov	r30, r25
 84c:	4f d1       	rcall	.+670    	; 0xaec <__fp_split3>
 84e:	80 f3       	brcs	.-32     	; 0x830 <__addsf3+0x8>
 850:	ba 17       	cp	r27, r26
 852:	62 07       	cpc	r22, r18
 854:	73 07       	cpc	r23, r19
 856:	84 07       	cpc	r24, r20
 858:	95 07       	cpc	r25, r21
 85a:	18 f0       	brcs	.+6      	; 0x862 <__addsf3x+0x18>
 85c:	71 f4       	brne	.+28     	; 0x87a <__addsf3x+0x30>
 85e:	9e f5       	brtc	.+102    	; 0x8c6 <__addsf3x+0x7c>
 860:	67 c1       	rjmp	.+718    	; 0xb30 <__fp_zero>
 862:	0e f4       	brtc	.+2      	; 0x866 <__addsf3x+0x1c>
 864:	e0 95       	com	r30
 866:	0b 2e       	mov	r0, r27
 868:	ba 2f       	mov	r27, r26
 86a:	a0 2d       	mov	r26, r0
 86c:	0b 01       	movw	r0, r22
 86e:	b9 01       	movw	r22, r18
 870:	90 01       	movw	r18, r0
 872:	0c 01       	movw	r0, r24
 874:	ca 01       	movw	r24, r20
 876:	a0 01       	movw	r20, r0
 878:	11 24       	eor	r1, r1
 87a:	ff 27       	eor	r31, r31
 87c:	59 1b       	sub	r21, r25
 87e:	99 f0       	breq	.+38     	; 0x8a6 <__addsf3x+0x5c>
 880:	59 3f       	cpi	r21, 0xF9	; 249
 882:	50 f4       	brcc	.+20     	; 0x898 <__addsf3x+0x4e>
 884:	50 3e       	cpi	r21, 0xE0	; 224
 886:	68 f1       	brcs	.+90     	; 0x8e2 <__addsf3x+0x98>
 888:	1a 16       	cp	r1, r26
 88a:	f0 40       	sbci	r31, 0x00	; 0
 88c:	a2 2f       	mov	r26, r18
 88e:	23 2f       	mov	r18, r19
 890:	34 2f       	mov	r19, r20
 892:	44 27       	eor	r20, r20
 894:	58 5f       	subi	r21, 0xF8	; 248
 896:	f3 cf       	rjmp	.-26     	; 0x87e <__addsf3x+0x34>
 898:	46 95       	lsr	r20
 89a:	37 95       	ror	r19
 89c:	27 95       	ror	r18
 89e:	a7 95       	ror	r26
 8a0:	f0 40       	sbci	r31, 0x00	; 0
 8a2:	53 95       	inc	r21
 8a4:	c9 f7       	brne	.-14     	; 0x898 <__addsf3x+0x4e>
 8a6:	7e f4       	brtc	.+30     	; 0x8c6 <__addsf3x+0x7c>
 8a8:	1f 16       	cp	r1, r31
 8aa:	ba 0b       	sbc	r27, r26
 8ac:	62 0b       	sbc	r22, r18
 8ae:	73 0b       	sbc	r23, r19
 8b0:	84 0b       	sbc	r24, r20
 8b2:	ba f0       	brmi	.+46     	; 0x8e2 <__addsf3x+0x98>
 8b4:	91 50       	subi	r25, 0x01	; 1
 8b6:	a1 f0       	breq	.+40     	; 0x8e0 <__addsf3x+0x96>
 8b8:	ff 0f       	add	r31, r31
 8ba:	bb 1f       	adc	r27, r27
 8bc:	66 1f       	adc	r22, r22
 8be:	77 1f       	adc	r23, r23
 8c0:	88 1f       	adc	r24, r24
 8c2:	c2 f7       	brpl	.-16     	; 0x8b4 <__addsf3x+0x6a>
 8c4:	0e c0       	rjmp	.+28     	; 0x8e2 <__addsf3x+0x98>
 8c6:	ba 0f       	add	r27, r26
 8c8:	62 1f       	adc	r22, r18
 8ca:	73 1f       	adc	r23, r19
 8cc:	84 1f       	adc	r24, r20
 8ce:	48 f4       	brcc	.+18     	; 0x8e2 <__addsf3x+0x98>
 8d0:	87 95       	ror	r24
 8d2:	77 95       	ror	r23
 8d4:	67 95       	ror	r22
 8d6:	b7 95       	ror	r27
 8d8:	f7 95       	ror	r31
 8da:	9e 3f       	cpi	r25, 0xFE	; 254
 8dc:	08 f0       	brcs	.+2      	; 0x8e0 <__addsf3x+0x96>
 8de:	b3 cf       	rjmp	.-154    	; 0x846 <__addsf3+0x1e>
 8e0:	93 95       	inc	r25
 8e2:	88 0f       	add	r24, r24
 8e4:	08 f0       	brcs	.+2      	; 0x8e8 <__addsf3x+0x9e>
 8e6:	99 27       	eor	r25, r25
 8e8:	ee 0f       	add	r30, r30
 8ea:	97 95       	ror	r25
 8ec:	87 95       	ror	r24
 8ee:	08 95       	ret

000008f0 <__divsf3>:
 8f0:	0c d0       	rcall	.+24     	; 0x90a <__divsf3x>
 8f2:	eb c0       	rjmp	.+470    	; 0xaca <__fp_round>
 8f4:	e3 d0       	rcall	.+454    	; 0xabc <__fp_pscB>
 8f6:	40 f0       	brcs	.+16     	; 0x908 <__stack+0x9>
 8f8:	da d0       	rcall	.+436    	; 0xaae <__fp_pscA>
 8fa:	30 f0       	brcs	.+12     	; 0x908 <__stack+0x9>
 8fc:	21 f4       	brne	.+8      	; 0x906 <__stack+0x7>
 8fe:	5f 3f       	cpi	r21, 0xFF	; 255
 900:	19 f0       	breq	.+6      	; 0x908 <__stack+0x9>
 902:	cc c0       	rjmp	.+408    	; 0xa9c <__fp_inf>
 904:	51 11       	cpse	r21, r1
 906:	15 c1       	rjmp	.+554    	; 0xb32 <__fp_szero>
 908:	cf c0       	rjmp	.+414    	; 0xaa8 <__fp_nan>

0000090a <__divsf3x>:
 90a:	f0 d0       	rcall	.+480    	; 0xaec <__fp_split3>
 90c:	98 f3       	brcs	.-26     	; 0x8f4 <__divsf3+0x4>

0000090e <__divsf3_pse>:
 90e:	99 23       	and	r25, r25
 910:	c9 f3       	breq	.-14     	; 0x904 <__stack+0x5>
 912:	55 23       	and	r21, r21
 914:	b1 f3       	breq	.-20     	; 0x902 <__stack+0x3>
 916:	95 1b       	sub	r25, r21
 918:	55 0b       	sbc	r21, r21
 91a:	bb 27       	eor	r27, r27
 91c:	aa 27       	eor	r26, r26
 91e:	62 17       	cp	r22, r18
 920:	73 07       	cpc	r23, r19
 922:	84 07       	cpc	r24, r20
 924:	38 f0       	brcs	.+14     	; 0x934 <__divsf3_pse+0x26>
 926:	9f 5f       	subi	r25, 0xFF	; 255
 928:	5f 4f       	sbci	r21, 0xFF	; 255
 92a:	22 0f       	add	r18, r18
 92c:	33 1f       	adc	r19, r19
 92e:	44 1f       	adc	r20, r20
 930:	aa 1f       	adc	r26, r26
 932:	a9 f3       	breq	.-22     	; 0x91e <__divsf3_pse+0x10>
 934:	33 d0       	rcall	.+102    	; 0x99c <__divsf3_pse+0x8e>
 936:	0e 2e       	mov	r0, r30
 938:	3a f0       	brmi	.+14     	; 0x948 <__divsf3_pse+0x3a>
 93a:	e0 e8       	ldi	r30, 0x80	; 128
 93c:	30 d0       	rcall	.+96     	; 0x99e <__divsf3_pse+0x90>
 93e:	91 50       	subi	r25, 0x01	; 1
 940:	50 40       	sbci	r21, 0x00	; 0
 942:	e6 95       	lsr	r30
 944:	00 1c       	adc	r0, r0
 946:	ca f7       	brpl	.-14     	; 0x93a <__divsf3_pse+0x2c>
 948:	29 d0       	rcall	.+82     	; 0x99c <__divsf3_pse+0x8e>
 94a:	fe 2f       	mov	r31, r30
 94c:	27 d0       	rcall	.+78     	; 0x99c <__divsf3_pse+0x8e>
 94e:	66 0f       	add	r22, r22
 950:	77 1f       	adc	r23, r23
 952:	88 1f       	adc	r24, r24
 954:	bb 1f       	adc	r27, r27
 956:	26 17       	cp	r18, r22
 958:	37 07       	cpc	r19, r23
 95a:	48 07       	cpc	r20, r24
 95c:	ab 07       	cpc	r26, r27
 95e:	b0 e8       	ldi	r27, 0x80	; 128
 960:	09 f0       	breq	.+2      	; 0x964 <__divsf3_pse+0x56>
 962:	bb 0b       	sbc	r27, r27
 964:	80 2d       	mov	r24, r0
 966:	bf 01       	movw	r22, r30
 968:	ff 27       	eor	r31, r31
 96a:	93 58       	subi	r25, 0x83	; 131
 96c:	5f 4f       	sbci	r21, 0xFF	; 255
 96e:	2a f0       	brmi	.+10     	; 0x97a <__divsf3_pse+0x6c>
 970:	9e 3f       	cpi	r25, 0xFE	; 254
 972:	51 05       	cpc	r21, r1
 974:	68 f0       	brcs	.+26     	; 0x990 <__divsf3_pse+0x82>
 976:	92 c0       	rjmp	.+292    	; 0xa9c <__fp_inf>
 978:	dc c0       	rjmp	.+440    	; 0xb32 <__fp_szero>
 97a:	5f 3f       	cpi	r21, 0xFF	; 255
 97c:	ec f3       	brlt	.-6      	; 0x978 <__divsf3_pse+0x6a>
 97e:	98 3e       	cpi	r25, 0xE8	; 232
 980:	dc f3       	brlt	.-10     	; 0x978 <__divsf3_pse+0x6a>
 982:	86 95       	lsr	r24
 984:	77 95       	ror	r23
 986:	67 95       	ror	r22
 988:	b7 95       	ror	r27
 98a:	f7 95       	ror	r31
 98c:	9f 5f       	subi	r25, 0xFF	; 255
 98e:	c9 f7       	brne	.-14     	; 0x982 <__divsf3_pse+0x74>
 990:	88 0f       	add	r24, r24
 992:	91 1d       	adc	r25, r1
 994:	96 95       	lsr	r25
 996:	87 95       	ror	r24
 998:	97 f9       	bld	r25, 7
 99a:	08 95       	ret
 99c:	e1 e0       	ldi	r30, 0x01	; 1
 99e:	66 0f       	add	r22, r22
 9a0:	77 1f       	adc	r23, r23
 9a2:	88 1f       	adc	r24, r24
 9a4:	bb 1f       	adc	r27, r27
 9a6:	62 17       	cp	r22, r18
 9a8:	73 07       	cpc	r23, r19
 9aa:	84 07       	cpc	r24, r20
 9ac:	ba 07       	cpc	r27, r26
 9ae:	20 f0       	brcs	.+8      	; 0x9b8 <__divsf3_pse+0xaa>
 9b0:	62 1b       	sub	r22, r18
 9b2:	73 0b       	sbc	r23, r19
 9b4:	84 0b       	sbc	r24, r20
 9b6:	ba 0b       	sbc	r27, r26
 9b8:	ee 1f       	adc	r30, r30
 9ba:	88 f7       	brcc	.-30     	; 0x99e <__divsf3_pse+0x90>
 9bc:	e0 95       	com	r30
 9be:	08 95       	ret

000009c0 <__fixsfsi>:
 9c0:	04 d0       	rcall	.+8      	; 0x9ca <__fixunssfsi>
 9c2:	68 94       	set
 9c4:	b1 11       	cpse	r27, r1
 9c6:	b5 c0       	rjmp	.+362    	; 0xb32 <__fp_szero>
 9c8:	08 95       	ret

000009ca <__fixunssfsi>:
 9ca:	98 d0       	rcall	.+304    	; 0xafc <__fp_splitA>
 9cc:	88 f0       	brcs	.+34     	; 0x9f0 <__fixunssfsi+0x26>
 9ce:	9f 57       	subi	r25, 0x7F	; 127
 9d0:	90 f0       	brcs	.+36     	; 0x9f6 <__fixunssfsi+0x2c>
 9d2:	b9 2f       	mov	r27, r25
 9d4:	99 27       	eor	r25, r25
 9d6:	b7 51       	subi	r27, 0x17	; 23
 9d8:	a0 f0       	brcs	.+40     	; 0xa02 <__fixunssfsi+0x38>
 9da:	d1 f0       	breq	.+52     	; 0xa10 <__fixunssfsi+0x46>
 9dc:	66 0f       	add	r22, r22
 9de:	77 1f       	adc	r23, r23
 9e0:	88 1f       	adc	r24, r24
 9e2:	99 1f       	adc	r25, r25
 9e4:	1a f0       	brmi	.+6      	; 0x9ec <__fixunssfsi+0x22>
 9e6:	ba 95       	dec	r27
 9e8:	c9 f7       	brne	.-14     	; 0x9dc <__fixunssfsi+0x12>
 9ea:	12 c0       	rjmp	.+36     	; 0xa10 <__fixunssfsi+0x46>
 9ec:	b1 30       	cpi	r27, 0x01	; 1
 9ee:	81 f0       	breq	.+32     	; 0xa10 <__fixunssfsi+0x46>
 9f0:	9f d0       	rcall	.+318    	; 0xb30 <__fp_zero>
 9f2:	b1 e0       	ldi	r27, 0x01	; 1
 9f4:	08 95       	ret
 9f6:	9c c0       	rjmp	.+312    	; 0xb30 <__fp_zero>
 9f8:	67 2f       	mov	r22, r23
 9fa:	78 2f       	mov	r23, r24
 9fc:	88 27       	eor	r24, r24
 9fe:	b8 5f       	subi	r27, 0xF8	; 248
 a00:	39 f0       	breq	.+14     	; 0xa10 <__fixunssfsi+0x46>
 a02:	b9 3f       	cpi	r27, 0xF9	; 249
 a04:	cc f3       	brlt	.-14     	; 0x9f8 <__fixunssfsi+0x2e>
 a06:	86 95       	lsr	r24
 a08:	77 95       	ror	r23
 a0a:	67 95       	ror	r22
 a0c:	b3 95       	inc	r27
 a0e:	d9 f7       	brne	.-10     	; 0xa06 <__fixunssfsi+0x3c>
 a10:	3e f4       	brtc	.+14     	; 0xa20 <__fixunssfsi+0x56>
 a12:	90 95       	com	r25
 a14:	80 95       	com	r24
 a16:	70 95       	com	r23
 a18:	61 95       	neg	r22
 a1a:	7f 4f       	sbci	r23, 0xFF	; 255
 a1c:	8f 4f       	sbci	r24, 0xFF	; 255
 a1e:	9f 4f       	sbci	r25, 0xFF	; 255
 a20:	08 95       	ret

00000a22 <__floatunsisf>:
 a22:	e8 94       	clt
 a24:	09 c0       	rjmp	.+18     	; 0xa38 <__floatsisf+0x12>

00000a26 <__floatsisf>:
 a26:	97 fb       	bst	r25, 7
 a28:	3e f4       	brtc	.+14     	; 0xa38 <__floatsisf+0x12>
 a2a:	90 95       	com	r25
 a2c:	80 95       	com	r24
 a2e:	70 95       	com	r23
 a30:	61 95       	neg	r22
 a32:	7f 4f       	sbci	r23, 0xFF	; 255
 a34:	8f 4f       	sbci	r24, 0xFF	; 255
 a36:	9f 4f       	sbci	r25, 0xFF	; 255
 a38:	99 23       	and	r25, r25
 a3a:	a9 f0       	breq	.+42     	; 0xa66 <__floatsisf+0x40>
 a3c:	f9 2f       	mov	r31, r25
 a3e:	96 e9       	ldi	r25, 0x96	; 150
 a40:	bb 27       	eor	r27, r27
 a42:	93 95       	inc	r25
 a44:	f6 95       	lsr	r31
 a46:	87 95       	ror	r24
 a48:	77 95       	ror	r23
 a4a:	67 95       	ror	r22
 a4c:	b7 95       	ror	r27
 a4e:	f1 11       	cpse	r31, r1
 a50:	f8 cf       	rjmp	.-16     	; 0xa42 <__floatsisf+0x1c>
 a52:	fa f4       	brpl	.+62     	; 0xa92 <__floatsisf+0x6c>
 a54:	bb 0f       	add	r27, r27
 a56:	11 f4       	brne	.+4      	; 0xa5c <__floatsisf+0x36>
 a58:	60 ff       	sbrs	r22, 0
 a5a:	1b c0       	rjmp	.+54     	; 0xa92 <__floatsisf+0x6c>
 a5c:	6f 5f       	subi	r22, 0xFF	; 255
 a5e:	7f 4f       	sbci	r23, 0xFF	; 255
 a60:	8f 4f       	sbci	r24, 0xFF	; 255
 a62:	9f 4f       	sbci	r25, 0xFF	; 255
 a64:	16 c0       	rjmp	.+44     	; 0xa92 <__floatsisf+0x6c>
 a66:	88 23       	and	r24, r24
 a68:	11 f0       	breq	.+4      	; 0xa6e <__floatsisf+0x48>
 a6a:	96 e9       	ldi	r25, 0x96	; 150
 a6c:	11 c0       	rjmp	.+34     	; 0xa90 <__floatsisf+0x6a>
 a6e:	77 23       	and	r23, r23
 a70:	21 f0       	breq	.+8      	; 0xa7a <__floatsisf+0x54>
 a72:	9e e8       	ldi	r25, 0x8E	; 142
 a74:	87 2f       	mov	r24, r23
 a76:	76 2f       	mov	r23, r22
 a78:	05 c0       	rjmp	.+10     	; 0xa84 <__floatsisf+0x5e>
 a7a:	66 23       	and	r22, r22
 a7c:	71 f0       	breq	.+28     	; 0xa9a <__floatsisf+0x74>
 a7e:	96 e8       	ldi	r25, 0x86	; 134
 a80:	86 2f       	mov	r24, r22
 a82:	70 e0       	ldi	r23, 0x00	; 0
 a84:	60 e0       	ldi	r22, 0x00	; 0
 a86:	2a f0       	brmi	.+10     	; 0xa92 <__floatsisf+0x6c>
 a88:	9a 95       	dec	r25
 a8a:	66 0f       	add	r22, r22
 a8c:	77 1f       	adc	r23, r23
 a8e:	88 1f       	adc	r24, r24
 a90:	da f7       	brpl	.-10     	; 0xa88 <__floatsisf+0x62>
 a92:	88 0f       	add	r24, r24
 a94:	96 95       	lsr	r25
 a96:	87 95       	ror	r24
 a98:	97 f9       	bld	r25, 7
 a9a:	08 95       	ret

00000a9c <__fp_inf>:
 a9c:	97 f9       	bld	r25, 7
 a9e:	9f 67       	ori	r25, 0x7F	; 127
 aa0:	80 e8       	ldi	r24, 0x80	; 128
 aa2:	70 e0       	ldi	r23, 0x00	; 0
 aa4:	60 e0       	ldi	r22, 0x00	; 0
 aa6:	08 95       	ret

00000aa8 <__fp_nan>:
 aa8:	9f ef       	ldi	r25, 0xFF	; 255
 aaa:	80 ec       	ldi	r24, 0xC0	; 192
 aac:	08 95       	ret

00000aae <__fp_pscA>:
 aae:	00 24       	eor	r0, r0
 ab0:	0a 94       	dec	r0
 ab2:	16 16       	cp	r1, r22
 ab4:	17 06       	cpc	r1, r23
 ab6:	18 06       	cpc	r1, r24
 ab8:	09 06       	cpc	r0, r25
 aba:	08 95       	ret

00000abc <__fp_pscB>:
 abc:	00 24       	eor	r0, r0
 abe:	0a 94       	dec	r0
 ac0:	12 16       	cp	r1, r18
 ac2:	13 06       	cpc	r1, r19
 ac4:	14 06       	cpc	r1, r20
 ac6:	05 06       	cpc	r0, r21
 ac8:	08 95       	ret

00000aca <__fp_round>:
 aca:	09 2e       	mov	r0, r25
 acc:	03 94       	inc	r0
 ace:	00 0c       	add	r0, r0
 ad0:	11 f4       	brne	.+4      	; 0xad6 <__fp_round+0xc>
 ad2:	88 23       	and	r24, r24
 ad4:	52 f0       	brmi	.+20     	; 0xaea <__fp_round+0x20>
 ad6:	bb 0f       	add	r27, r27
 ad8:	40 f4       	brcc	.+16     	; 0xaea <__fp_round+0x20>
 ada:	bf 2b       	or	r27, r31
 adc:	11 f4       	brne	.+4      	; 0xae2 <__fp_round+0x18>
 ade:	60 ff       	sbrs	r22, 0
 ae0:	04 c0       	rjmp	.+8      	; 0xaea <__fp_round+0x20>
 ae2:	6f 5f       	subi	r22, 0xFF	; 255
 ae4:	7f 4f       	sbci	r23, 0xFF	; 255
 ae6:	8f 4f       	sbci	r24, 0xFF	; 255
 ae8:	9f 4f       	sbci	r25, 0xFF	; 255
 aea:	08 95       	ret

00000aec <__fp_split3>:
 aec:	57 fd       	sbrc	r21, 7
 aee:	90 58       	subi	r25, 0x80	; 128
 af0:	44 0f       	add	r20, r20
 af2:	55 1f       	adc	r21, r21
 af4:	59 f0       	breq	.+22     	; 0xb0c <__fp_splitA+0x10>
 af6:	5f 3f       	cpi	r21, 0xFF	; 255
 af8:	71 f0       	breq	.+28     	; 0xb16 <__fp_splitA+0x1a>
 afa:	47 95       	ror	r20

00000afc <__fp_splitA>:
 afc:	88 0f       	add	r24, r24
 afe:	97 fb       	bst	r25, 7
 b00:	99 1f       	adc	r25, r25
 b02:	61 f0       	breq	.+24     	; 0xb1c <__fp_splitA+0x20>
 b04:	9f 3f       	cpi	r25, 0xFF	; 255
 b06:	79 f0       	breq	.+30     	; 0xb26 <__fp_splitA+0x2a>
 b08:	87 95       	ror	r24
 b0a:	08 95       	ret
 b0c:	12 16       	cp	r1, r18
 b0e:	13 06       	cpc	r1, r19
 b10:	14 06       	cpc	r1, r20
 b12:	55 1f       	adc	r21, r21
 b14:	f2 cf       	rjmp	.-28     	; 0xafa <__fp_split3+0xe>
 b16:	46 95       	lsr	r20
 b18:	f1 df       	rcall	.-30     	; 0xafc <__fp_splitA>
 b1a:	08 c0       	rjmp	.+16     	; 0xb2c <__fp_splitA+0x30>
 b1c:	16 16       	cp	r1, r22
 b1e:	17 06       	cpc	r1, r23
 b20:	18 06       	cpc	r1, r24
 b22:	99 1f       	adc	r25, r25
 b24:	f1 cf       	rjmp	.-30     	; 0xb08 <__fp_splitA+0xc>
 b26:	86 95       	lsr	r24
 b28:	71 05       	cpc	r23, r1
 b2a:	61 05       	cpc	r22, r1
 b2c:	08 94       	sec
 b2e:	08 95       	ret

00000b30 <__fp_zero>:
 b30:	e8 94       	clt

00000b32 <__fp_szero>:
 b32:	bb 27       	eor	r27, r27
 b34:	66 27       	eor	r22, r22
 b36:	77 27       	eor	r23, r23
 b38:	cb 01       	movw	r24, r22
 b3a:	97 f9       	bld	r25, 7
 b3c:	08 95       	ret

00000b3e <__mulsf3>:
 b3e:	0b d0       	rcall	.+22     	; 0xb56 <__mulsf3x>
 b40:	c4 cf       	rjmp	.-120    	; 0xaca <__fp_round>
 b42:	b5 df       	rcall	.-150    	; 0xaae <__fp_pscA>
 b44:	28 f0       	brcs	.+10     	; 0xb50 <__mulsf3+0x12>
 b46:	ba df       	rcall	.-140    	; 0xabc <__fp_pscB>
 b48:	18 f0       	brcs	.+6      	; 0xb50 <__mulsf3+0x12>
 b4a:	95 23       	and	r25, r21
 b4c:	09 f0       	breq	.+2      	; 0xb50 <__mulsf3+0x12>
 b4e:	a6 cf       	rjmp	.-180    	; 0xa9c <__fp_inf>
 b50:	ab cf       	rjmp	.-170    	; 0xaa8 <__fp_nan>
 b52:	11 24       	eor	r1, r1
 b54:	ee cf       	rjmp	.-36     	; 0xb32 <__fp_szero>

00000b56 <__mulsf3x>:
 b56:	ca df       	rcall	.-108    	; 0xaec <__fp_split3>
 b58:	a0 f3       	brcs	.-24     	; 0xb42 <__mulsf3+0x4>

00000b5a <__mulsf3_pse>:
 b5a:	95 9f       	mul	r25, r21
 b5c:	d1 f3       	breq	.-12     	; 0xb52 <__mulsf3+0x14>
 b5e:	95 0f       	add	r25, r21
 b60:	50 e0       	ldi	r21, 0x00	; 0
 b62:	55 1f       	adc	r21, r21
 b64:	62 9f       	mul	r22, r18
 b66:	f0 01       	movw	r30, r0
 b68:	72 9f       	mul	r23, r18
 b6a:	bb 27       	eor	r27, r27
 b6c:	f0 0d       	add	r31, r0
 b6e:	b1 1d       	adc	r27, r1
 b70:	63 9f       	mul	r22, r19
 b72:	aa 27       	eor	r26, r26
 b74:	f0 0d       	add	r31, r0
 b76:	b1 1d       	adc	r27, r1
 b78:	aa 1f       	adc	r26, r26
 b7a:	64 9f       	mul	r22, r20
 b7c:	66 27       	eor	r22, r22
 b7e:	b0 0d       	add	r27, r0
 b80:	a1 1d       	adc	r26, r1
 b82:	66 1f       	adc	r22, r22
 b84:	82 9f       	mul	r24, r18
 b86:	22 27       	eor	r18, r18
 b88:	b0 0d       	add	r27, r0
 b8a:	a1 1d       	adc	r26, r1
 b8c:	62 1f       	adc	r22, r18
 b8e:	73 9f       	mul	r23, r19
 b90:	b0 0d       	add	r27, r0
 b92:	a1 1d       	adc	r26, r1
 b94:	62 1f       	adc	r22, r18
 b96:	83 9f       	mul	r24, r19
 b98:	a0 0d       	add	r26, r0
 b9a:	61 1d       	adc	r22, r1
 b9c:	22 1f       	adc	r18, r18
 b9e:	74 9f       	mul	r23, r20
 ba0:	33 27       	eor	r19, r19
 ba2:	a0 0d       	add	r26, r0
 ba4:	61 1d       	adc	r22, r1
 ba6:	23 1f       	adc	r18, r19
 ba8:	84 9f       	mul	r24, r20
 baa:	60 0d       	add	r22, r0
 bac:	21 1d       	adc	r18, r1
 bae:	82 2f       	mov	r24, r18
 bb0:	76 2f       	mov	r23, r22
 bb2:	6a 2f       	mov	r22, r26
 bb4:	11 24       	eor	r1, r1
 bb6:	9f 57       	subi	r25, 0x7F	; 127
 bb8:	50 40       	sbci	r21, 0x00	; 0
 bba:	8a f0       	brmi	.+34     	; 0xbde <__mulsf3_pse+0x84>
 bbc:	e1 f0       	breq	.+56     	; 0xbf6 <__mulsf3_pse+0x9c>
 bbe:	88 23       	and	r24, r24
 bc0:	4a f0       	brmi	.+18     	; 0xbd4 <__mulsf3_pse+0x7a>
 bc2:	ee 0f       	add	r30, r30
 bc4:	ff 1f       	adc	r31, r31
 bc6:	bb 1f       	adc	r27, r27
 bc8:	66 1f       	adc	r22, r22
 bca:	77 1f       	adc	r23, r23
 bcc:	88 1f       	adc	r24, r24
 bce:	91 50       	subi	r25, 0x01	; 1
 bd0:	50 40       	sbci	r21, 0x00	; 0
 bd2:	a9 f7       	brne	.-22     	; 0xbbe <__mulsf3_pse+0x64>
 bd4:	9e 3f       	cpi	r25, 0xFE	; 254
 bd6:	51 05       	cpc	r21, r1
 bd8:	70 f0       	brcs	.+28     	; 0xbf6 <__mulsf3_pse+0x9c>
 bda:	60 cf       	rjmp	.-320    	; 0xa9c <__fp_inf>
 bdc:	aa cf       	rjmp	.-172    	; 0xb32 <__fp_szero>
 bde:	5f 3f       	cpi	r21, 0xFF	; 255
 be0:	ec f3       	brlt	.-6      	; 0xbdc <__mulsf3_pse+0x82>
 be2:	98 3e       	cpi	r25, 0xE8	; 232
 be4:	dc f3       	brlt	.-10     	; 0xbdc <__mulsf3_pse+0x82>
 be6:	86 95       	lsr	r24
 be8:	77 95       	ror	r23
 bea:	67 95       	ror	r22
 bec:	b7 95       	ror	r27
 bee:	f7 95       	ror	r31
 bf0:	e7 95       	ror	r30
 bf2:	9f 5f       	subi	r25, 0xFF	; 255
 bf4:	c1 f7       	brne	.-16     	; 0xbe6 <__mulsf3_pse+0x8c>
 bf6:	fe 2b       	or	r31, r30
 bf8:	88 0f       	add	r24, r24
 bfa:	91 1d       	adc	r25, r1
 bfc:	96 95       	lsr	r25
 bfe:	87 95       	ror	r24
 c00:	97 f9       	bld	r25, 7
 c02:	08 95       	ret

00000c04 <_exit>:
 c04:	f8 94       	cli

00000c06 <__stop_program>:
 c06:	ff cf       	rjmp	.-2      	; 0xc06 <__stop_program>
