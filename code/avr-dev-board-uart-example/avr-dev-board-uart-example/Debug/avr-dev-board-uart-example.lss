
avr-dev-board-uart-example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  000004b0  00000544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000102  00800162  00800162  000005a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000005d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bea  00000000  00000000  0000069e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000436  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042c  00000000  00000000  000016be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00001aec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031a  00000000  00000000  00001cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005d2  00000000  00000000  00001fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000025a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 08 02 	jmp	0x410	; 0x410 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 eb       	ldi	r30, 0xB0	; 176
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 36       	cpi	r26, 0x62	; 98
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 e6       	ldi	r26, 0x62	; 98
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 36       	cpi	r26, 0x64	; 100
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "uart.h"
#include "util.h"

int main(void)
{
	init_uart(UART_9600);	// Inicijalizacija serijske komunikacije
  a6:	83 e3       	ldi	r24, 0x33	; 51
  a8:	0e 94 b7 00 	call	0x16e	; 0x16e <init_uart>

	send_string("Hello World from AVR-dev-board!\n\r");	// Pozdravna poruka
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	91 e0       	ldi	r25, 0x01	; 1
  b0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <send_string>
    
	// Inicijalizacija izlaza
	set_pin_dir(&DDRC, 0, OUTPUT);
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	87 e2       	ldi	r24, 0x27	; 39
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 75 00 	call	0xea	; 0xea <set_pin_dir>
	set_pin_dir(&DDRC, 1, OUTPUT);
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	61 e0       	ldi	r22, 0x01	; 1
  c4:	87 e2       	ldi	r24, 0x27	; 39
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 75 00 	call	0xea	; 0xea <set_pin_dir>
	set_pin_dir(&DDRC, 3, OUTPUT);
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	63 e0       	ldi	r22, 0x03	; 3
  d0:	87 e2       	ldi	r24, 0x27	; 39
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 75 00 	call	0xea	; 0xea <set_pin_dir>

	while(1)
    {
		analyze_uart();		// Analiziranje pristiglih komandi
  d8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <analyze_uart>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	8f e1       	ldi	r24, 0x1F	; 31
  de:	9e e4       	ldi	r25, 0x4E	; 78
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x3a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x40>
  e6:	00 00       	nop
  e8:	f7 cf       	rjmp	.-18     	; 0xd8 <main+0x32>

000000ea <set_pin_dir>:

#include "gpio.h"

void set_pin_dir(volatile uint8_t *target_port, uint8_t pin_no, uint8_t dir)
{
	switch(dir){
  ea:	44 23       	and	r20, r20
  ec:	89 f0       	breq	.+34     	; 0x110 <set_pin_dir+0x26>
  ee:	41 30       	cpi	r20, 0x01	; 1
  f0:	f1 f4       	brne	.+60     	; 0x12e <set_pin_dir+0x44>
	case OUTPUT:
		(*target_port) |= (1 << pin_no);
  f2:	fc 01       	movw	r30, r24
  f4:	40 81       	ld	r20, Z
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	f9 01       	movw	r30, r18
  fc:	02 c0       	rjmp	.+4      	; 0x102 <set_pin_dir+0x18>
  fe:	ee 0f       	add	r30, r30
 100:	ff 1f       	adc	r31, r31
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <set_pin_dir+0x14>
 106:	bf 01       	movw	r22, r30
 108:	64 2b       	or	r22, r20
 10a:	fc 01       	movw	r30, r24
 10c:	60 83       	st	Z, r22
		break;
 10e:	08 95       	ret
	case INPUT:
		(*target_port) &= ~(1 << pin_no);
 110:	fc 01       	movw	r30, r24
 112:	40 81       	ld	r20, Z
 114:	21 e0       	ldi	r18, 0x01	; 1
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	f9 01       	movw	r30, r18
 11a:	02 c0       	rjmp	.+4      	; 0x120 <set_pin_dir+0x36>
 11c:	ee 0f       	add	r30, r30
 11e:	ff 1f       	adc	r31, r31
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <set_pin_dir+0x32>
 124:	bf 01       	movw	r22, r30
 126:	60 95       	com	r22
 128:	64 23       	and	r22, r20
 12a:	fc 01       	movw	r30, r24
 12c:	60 83       	st	Z, r22
 12e:	08 95       	ret

00000130 <set_pin>:
	}
}

void set_pin(volatile uint8_t *target_port, uint8_t pin_no)
{
	(*target_port) |= (1 << pin_no);
 130:	fc 01       	movw	r30, r24
 132:	40 81       	ld	r20, Z
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <set_pin+0x10>
 13c:	ee 0f       	add	r30, r30
 13e:	ff 1f       	adc	r31, r31
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <set_pin+0xc>
 144:	bf 01       	movw	r22, r30
 146:	64 2b       	or	r22, r20
 148:	fc 01       	movw	r30, r24
 14a:	60 83       	st	Z, r22
 14c:	08 95       	ret

0000014e <clear_pin>:
}

void clear_pin(volatile uint8_t *target_port, uint8_t pin_no)
{
	(*target_port) &= ~(1 << pin_no);
 14e:	fc 01       	movw	r30, r24
 150:	40 81       	ld	r20, Z
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	f9 01       	movw	r30, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <clear_pin+0x10>
 15a:	ee 0f       	add	r30, r30
 15c:	ff 1f       	adc	r31, r31
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <clear_pin+0xc>
 162:	bf 01       	movw	r22, r30
 164:	60 95       	com	r22
 166:	64 23       	and	r22, r20
 168:	fc 01       	movw	r30, r24
 16a:	60 83       	st	Z, r22
 16c:	08 95       	ret

0000016e <init_uart>:

/*	Inicijalizacija uarta	*/
void init_uart(uint8_t baud)
{
	// Inicijalizacija promenljivih
	uart0_sent = 0;
 16e:	10 92 64 01 	sts	0x0164, r1
	uart0_received = 0;
 172:	10 92 63 01 	sts	0x0163, r1
	uart0_index = 0;
 176:	10 92 62 01 	sts	0x0162, r1
	uart0_buff[uart0_index] = '\0';
 17a:	e0 91 62 01 	lds	r30, 0x0162
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	eb 59       	subi	r30, 0x9B	; 155
 182:	fe 4f       	sbci	r31, 0xFE	; 254
 184:	10 82       	st	Z, r1

	// Postavljanje smera pinovima
	SBIT(DDRD, 1);
 186:	51 9a       	sbi	0x0a, 1	; 10
	CBIT(DDRD, 0);
 188:	50 98       	cbi	0x0a, 0	; 10

	// Inicijalizacija registara za komunikaciju
	UCSR0B |= (1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0);
 18a:	e1 ec       	ldi	r30, 0xC1	; 193
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	90 81       	ld	r25, Z
 190:	98 69       	ori	r25, 0x98	; 152
 192:	90 83       	st	Z, r25
	UCSR0C |= (1 << UCSZ00 | 1 << UCSZ00);
 194:	e2 ec       	ldi	r30, 0xC2	; 194
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	90 81       	ld	r25, Z
 19a:	92 60       	ori	r25, 0x02	; 2
 19c:	90 83       	st	Z, r25
	UBRR0 = baud;
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 c5 00 	sts	0x00C5, r25
 1a4:	80 93 c4 00 	sts	0x00C4, r24
	
	// Globalna dozvola prekida
	sei();
 1a8:	78 94       	sei
 1aa:	08 95       	ret

000001ac <send_char>:
}

/*	Slanje jednog bajta	*/
void send_char(char c)
{
	uart0_sent = 0;		// Resetovanje promenljive
 1ac:	10 92 64 01 	sts	0x0164, r1
	UDR0 = c;			// Upis bajta u registar
 1b0:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UCSR0A & (1 << UDRE0)));	// Cekanje potvrde da je bajt poslat
 1b4:	e0 ec       	ldi	r30, 0xC0	; 192
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	85 ff       	sbrs	r24, 5
 1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <send_char+0xc>
}
 1be:	08 95       	ret

000001c0 <send_string>:
	send_string((char*) temp_answer);	// Slanje stringa
}

/*	Slanje stringa	*/
void send_string(char *str)
{
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	ec 01       	movw	r28, r24
	while (*str != '\0') {	// Slanje jednog po jednog bajta dok se ne dodje do terminatora (nula)
 1c6:	88 81       	ld	r24, Y
 1c8:	88 23       	and	r24, r24
 1ca:	31 f0       	breq	.+12     	; 0x1d8 <send_string+0x18>
 1cc:	21 96       	adiw	r28, 0x01	; 1
		send_char(*str);
 1ce:	0e 94 d6 00 	call	0x1ac	; 0x1ac <send_char>
}

/*	Slanje stringa	*/
void send_string(char *str)
{
	while (*str != '\0') {	// Slanje jednog po jednog bajta dok se ne dodje do terminatora (nula)
 1d2:	89 91       	ld	r24, Y+
 1d4:	81 11       	cpse	r24, r1
 1d6:	fb cf       	rjmp	.-10     	; 0x1ce <send_string+0xe>
		send_char(*str);
		str++;
	}
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <get_buffer>:

/*	Kopiranje uart bafera	*/
void get_buffer(char *dest, uint8_t size)
{
	int i = 0;
	while(i < size && uart0_buff[i] != '\0') {	// Kopiranje bafera dok se ne dodje do kraja string-a
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	16 16       	cp	r1, r22
 1e2:	17 06       	cpc	r1, r23
 1e4:	c4 f4       	brge	.+48     	; 0x216 <get_buffer+0x38>
 1e6:	20 91 65 01 	lds	r18, 0x0165
 1ea:	22 23       	and	r18, r18
 1ec:	a1 f0       	breq	.+40     	; 0x216 <get_buffer+0x38>
 1ee:	fc 01       	movw	r30, r24
}

/*	Kopiranje uart bafera	*/
void get_buffer(char *dest, uint8_t size)
{
	int i = 0;
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	30 e0       	ldi	r19, 0x00	; 0
	while(i < size && uart0_buff[i] != '\0') {	// Kopiranje bafera dok se ne dodje do kraja string-a
		(*dest) = uart0_buff[i];
 1f4:	d9 01       	movw	r26, r18
 1f6:	ab 59       	subi	r26, 0x9B	; 155
 1f8:	be 4f       	sbci	r27, 0xFE	; 254
 1fa:	8c 91       	ld	r24, X
 1fc:	81 93       	st	Z+, r24
		dest++;
 1fe:	cf 01       	movw	r24, r30
		i++;
 200:	2f 5f       	subi	r18, 0xFF	; 255
 202:	3f 4f       	sbci	r19, 0xFF	; 255

/*	Kopiranje uart bafera	*/
void get_buffer(char *dest, uint8_t size)
{
	int i = 0;
	while(i < size && uart0_buff[i] != '\0') {	// Kopiranje bafera dok se ne dodje do kraja string-a
 204:	26 17       	cp	r18, r22
 206:	37 07       	cpc	r19, r23
 208:	31 f0       	breq	.+12     	; 0x216 <get_buffer+0x38>
 20a:	d9 01       	movw	r26, r18
 20c:	ab 59       	subi	r26, 0x9B	; 155
 20e:	be 4f       	sbci	r27, 0xFE	; 254
 210:	4c 91       	ld	r20, X
 212:	41 11       	cpse	r20, r1
 214:	ef cf       	rjmp	.-34     	; 0x1f4 <get_buffer+0x16>
		(*dest) = uart0_buff[i];
		dest++;
		i++;
	}
	*dest = '\0';	// Zatvaranje stringa terminatorom
 216:	fc 01       	movw	r30, r24
 218:	10 82       	st	Z, r1
 21a:	08 95       	ret

0000021c <clear_buffer>:
}

/*	Ciscenje uart bafera	*/
void clear_buffer(void)
{
	uart0_index = 0;
 21c:	10 92 62 01 	sts	0x0162, r1
	uart0_buff[uart0_index] = '\0';
 220:	e0 91 62 01 	lds	r30, 0x0162
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	eb 59       	subi	r30, 0x9B	; 155
 228:	fe 4f       	sbci	r31, 0xFE	; 254
 22a:	10 82       	st	Z, r1
 22c:	08 95       	ret

0000022e <interpret_uart>:
}

/*	Obrada pristigle komande	*/
/*	Napomena: ovde uneti korisnicki kod	*/
void interpret_uart(char *temp)
{
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	cd b7       	in	r28, 0x3d	; 61
 234:	de b7       	in	r29, 0x3e	; 62
 236:	2f 97       	sbiw	r28, 0x0f	; 15
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	f8 94       	cli
 23c:	de bf       	out	0x3e, r29	; 62
 23e:	0f be       	out	0x3f, r0	; 63
 240:	cd bf       	out	0x3d, r28	; 61
	char arg[10];
	char val[5];
	uint8_t i;
	
	i = 0;
	while (*temp != '=') {
 242:	fc 01       	movw	r30, r24
 244:	20 81       	ld	r18, Z
 246:	2d 33       	cpi	r18, 0x3D	; 61
 248:	79 f0       	breq	.+30     	; 0x268 <interpret_uart+0x3a>
 24a:	31 96       	adiw	r30, 0x01	; 1
{
	char arg[10];
	char val[5];
	uint8_t i;
	
	i = 0;
 24c:	30 e0       	ldi	r19, 0x00	; 0
	while (*temp != '=') {
		arg[i] = *temp;
 24e:	a1 e0       	ldi	r26, 0x01	; 1
 250:	b0 e0       	ldi	r27, 0x00	; 0
 252:	ac 0f       	add	r26, r28
 254:	bd 1f       	adc	r27, r29
 256:	a3 0f       	add	r26, r19
 258:	b1 1d       	adc	r27, r1
 25a:	2c 93       	st	X, r18
		i++;
 25c:	3f 5f       	subi	r19, 0xFF	; 255
		temp++;
 25e:	cf 01       	movw	r24, r30
	char arg[10];
	char val[5];
	uint8_t i;
	
	i = 0;
	while (*temp != '=') {
 260:	21 91       	ld	r18, Z+
 262:	2d 33       	cpi	r18, 0x3D	; 61
 264:	a1 f7       	brne	.-24     	; 0x24e <interpret_uart+0x20>
 266:	01 c0       	rjmp	.+2      	; 0x26a <interpret_uart+0x3c>
{
	char arg[10];
	char val[5];
	uint8_t i;
	
	i = 0;
 268:	30 e0       	ldi	r19, 0x00	; 0
	while (*temp != '=') {
		arg[i] = *temp;
		i++;
		temp++;
	}
	arg[i] = '\0';
 26a:	fe 01       	movw	r30, r28
 26c:	e3 0f       	add	r30, r19
 26e:	f1 1d       	adc	r31, r1
 270:	11 82       	std	Z+1, r1	; 0x01
	
	temp++;
	i = 0;
	while (*temp != '\r') {
 272:	fc 01       	movw	r30, r24
 274:	21 81       	ldd	r18, Z+1	; 0x01
 276:	2d 30       	cpi	r18, 0x0D	; 13
 278:	71 f0       	breq	.+28     	; 0x296 <interpret_uart+0x68>
 27a:	32 96       	adiw	r30, 0x02	; 2
		temp++;
	}
	arg[i] = '\0';
	
	temp++;
	i = 0;
 27c:	80 e0       	ldi	r24, 0x00	; 0
	while (*temp != '\r') {
		val[i] = *temp;
 27e:	ab e0       	ldi	r26, 0x0B	; 11
 280:	b0 e0       	ldi	r27, 0x00	; 0
 282:	ac 0f       	add	r26, r28
 284:	bd 1f       	adc	r27, r29
 286:	a8 0f       	add	r26, r24
 288:	b1 1d       	adc	r27, r1
 28a:	2c 93       	st	X, r18
		i++;
 28c:	8f 5f       	subi	r24, 0xFF	; 255
	}
	arg[i] = '\0';
	
	temp++;
	i = 0;
	while (*temp != '\r') {
 28e:	21 91       	ld	r18, Z+
 290:	2d 30       	cpi	r18, 0x0D	; 13
 292:	a9 f7       	brne	.-22     	; 0x27e <interpret_uart+0x50>
 294:	01 c0       	rjmp	.+2      	; 0x298 <interpret_uart+0x6a>
		temp++;
	}
	arg[i] = '\0';
	
	temp++;
	i = 0;
 296:	80 e0       	ldi	r24, 0x00	; 0
	while (*temp != '\r') {
		val[i] = *temp;
		i++;
		temp++;
	}
	val[i] = '\0';
 298:	fe 01       	movw	r30, r28
 29a:	e8 0f       	add	r30, r24
 29c:	f1 1d       	adc	r31, r1
 29e:	13 86       	std	Z+11, r1	; 0x0b
	
	if (!strcmp(arg, "AT&D")) {
 2a0:	62 e2       	ldi	r22, 0x22	; 34
 2a2:	71 e0       	ldi	r23, 0x01	; 1
 2a4:	ce 01       	movw	r24, r28
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	0e 94 4d 02 	call	0x49a	; 0x49a <strcmp>
 2ac:	89 2b       	or	r24, r25
 2ae:	09 f0       	breq	.+2      	; 0x2b2 <interpret_uart+0x84>
 2b0:	7d c0       	rjmp	.+250    	; 0x3ac <interpret_uart+0x17e>
		if (!strcmp(val, "1")) {
 2b2:	67 e2       	ldi	r22, 0x27	; 39
 2b4:	71 e0       	ldi	r23, 0x01	; 1
 2b6:	ce 01       	movw	r24, r28
 2b8:	0b 96       	adiw	r24, 0x0b	; 11
 2ba:	0e 94 4d 02 	call	0x49a	; 0x49a <strcmp>
 2be:	89 2b       	or	r24, r25
 2c0:	81 f4       	brne	.+32     	; 0x2e2 <interpret_uart+0xb4>
			set_pin(&PORTC, 0);
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	88 e2       	ldi	r24, 0x28	; 40
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 98 00 	call	0x130	; 0x130 <set_pin>
			clear_pin(&PORTC, 1);
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	88 e2       	ldi	r24, 0x28	; 40
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 a7 00 	call	0x14e	; 0x14e <clear_pin>
			clear_pin(&PORTC, 3);
 2d6:	63 e0       	ldi	r22, 0x03	; 3
 2d8:	88 e2       	ldi	r24, 0x28	; 40
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 a7 00 	call	0x14e	; 0x14e <clear_pin>
 2e0:	69 c0       	rjmp	.+210    	; 0x3b4 <interpret_uart+0x186>
		} else if (!strcmp(val, "2")) {
 2e2:	69 e2       	ldi	r22, 0x29	; 41
 2e4:	71 e0       	ldi	r23, 0x01	; 1
 2e6:	ce 01       	movw	r24, r28
 2e8:	0b 96       	adiw	r24, 0x0b	; 11
 2ea:	0e 94 4d 02 	call	0x49a	; 0x49a <strcmp>
 2ee:	89 2b       	or	r24, r25
 2f0:	81 f4       	brne	.+32     	; 0x312 <interpret_uart+0xe4>
			clear_pin(&PORTC, 0);
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	88 e2       	ldi	r24, 0x28	; 40
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 a7 00 	call	0x14e	; 0x14e <clear_pin>
			set_pin(&PORTC, 1);
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	88 e2       	ldi	r24, 0x28	; 40
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 98 00 	call	0x130	; 0x130 <set_pin>
			clear_pin(&PORTC, 3);
 306:	63 e0       	ldi	r22, 0x03	; 3
 308:	88 e2       	ldi	r24, 0x28	; 40
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 a7 00 	call	0x14e	; 0x14e <clear_pin>
 310:	51 c0       	rjmp	.+162    	; 0x3b4 <interpret_uart+0x186>
		} else if (!strcmp(val, "3")) {
 312:	6b e2       	ldi	r22, 0x2B	; 43
 314:	71 e0       	ldi	r23, 0x01	; 1
 316:	ce 01       	movw	r24, r28
 318:	0b 96       	adiw	r24, 0x0b	; 11
 31a:	0e 94 4d 02 	call	0x49a	; 0x49a <strcmp>
 31e:	89 2b       	or	r24, r25
 320:	81 f4       	brne	.+32     	; 0x342 <interpret_uart+0x114>
			clear_pin(&PORTC, 0);
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	88 e2       	ldi	r24, 0x28	; 40
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 a7 00 	call	0x14e	; 0x14e <clear_pin>
			clear_pin(&PORTC, 1);
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	88 e2       	ldi	r24, 0x28	; 40
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 a7 00 	call	0x14e	; 0x14e <clear_pin>
			set_pin(&PORTC, 3);			
 336:	63 e0       	ldi	r22, 0x03	; 3
 338:	88 e2       	ldi	r24, 0x28	; 40
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 98 00 	call	0x130	; 0x130 <set_pin>
 340:	39 c0       	rjmp	.+114    	; 0x3b4 <interpret_uart+0x186>
		} else if (!strcmp(val, "ALL")) {
 342:	6d e2       	ldi	r22, 0x2D	; 45
 344:	71 e0       	ldi	r23, 0x01	; 1
 346:	ce 01       	movw	r24, r28
 348:	0b 96       	adiw	r24, 0x0b	; 11
 34a:	0e 94 4d 02 	call	0x49a	; 0x49a <strcmp>
 34e:	89 2b       	or	r24, r25
 350:	81 f4       	brne	.+32     	; 0x372 <interpret_uart+0x144>
			set_pin(&PORTC, 0);
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	88 e2       	ldi	r24, 0x28	; 40
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 98 00 	call	0x130	; 0x130 <set_pin>
			set_pin(&PORTC, 1);
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	88 e2       	ldi	r24, 0x28	; 40
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 98 00 	call	0x130	; 0x130 <set_pin>
			set_pin(&PORTC, 3);
 366:	63 e0       	ldi	r22, 0x03	; 3
 368:	88 e2       	ldi	r24, 0x28	; 40
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 98 00 	call	0x130	; 0x130 <set_pin>
 370:	21 c0       	rjmp	.+66     	; 0x3b4 <interpret_uart+0x186>
		} else if (!strcmp(val, "0")) {
 372:	61 e3       	ldi	r22, 0x31	; 49
 374:	71 e0       	ldi	r23, 0x01	; 1
 376:	ce 01       	movw	r24, r28
 378:	0b 96       	adiw	r24, 0x0b	; 11
 37a:	0e 94 4d 02 	call	0x49a	; 0x49a <strcmp>
 37e:	89 2b       	or	r24, r25
 380:	81 f4       	brne	.+32     	; 0x3a2 <interpret_uart+0x174>
			clear_pin(&PORTC, 0);
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	88 e2       	ldi	r24, 0x28	; 40
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 a7 00 	call	0x14e	; 0x14e <clear_pin>
			clear_pin(&PORTC, 1);
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	88 e2       	ldi	r24, 0x28	; 40
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 a7 00 	call	0x14e	; 0x14e <clear_pin>
			clear_pin(&PORTC, 3);
 396:	63 e0       	ldi	r22, 0x03	; 3
 398:	88 e2       	ldi	r24, 0x28	; 40
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 a7 00 	call	0x14e	; 0x14e <clear_pin>
 3a0:	09 c0       	rjmp	.+18     	; 0x3b4 <interpret_uart+0x186>
		} else {
			send_string("Neispravan parametar\n");		
 3a2:	83 e3       	ldi	r24, 0x33	; 51
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <send_string>
 3aa:	04 c0       	rjmp	.+8      	; 0x3b4 <interpret_uart+0x186>
		}
	}  else {
		send_string("Komanda nije pronadjena\n");
 3ac:	89 e4       	ldi	r24, 0x49	; 73
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <send_string>
	}
}
 3b4:	2f 96       	adiw	r28, 0x0f	; 15
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	f8 94       	cli
 3ba:	de bf       	out	0x3e, r29	; 62
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	cd bf       	out	0x3d, r28	; 61
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <analyze_uart>:
	uart0_buff[uart0_index] = '\0';
}

/*	Ciscenje uart bafera	*/
void analyze_uart(void)
{
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	da 95       	dec	r29
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	f8 94       	cli
 3d4:	de bf       	out	0x3e, r29	; 62
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	cd bf       	out	0x3d, r28	; 61
	if (uart0_received) {
 3da:	80 91 63 01 	lds	r24, 0x0163
 3de:	88 23       	and	r24, r24
 3e0:	71 f0       	breq	.+28     	; 0x3fe <analyze_uart+0x38>
		char temp[256];

		uart0_received = 0;
 3e2:	10 92 63 01 	sts	0x0163, r1
		get_buffer(temp, uart0_index);
 3e6:	60 91 62 01 	lds	r22, 0x0162
 3ea:	ce 01       	movw	r24, r28
 3ec:	01 96       	adiw	r24, 0x01	; 1
 3ee:	0e 94 ef 00 	call	0x1de	; 0x1de <get_buffer>
		interpret_uart(temp);	//Korisnicka funkcija u kojoj se vrsi obrada dobijene komande
 3f2:	ce 01       	movw	r24, r28
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	0e 94 17 01 	call	0x22e	; 0x22e <interpret_uart>
		clear_buffer();
 3fa:	0e 94 0e 01 	call	0x21c	; 0x21c <clear_buffer>
	}
}
 3fe:	d3 95       	inc	r29
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	f8 94       	cli
 404:	de bf       	out	0x3e, r29	; 62
 406:	0f be       	out	0x3f, r0	; 63
 408:	cd bf       	out	0x3d, r28	; 61
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <__vector_18>:
//	uart0_sent = 1;
//}

/*	Prekidna rutina za obradu primljenog bajta	*/
ISR(USART_RX_vect)
{
 410:	1f 92       	push	r1
 412:	0f 92       	push	r0
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	0f 92       	push	r0
 418:	11 24       	eor	r1, r1
 41a:	2f 93       	push	r18
 41c:	3f 93       	push	r19
 41e:	4f 93       	push	r20
 420:	5f 93       	push	r21
 422:	6f 93       	push	r22
 424:	7f 93       	push	r23
 426:	8f 93       	push	r24
 428:	9f 93       	push	r25
 42a:	af 93       	push	r26
 42c:	bf 93       	push	r27
 42e:	ef 93       	push	r30
 430:	ff 93       	push	r31
	char temp;

	temp = UDR0;
 432:	80 91 c6 00 	lds	r24, 0x00C6
	if (uart0_index < (UART0_SIZE - 2)) {
 436:	90 91 62 01 	lds	r25, 0x0162
 43a:	9d 3f       	cpi	r25, 0xFD	; 253
 43c:	d8 f4       	brcc	.+54     	; 0x474 <__vector_18+0x64>
		/* There is room for more characters. */
		uart0_buff[uart0_index] = temp;
 43e:	e0 91 62 01 	lds	r30, 0x0162
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	eb 59       	subi	r30, 0x9B	; 155
 446:	fe 4f       	sbci	r31, 0xFE	; 254
 448:	80 83       	st	Z, r24
		uart0_buff[uart0_index + 1] = '\0';
 44a:	e0 91 62 01 	lds	r30, 0x0162
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	ea 59       	subi	r30, 0x9A	; 154
 452:	fe 4f       	sbci	r31, 0xFE	; 254
 454:	10 82       	st	Z, r1
		uart0_index++;
 456:	90 91 62 01 	lds	r25, 0x0162
 45a:	9f 5f       	subi	r25, 0xFF	; 255
 45c:	90 93 62 01 	sts	0x0162, r25
		if (temp == '\0' || temp == '\n' || temp == '\r') {	// Ovi znakovi oznacavaju kraj string-a
 460:	88 23       	and	r24, r24
 462:	21 f0       	breq	.+8      	; 0x46c <__vector_18+0x5c>
 464:	8a 30       	cpi	r24, 0x0A	; 10
 466:	11 f0       	breq	.+4      	; 0x46c <__vector_18+0x5c>
 468:	8d 30       	cpi	r24, 0x0D	; 13
 46a:	31 f4       	brne	.+12     	; 0x478 <__vector_18+0x68>
			uart0_received = 1;	// Stigao je podatak -> setuj fleg za interpretaciju
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	80 93 63 01 	sts	0x0163, r24
 472:	02 c0       	rjmp	.+4      	; 0x478 <__vector_18+0x68>
		}
	} else {
		clear_buffer();	// Ciscenje bafera ako je prepunjen
 474:	0e 94 0e 01 	call	0x21c	; 0x21c <clear_buffer>
	}
}
 478:	ff 91       	pop	r31
 47a:	ef 91       	pop	r30
 47c:	bf 91       	pop	r27
 47e:	af 91       	pop	r26
 480:	9f 91       	pop	r25
 482:	8f 91       	pop	r24
 484:	7f 91       	pop	r23
 486:	6f 91       	pop	r22
 488:	5f 91       	pop	r21
 48a:	4f 91       	pop	r20
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0
 496:	1f 90       	pop	r1
 498:	18 95       	reti

0000049a <strcmp>:
 49a:	fb 01       	movw	r30, r22
 49c:	dc 01       	movw	r26, r24
 49e:	8d 91       	ld	r24, X+
 4a0:	01 90       	ld	r0, Z+
 4a2:	80 19       	sub	r24, r0
 4a4:	01 10       	cpse	r0, r1
 4a6:	d9 f3       	breq	.-10     	; 0x49e <strcmp+0x4>
 4a8:	99 0b       	sbc	r25, r25
 4aa:	08 95       	ret

000004ac <_exit>:
 4ac:	f8 94       	cli

000004ae <__stop_program>:
 4ae:	ff cf       	rjmp	.-2      	; 0x4ae <__stop_program>
