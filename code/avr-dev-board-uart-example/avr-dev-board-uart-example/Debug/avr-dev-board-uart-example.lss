
avr-dev-board-uart-example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000a52  00000ae6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000102  0080012a  0080012a  00000b10  2**0
                  ALLOC
  3 .stab         00000ff0  00000000  00000000  00000b10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000341  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00001e48  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001032  00000000  00000000  00001fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000617  00000000  00000000  00002ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b84  00000000  00000000  00003611  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00004198  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a8  00000000  00000000  000043e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009fb  00000000  00000000  00004790  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000518b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 32       	cpi	r26, 0x2C	; 44
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "uart.h"
#include "util.h"

int main(void)
{
	init_uart(UART_9600);	// Inicijalizacija serijske komunikacije
  a6:	83 e3       	ldi	r24, 0x33	; 51
  a8:	0e 94 63 00 	call	0xc6	; 0xc6 <init_uart>

	send_string("Hello World from AVR-dev-board!\n\r");	// Pozdravna poruka
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	91 e0       	ldi	r25, 0x01	; 1
  b0:	0e 94 8d 00 	call	0x11a	; 0x11a <send_string>
    
	while(1)
    {
		analyze_uart();		// Analiziranje pristiglih komandi
  b4:	0e 94 06 01 	call	0x20c	; 0x20c <analyze_uart>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	8f e1       	ldi	r24, 0x1F	; 31
  ba:	9e e4       	ldi	r25, 0x4E	; 78
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x16>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x1c>
  c2:	00 00       	nop
  c4:	f7 cf       	rjmp	.-18     	; 0xb4 <main+0xe>

000000c6 <init_uart>:

/*	Inicijalizacija uarta	*/
void init_uart(uint8_t baud)
{
	// Inicijalizacija promenljivih
	uart0_sent = 0;
  c6:	10 92 2c 01 	sts	0x012C, r1
	uart0_received = 0;
  ca:	10 92 2b 01 	sts	0x012B, r1
	uart0_index = 0;
  ce:	10 92 2a 01 	sts	0x012A, r1
	uart0_buff[uart0_index] = '\0';
  d2:	90 91 2a 01 	lds	r25, 0x012A
  d6:	ed e2       	ldi	r30, 0x2D	; 45
  d8:	f1 e0       	ldi	r31, 0x01	; 1
  da:	e9 0f       	add	r30, r25
  dc:	f1 1d       	adc	r31, r1
  de:	10 82       	st	Z, r1

	// Postavljanje smera pinovima
	SBIT(DDRD, 1);
  e0:	51 9a       	sbi	0x0a, 1	; 10
	CBIT(DDRD, 0);
  e2:	50 98       	cbi	0x0a, 0	; 10

	// Inicijalizacija registara za komunikaciju
	UCSR0B |= (1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0);
  e4:	e1 ec       	ldi	r30, 0xC1	; 193
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	90 81       	ld	r25, Z
  ea:	98 69       	ori	r25, 0x98	; 152
  ec:	90 83       	st	Z, r25
	UCSR0C |= (1 << UCSZ00 | 1 << UCSZ00);
  ee:	e2 ec       	ldi	r30, 0xC2	; 194
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	90 81       	ld	r25, Z
  f4:	92 60       	ori	r25, 0x02	; 2
  f6:	90 83       	st	Z, r25
	UBRR0 = baud;
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	90 93 c5 00 	sts	0x00C5, r25
  fe:	80 93 c4 00 	sts	0x00C4, r24
	
	// Globalna dozvola prekida
	sei();
 102:	78 94       	sei
}
 104:	08 95       	ret

00000106 <send_char>:

/*	Slanje jednog bajta	*/
void send_char(char c)
{
	uart0_sent = 0;		// Resetovanje promenljive
 106:	10 92 2c 01 	sts	0x012C, r1
	UDR0 = c;			// Upis bajta u registar
 10a:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UCSR0A & (1 << UDRE0)));	// Cekanje potvrde da je bajt poslat
 10e:	e0 ec       	ldi	r30, 0xC0	; 192
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	85 ff       	sbrs	r24, 5
 116:	fd cf       	rjmp	.-6      	; 0x112 <send_char+0xc>
}
 118:	08 95       	ret

0000011a <send_string>:
	send_string((char*) temp_answer);	// Slanje stringa
}

/*	Slanje stringa	*/
void send_string(char *str)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	ec 01       	movw	r28, r24
	while (*str != '\0') {	// Slanje jednog po jednog bajta dok se ne dodje do terminatora (nula)
 120:	88 81       	ld	r24, Y
 122:	88 23       	and	r24, r24
 124:	31 f0       	breq	.+12     	; 0x132 <send_string+0x18>

	send_string((char*) temp_answer);	// Slanje stringa
}

/*	Slanje stringa	*/
void send_string(char *str)
 126:	21 96       	adiw	r28, 0x01	; 1
{
	while (*str != '\0') {	// Slanje jednog po jednog bajta dok se ne dodje do terminatora (nula)
		send_char(*str);
 128:	0e 94 83 00 	call	0x106	; 0x106 <send_char>
}

/*	Slanje stringa	*/
void send_string(char *str)
{
	while (*str != '\0') {	// Slanje jednog po jednog bajta dok se ne dodje do terminatora (nula)
 12c:	89 91       	ld	r24, Y+
 12e:	88 23       	and	r24, r24
 130:	d9 f7       	brne	.-10     	; 0x128 <send_string+0xe>
		send_char(*str);
		str++;
	}
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <send_one_char>:
	while (!(UCSR0A & (1 << UDRE0)));	// Cekanje potvrde da je bajt poslat
}

/*	Slanje broja velicine 1 bajt	*/
void send_one_char(char a)
{
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	28 97       	sbiw	r28, 0x08	; 8
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61
	char temp_answer [4];	// Cuva string koji ce biti poslat
	char temp_str[4];		// Cuva string koji oznacava vrednost bajta
	
	temp_answer[0] = '\0';	// Inicijalizacija
 150:	19 82       	std	Y+1, r1	; 0x01
	
	itoa(a, temp_str, 10);	// Pretvaranje iz broja u string
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	be 01       	movw	r22, r28
 156:	6b 5f       	subi	r22, 0xFB	; 251
 158:	7f 4f       	sbci	r23, 0xFF	; 255
 15a:	4a e0       	ldi	r20, 0x0A	; 10
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <itoa>
	strcat(temp_answer, temp_str);	// Kopiranje broja (string-a)
 162:	8e 01       	movw	r16, r28
 164:	0f 5f       	subi	r16, 0xFF	; 255
 166:	1f 4f       	sbci	r17, 0xFF	; 255
 168:	c8 01       	movw	r24, r16
 16a:	be 01       	movw	r22, r28
 16c:	6b 5f       	subi	r22, 0xFB	; 251
 16e:	7f 4f       	sbci	r23, 0xFF	; 255
 170:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <strcat>
	strcat(temp_answer, "\r\n");	// Finisiranje stringa
 174:	d8 01       	movw	r26, r16
 176:	0d 90       	ld	r0, X+
 178:	00 20       	and	r0, r0
 17a:	e9 f7       	brne	.-6      	; 0x176 <send_one_char+0x3e>
 17c:	11 97       	sbiw	r26, 0x01	; 1
 17e:	e2 e2       	ldi	r30, 0x22	; 34
 180:	f1 e0       	ldi	r31, 0x01	; 1
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	01 90       	ld	r0, Z+
 186:	0d 92       	st	X+, r0
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	e1 f7       	brne	.-8      	; 0x184 <send_one_char+0x4c>

	send_string((char*) temp_answer);	// Slanje stringa
 18c:	ce 01       	movw	r24, r28
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	0e 94 8d 00 	call	0x11a	; 0x11a <send_string>
}
 194:	28 96       	adiw	r28, 0x08	; 8
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	f8 94       	cli
 19a:	de bf       	out	0x3e, r29	; 62
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	cd bf       	out	0x3d, r28	; 61
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	08 95       	ret

000001aa <get_buffer>:
	}
}

/*	Kopiranje uart bafera	*/
void get_buffer(char *dest, uint8_t size)
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	ec 01       	movw	r28, r24
	int i = 0;
	while(i < size && uart0_buff[i] != '\0') {	// Kopiranje bafera dok se ne dodje do kraja string-a
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	16 16       	cp	r1, r22
 1b4:	17 06       	cpc	r1, r23
 1b6:	cc f4       	brge	.+50     	; 0x1ea <get_buffer+0x40>
 1b8:	80 91 2d 01 	lds	r24, 0x012D
 1bc:	88 23       	and	r24, r24
 1be:	a9 f0       	breq	.+42     	; 0x1ea <get_buffer+0x40>
 1c0:	de 01       	movw	r26, r28
}

/*	Kopiranje uart bafera	*/
void get_buffer(char *dest, uint8_t size)
{
	int i = 0;
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
	while(i < size && uart0_buff[i] != '\0') {	// Kopiranje bafera dok se ne dodje do kraja string-a
		(*dest) = uart0_buff[i];
 1c6:	2d e2       	ldi	r18, 0x2D	; 45
 1c8:	31 e0       	ldi	r19, 0x01	; 1
 1ca:	f9 01       	movw	r30, r18
 1cc:	e8 0f       	add	r30, r24
 1ce:	f9 1f       	adc	r31, r25
 1d0:	40 81       	ld	r20, Z
 1d2:	4d 93       	st	X+, r20
		dest++;
 1d4:	ed 01       	movw	r28, r26
		i++;
 1d6:	01 96       	adiw	r24, 0x01	; 1

/*	Kopiranje uart bafera	*/
void get_buffer(char *dest, uint8_t size)
{
	int i = 0;
	while(i < size && uart0_buff[i] != '\0') {	// Kopiranje bafera dok se ne dodje do kraja string-a
 1d8:	86 17       	cp	r24, r22
 1da:	97 07       	cpc	r25, r23
 1dc:	31 f0       	breq	.+12     	; 0x1ea <get_buffer+0x40>
 1de:	f9 01       	movw	r30, r18
 1e0:	e8 0f       	add	r30, r24
 1e2:	f9 1f       	adc	r31, r25
 1e4:	40 81       	ld	r20, Z
 1e6:	44 23       	and	r20, r20
 1e8:	81 f7       	brne	.-32     	; 0x1ca <get_buffer+0x20>
		(*dest) = uart0_buff[i];
		dest++;
		i++;
	}
	*dest = '\0';	// Zatvaranje stringa terminatorom
 1ea:	18 82       	st	Y, r1
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <clear_buffer>:

/*	Ciscenje uart bafera	*/
void clear_buffer(void)
{
	uart0_index = 0;
 1f2:	10 92 2a 01 	sts	0x012A, r1
	uart0_buff[uart0_index] = '\0';
 1f6:	80 91 2a 01 	lds	r24, 0x012A
 1fa:	ed e2       	ldi	r30, 0x2D	; 45
 1fc:	f1 e0       	ldi	r31, 0x01	; 1
 1fe:	e8 0f       	add	r30, r24
 200:	f1 1d       	adc	r31, r1
 202:	10 82       	st	Z, r1
}
 204:	08 95       	ret

00000206 <interpret_uart>:

/*	Obrada pristigle komande	*/
/*	Napomena: ovde uneti korisnicki kod	*/
void interpret_uart(char *temp)
{
	send_string(temp);	// Echo - vracanje dobijene komande nazad
 206:	0e 94 8d 00 	call	0x11a	; 0x11a <send_string>
}
 20a:	08 95       	ret

0000020c <analyze_uart>:
	uart0_buff[uart0_index] = '\0';
}

/*	Ciscenje uart bafera	*/
void analyze_uart(void)
{
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
 214:	c0 50       	subi	r28, 0x00	; 0
 216:	d1 40       	sbci	r29, 0x01	; 1
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	f8 94       	cli
 21c:	de bf       	out	0x3e, r29	; 62
 21e:	0f be       	out	0x3f, r0	; 63
 220:	cd bf       	out	0x3d, r28	; 61
	if (uart0_received) {
 222:	80 91 2b 01 	lds	r24, 0x012B
 226:	88 23       	and	r24, r24
 228:	71 f0       	breq	.+28     	; 0x246 <analyze_uart+0x3a>
		char temp[256];

		uart0_received = 0;
 22a:	10 92 2b 01 	sts	0x012B, r1
		get_buffer(temp, uart0_index);
 22e:	60 91 2a 01 	lds	r22, 0x012A
 232:	ce 01       	movw	r24, r28
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	0e 94 d5 00 	call	0x1aa	; 0x1aa <get_buffer>
		interpret_uart(temp);	//Korisnicka funkcija u kojoj se vrsi obrada dobijene komande
 23a:	ce 01       	movw	r24, r28
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	0e 94 03 01 	call	0x206	; 0x206 <interpret_uart>
		clear_buffer();
 242:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <clear_buffer>
	}
}
 246:	c0 50       	subi	r28, 0x00	; 0
 248:	df 4f       	sbci	r29, 0xFF	; 255
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	f8 94       	cli
 24e:	de bf       	out	0x3e, r29	; 62
 250:	0f be       	out	0x3f, r0	; 63
 252:	cd bf       	out	0x3d, r28	; 61
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <__vector_18>:
//	uart0_sent = 1;
//}

/*	Prekidna rutina za obradu primljenog bajta	*/
ISR(USART_RX_vect)
{
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	2f 93       	push	r18
 266:	3f 93       	push	r19
 268:	4f 93       	push	r20
 26a:	5f 93       	push	r21
 26c:	6f 93       	push	r22
 26e:	7f 93       	push	r23
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
 274:	af 93       	push	r26
 276:	bf 93       	push	r27
 278:	ef 93       	push	r30
 27a:	ff 93       	push	r31
	char temp;

	temp = UDR0;
 27c:	40 91 c6 00 	lds	r20, 0x00C6
	if (uart0_index < (UART0_SIZE - 2)) {
 280:	80 91 2a 01 	lds	r24, 0x012A
 284:	8d 3f       	cpi	r24, 0xFD	; 253
 286:	00 f5       	brcc	.+64     	; 0x2c8 <__vector_18+0x6e>
		/* There is room for more characters. */
		uart0_buff[uart0_index] = temp;
 288:	20 91 2a 01 	lds	r18, 0x012A
 28c:	8d e2       	ldi	r24, 0x2D	; 45
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	fc 01       	movw	r30, r24
 292:	e2 0f       	add	r30, r18
 294:	f1 1d       	adc	r31, r1
 296:	40 83       	st	Z, r20
		uart0_buff[uart0_index + 1] = '\0';
 298:	20 91 2a 01 	lds	r18, 0x012A
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	2f 5f       	subi	r18, 0xFF	; 255
 2a0:	3f 4f       	sbci	r19, 0xFF	; 255
 2a2:	82 0f       	add	r24, r18
 2a4:	93 1f       	adc	r25, r19
 2a6:	fc 01       	movw	r30, r24
 2a8:	10 82       	st	Z, r1
		uart0_index++;
 2aa:	80 91 2a 01 	lds	r24, 0x012A
 2ae:	8f 5f       	subi	r24, 0xFF	; 255
 2b0:	80 93 2a 01 	sts	0x012A, r24
		if (temp == '\0' || temp == '\n' || temp == '\r') {	// Ovi znakovi oznacavaju kraj string-a
 2b4:	44 23       	and	r20, r20
 2b6:	21 f0       	breq	.+8      	; 0x2c0 <__vector_18+0x66>
 2b8:	4a 30       	cpi	r20, 0x0A	; 10
 2ba:	11 f0       	breq	.+4      	; 0x2c0 <__vector_18+0x66>
 2bc:	4d 30       	cpi	r20, 0x0D	; 13
 2be:	31 f4       	brne	.+12     	; 0x2cc <__vector_18+0x72>
			uart0_received = 1;	// Stigao je podatak -> setuj fleg za interpretaciju
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	80 93 2b 01 	sts	0x012B, r24
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <__vector_18+0x72>
		}
	} else {
		clear_buffer();	// Ciscenje bafera ako je prepunjen
 2c8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <clear_buffer>
	}
}
 2cc:	ff 91       	pop	r31
 2ce:	ef 91       	pop	r30
 2d0:	bf 91       	pop	r27
 2d2:	af 91       	pop	r26
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	7f 91       	pop	r23
 2da:	6f 91       	pop	r22
 2dc:	5f 91       	pop	r21
 2de:	4f 91       	pop	r20
 2e0:	3f 91       	pop	r19
 2e2:	2f 91       	pop	r18
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <ulongtoa>:
#include <assert.h>
#include <stdio.h>
#include "util.h"

void ulongtoa(char *dest, unsigned long val)
{
 2ee:	cf 92       	push	r12
 2f0:	df 92       	push	r13
 2f2:	ef 92       	push	r14
 2f4:	ff 92       	push	r15
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	8c 01       	movw	r16, r24
 300:	6a 01       	movw	r12, r20
 302:	7b 01       	movw	r14, r22
	const int n = snprintf(0, 0, "%lu", val);
 304:	2d b7       	in	r18, 0x3d	; 61
 306:	3e b7       	in	r19, 0x3e	; 62
 308:	2a 50       	subi	r18, 0x0A	; 10
 30a:	30 40       	sbci	r19, 0x00	; 0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	f8 94       	cli
 310:	3e bf       	out	0x3e, r19	; 62
 312:	0f be       	out	0x3f, r0	; 63
 314:	2d bf       	out	0x3d, r18	; 61
 316:	ed b7       	in	r30, 0x3d	; 61
 318:	fe b7       	in	r31, 0x3e	; 62
 31a:	31 96       	adiw	r30, 0x01	; 1
 31c:	ad b7       	in	r26, 0x3d	; 61
 31e:	be b7       	in	r27, 0x3e	; 62
 320:	12 96       	adiw	r26, 0x02	; 2
 322:	1c 92       	st	X, r1
 324:	1e 92       	st	-X, r1
 326:	11 97       	sbiw	r26, 0x01	; 1
 328:	13 82       	std	Z+3, r1	; 0x03
 32a:	12 82       	std	Z+2, r1	; 0x02
 32c:	85 e2       	ldi	r24, 0x25	; 37
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	95 83       	std	Z+5, r25	; 0x05
 332:	84 83       	std	Z+4, r24	; 0x04
 334:	46 83       	std	Z+6, r20	; 0x06
 336:	57 83       	std	Z+7, r21	; 0x07
 338:	60 87       	std	Z+8, r22	; 0x08
 33a:	71 87       	std	Z+9, r23	; 0x09
 33c:	0e 94 1e 02 	call	0x43c	; 0x43c <snprintf>
 340:	ec 01       	movw	r28, r24
	assert(n > 0);
 342:	2d b7       	in	r18, 0x3d	; 61
 344:	3e b7       	in	r19, 0x3e	; 62
 346:	26 5f       	subi	r18, 0xF6	; 246
 348:	3f 4f       	sbci	r19, 0xFF	; 255
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	f8 94       	cli
 34e:	3e bf       	out	0x3e, r19	; 62
 350:	0f be       	out	0x3f, r0	; 63
 352:	2d bf       	out	0x3d, r18	; 61
 354:	18 16       	cp	r1, r24
 356:	19 06       	cpc	r1, r25
 358:	14 f0       	brlt	.+4      	; 0x35e <ulongtoa+0x70>
 35a:	0e 94 ed 01 	call	0x3da	; 0x3da <abort>
	int c = snprintf(dest, n+1, "%lu", val);
 35e:	8d b7       	in	r24, 0x3d	; 61
 360:	9e b7       	in	r25, 0x3e	; 62
 362:	0a 97       	sbiw	r24, 0x0a	; 10
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	f8 94       	cli
 368:	9e bf       	out	0x3e, r25	; 62
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	8d bf       	out	0x3d, r24	; 61
 36e:	ed b7       	in	r30, 0x3d	; 61
 370:	fe b7       	in	r31, 0x3e	; 62
 372:	31 96       	adiw	r30, 0x01	; 1
 374:	ad b7       	in	r26, 0x3d	; 61
 376:	be b7       	in	r27, 0x3e	; 62
 378:	12 96       	adiw	r26, 0x02	; 2
 37a:	1c 93       	st	X, r17
 37c:	0e 93       	st	-X, r16
 37e:	11 97       	sbiw	r26, 0x01	; 1
 380:	ce 01       	movw	r24, r28
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	93 83       	std	Z+3, r25	; 0x03
 386:	82 83       	std	Z+2, r24	; 0x02
 388:	85 e2       	ldi	r24, 0x25	; 37
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	95 83       	std	Z+5, r25	; 0x05
 38e:	84 83       	std	Z+4, r24	; 0x04
 390:	c6 82       	std	Z+6, r12	; 0x06
 392:	d7 82       	std	Z+7, r13	; 0x07
 394:	e0 86       	std	Z+8, r14	; 0x08
 396:	f1 86       	std	Z+9, r15	; 0x09
 398:	0e 94 1e 02 	call	0x43c	; 0x43c <snprintf>
	assert(dest[n] == '\0');
 39c:	f8 01       	movw	r30, r16
 39e:	ec 0f       	add	r30, r28
 3a0:	fd 1f       	adc	r31, r29
 3a2:	2d b7       	in	r18, 0x3d	; 61
 3a4:	3e b7       	in	r19, 0x3e	; 62
 3a6:	26 5f       	subi	r18, 0xF6	; 246
 3a8:	3f 4f       	sbci	r19, 0xFF	; 255
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	3e bf       	out	0x3e, r19	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	2d bf       	out	0x3d, r18	; 61
 3b4:	20 81       	ld	r18, Z
 3b6:	22 23       	and	r18, r18
 3b8:	11 f0       	breq	.+4      	; 0x3be <ulongtoa+0xd0>
 3ba:	0e 94 ed 01 	call	0x3da	; 0x3da <abort>
	assert(c == n);	
 3be:	8c 17       	cp	r24, r28
 3c0:	9d 07       	cpc	r25, r29
 3c2:	11 f0       	breq	.+4      	; 0x3c8 <ulongtoa+0xda>
 3c4:	0e 94 ed 01 	call	0x3da	; 0x3da <abort>
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	ff 90       	pop	r15
 3d2:	ef 90       	pop	r14
 3d4:	df 90       	pop	r13
 3d6:	cf 90       	pop	r12
 3d8:	08 95       	ret

000003da <abort>:
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	f8 94       	cli
 3e0:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <_exit>

000003e4 <strcat>:
 3e4:	fb 01       	movw	r30, r22
 3e6:	dc 01       	movw	r26, r24
 3e8:	0d 90       	ld	r0, X+
 3ea:	00 20       	and	r0, r0
 3ec:	e9 f7       	brne	.-6      	; 0x3e8 <strcat+0x4>
 3ee:	11 97       	sbiw	r26, 0x01	; 1
 3f0:	01 90       	ld	r0, Z+
 3f2:	0d 92       	st	X+, r0
 3f4:	00 20       	and	r0, r0
 3f6:	e1 f7       	brne	.-8      	; 0x3f0 <strcat+0xc>
 3f8:	08 95       	ret

000003fa <itoa>:
 3fa:	fb 01       	movw	r30, r22
 3fc:	9f 01       	movw	r18, r30
 3fe:	e8 94       	clt
 400:	42 30       	cpi	r20, 0x02	; 2
 402:	c4 f0       	brlt	.+48     	; 0x434 <itoa+0x3a>
 404:	45 32       	cpi	r20, 0x25	; 37
 406:	b4 f4       	brge	.+44     	; 0x434 <itoa+0x3a>
 408:	4a 30       	cpi	r20, 0x0A	; 10
 40a:	29 f4       	brne	.+10     	; 0x416 <itoa+0x1c>
 40c:	97 fb       	bst	r25, 7
 40e:	1e f4       	brtc	.+6      	; 0x416 <itoa+0x1c>
 410:	90 95       	com	r25
 412:	81 95       	neg	r24
 414:	9f 4f       	sbci	r25, 0xFF	; 255
 416:	64 2f       	mov	r22, r20
 418:	77 27       	eor	r23, r23
 41a:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__udivmodhi4>
 41e:	80 5d       	subi	r24, 0xD0	; 208
 420:	8a 33       	cpi	r24, 0x3A	; 58
 422:	0c f0       	brlt	.+2      	; 0x426 <itoa+0x2c>
 424:	89 5d       	subi	r24, 0xD9	; 217
 426:	81 93       	st	Z+, r24
 428:	cb 01       	movw	r24, r22
 42a:	00 97       	sbiw	r24, 0x00	; 0
 42c:	a1 f7       	brne	.-24     	; 0x416 <itoa+0x1c>
 42e:	16 f4       	brtc	.+4      	; 0x434 <itoa+0x3a>
 430:	5d e2       	ldi	r21, 0x2D	; 45
 432:	51 93       	st	Z+, r21
 434:	10 82       	st	Z, r1
 436:	c9 01       	movw	r24, r18
 438:	0c 94 42 04 	jmp	0x884	; 0x884 <strrev>

0000043c <snprintf>:
 43c:	ae e0       	ldi	r26, 0x0E	; 14
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	e4 e2       	ldi	r30, 0x24	; 36
 442:	f2 e0       	ldi	r31, 0x02	; 2
 444:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__prologue_saves__+0x1c>
 448:	0d 89       	ldd	r16, Y+21	; 0x15
 44a:	1e 89       	ldd	r17, Y+22	; 0x16
 44c:	8f 89       	ldd	r24, Y+23	; 0x17
 44e:	98 8d       	ldd	r25, Y+24	; 0x18
 450:	26 e0       	ldi	r18, 0x06	; 6
 452:	2c 83       	std	Y+4, r18	; 0x04
 454:	1a 83       	std	Y+2, r17	; 0x02
 456:	09 83       	std	Y+1, r16	; 0x01
 458:	97 ff       	sbrs	r25, 7
 45a:	02 c0       	rjmp	.+4      	; 0x460 <snprintf+0x24>
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	90 e8       	ldi	r25, 0x80	; 128
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	9e 83       	std	Y+6, r25	; 0x06
 464:	8d 83       	std	Y+5, r24	; 0x05
 466:	ae 01       	movw	r20, r28
 468:	45 5e       	subi	r20, 0xE5	; 229
 46a:	5f 4f       	sbci	r21, 0xFF	; 255
 46c:	ce 01       	movw	r24, r28
 46e:	01 96       	adiw	r24, 0x01	; 1
 470:	69 8d       	ldd	r22, Y+25	; 0x19
 472:	7a 8d       	ldd	r23, Y+26	; 0x1a
 474:	0e 94 4e 02 	call	0x49c	; 0x49c <vfprintf>
 478:	4d 81       	ldd	r20, Y+5	; 0x05
 47a:	5e 81       	ldd	r21, Y+6	; 0x06
 47c:	57 fd       	sbrc	r21, 7
 47e:	0a c0       	rjmp	.+20     	; 0x494 <snprintf+0x58>
 480:	2f 81       	ldd	r18, Y+7	; 0x07
 482:	38 85       	ldd	r19, Y+8	; 0x08
 484:	42 17       	cp	r20, r18
 486:	53 07       	cpc	r21, r19
 488:	0c f4       	brge	.+2      	; 0x48c <snprintf+0x50>
 48a:	9a 01       	movw	r18, r20
 48c:	02 0f       	add	r16, r18
 48e:	13 1f       	adc	r17, r19
 490:	f8 01       	movw	r30, r16
 492:	10 82       	st	Z, r1
 494:	2e 96       	adiw	r28, 0x0e	; 14
 496:	e4 e0       	ldi	r30, 0x04	; 4
 498:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__epilogue_restores__+0x1c>

0000049c <vfprintf>:
 49c:	ad e0       	ldi	r26, 0x0D	; 13
 49e:	b0 e0       	ldi	r27, 0x00	; 0
 4a0:	e4 e5       	ldi	r30, 0x54	; 84
 4a2:	f2 e0       	ldi	r31, 0x02	; 2
 4a4:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__prologue_saves__>
 4a8:	3c 01       	movw	r6, r24
 4aa:	7d 87       	std	Y+13, r23	; 0x0d
 4ac:	6c 87       	std	Y+12, r22	; 0x0c
 4ae:	5a 01       	movw	r10, r20
 4b0:	fc 01       	movw	r30, r24
 4b2:	17 82       	std	Z+7, r1	; 0x07
 4b4:	16 82       	std	Z+6, r1	; 0x06
 4b6:	83 81       	ldd	r24, Z+3	; 0x03
 4b8:	81 ff       	sbrs	r24, 1
 4ba:	c8 c1       	rjmp	.+912    	; 0x84c <vfprintf+0x3b0>
 4bc:	2e 01       	movw	r4, r28
 4be:	08 94       	sec
 4c0:	41 1c       	adc	r4, r1
 4c2:	51 1c       	adc	r5, r1
 4c4:	f3 01       	movw	r30, r6
 4c6:	93 81       	ldd	r25, Z+3	; 0x03
 4c8:	ec 85       	ldd	r30, Y+12	; 0x0c
 4ca:	fd 85       	ldd	r31, Y+13	; 0x0d
 4cc:	93 fd       	sbrc	r25, 3
 4ce:	85 91       	lpm	r24, Z+
 4d0:	93 ff       	sbrs	r25, 3
 4d2:	81 91       	ld	r24, Z+
 4d4:	fd 87       	std	Y+13, r31	; 0x0d
 4d6:	ec 87       	std	Y+12, r30	; 0x0c
 4d8:	88 23       	and	r24, r24
 4da:	09 f4       	brne	.+2      	; 0x4de <vfprintf+0x42>
 4dc:	b3 c1       	rjmp	.+870    	; 0x844 <vfprintf+0x3a8>
 4de:	85 32       	cpi	r24, 0x25	; 37
 4e0:	41 f4       	brne	.+16     	; 0x4f2 <vfprintf+0x56>
 4e2:	93 fd       	sbrc	r25, 3
 4e4:	85 91       	lpm	r24, Z+
 4e6:	93 ff       	sbrs	r25, 3
 4e8:	81 91       	ld	r24, Z+
 4ea:	fd 87       	std	Y+13, r31	; 0x0d
 4ec:	ec 87       	std	Y+12, r30	; 0x0c
 4ee:	85 32       	cpi	r24, 0x25	; 37
 4f0:	29 f4       	brne	.+10     	; 0x4fc <vfprintf+0x60>
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	b3 01       	movw	r22, r6
 4f6:	0e 94 52 04 	call	0x8a4	; 0x8a4 <fputc>
 4fa:	e4 cf       	rjmp	.-56     	; 0x4c4 <vfprintf+0x28>
 4fc:	ff 24       	eor	r15, r15
 4fe:	ee 24       	eor	r14, r14
 500:	10 e0       	ldi	r17, 0x00	; 0
 502:	10 32       	cpi	r17, 0x20	; 32
 504:	b0 f4       	brcc	.+44     	; 0x532 <vfprintf+0x96>
 506:	8b 32       	cpi	r24, 0x2B	; 43
 508:	69 f0       	breq	.+26     	; 0x524 <vfprintf+0x88>
 50a:	8c 32       	cpi	r24, 0x2C	; 44
 50c:	28 f4       	brcc	.+10     	; 0x518 <vfprintf+0x7c>
 50e:	80 32       	cpi	r24, 0x20	; 32
 510:	51 f0       	breq	.+20     	; 0x526 <vfprintf+0x8a>
 512:	83 32       	cpi	r24, 0x23	; 35
 514:	71 f4       	brne	.+28     	; 0x532 <vfprintf+0x96>
 516:	0b c0       	rjmp	.+22     	; 0x52e <vfprintf+0x92>
 518:	8d 32       	cpi	r24, 0x2D	; 45
 51a:	39 f0       	breq	.+14     	; 0x52a <vfprintf+0x8e>
 51c:	80 33       	cpi	r24, 0x30	; 48
 51e:	49 f4       	brne	.+18     	; 0x532 <vfprintf+0x96>
 520:	11 60       	ori	r17, 0x01	; 1
 522:	2c c0       	rjmp	.+88     	; 0x57c <vfprintf+0xe0>
 524:	12 60       	ori	r17, 0x02	; 2
 526:	14 60       	ori	r17, 0x04	; 4
 528:	29 c0       	rjmp	.+82     	; 0x57c <vfprintf+0xe0>
 52a:	18 60       	ori	r17, 0x08	; 8
 52c:	27 c0       	rjmp	.+78     	; 0x57c <vfprintf+0xe0>
 52e:	10 61       	ori	r17, 0x10	; 16
 530:	25 c0       	rjmp	.+74     	; 0x57c <vfprintf+0xe0>
 532:	17 fd       	sbrc	r17, 7
 534:	2e c0       	rjmp	.+92     	; 0x592 <vfprintf+0xf6>
 536:	28 2f       	mov	r18, r24
 538:	20 53       	subi	r18, 0x30	; 48
 53a:	2a 30       	cpi	r18, 0x0A	; 10
 53c:	98 f4       	brcc	.+38     	; 0x564 <vfprintf+0xc8>
 53e:	16 ff       	sbrs	r17, 6
 540:	08 c0       	rjmp	.+16     	; 0x552 <vfprintf+0xb6>
 542:	8f 2d       	mov	r24, r15
 544:	88 0f       	add	r24, r24
 546:	f8 2e       	mov	r15, r24
 548:	ff 0c       	add	r15, r15
 54a:	ff 0c       	add	r15, r15
 54c:	f8 0e       	add	r15, r24
 54e:	f2 0e       	add	r15, r18
 550:	15 c0       	rjmp	.+42     	; 0x57c <vfprintf+0xe0>
 552:	8e 2d       	mov	r24, r14
 554:	88 0f       	add	r24, r24
 556:	e8 2e       	mov	r14, r24
 558:	ee 0c       	add	r14, r14
 55a:	ee 0c       	add	r14, r14
 55c:	e8 0e       	add	r14, r24
 55e:	e2 0e       	add	r14, r18
 560:	10 62       	ori	r17, 0x20	; 32
 562:	0c c0       	rjmp	.+24     	; 0x57c <vfprintf+0xe0>
 564:	8e 32       	cpi	r24, 0x2E	; 46
 566:	21 f4       	brne	.+8      	; 0x570 <vfprintf+0xd4>
 568:	16 fd       	sbrc	r17, 6
 56a:	6c c1       	rjmp	.+728    	; 0x844 <vfprintf+0x3a8>
 56c:	10 64       	ori	r17, 0x40	; 64
 56e:	06 c0       	rjmp	.+12     	; 0x57c <vfprintf+0xe0>
 570:	8c 36       	cpi	r24, 0x6C	; 108
 572:	11 f4       	brne	.+4      	; 0x578 <vfprintf+0xdc>
 574:	10 68       	ori	r17, 0x80	; 128
 576:	02 c0       	rjmp	.+4      	; 0x57c <vfprintf+0xe0>
 578:	88 36       	cpi	r24, 0x68	; 104
 57a:	59 f4       	brne	.+22     	; 0x592 <vfprintf+0xf6>
 57c:	ec 85       	ldd	r30, Y+12	; 0x0c
 57e:	fd 85       	ldd	r31, Y+13	; 0x0d
 580:	93 fd       	sbrc	r25, 3
 582:	85 91       	lpm	r24, Z+
 584:	93 ff       	sbrs	r25, 3
 586:	81 91       	ld	r24, Z+
 588:	fd 87       	std	Y+13, r31	; 0x0d
 58a:	ec 87       	std	Y+12, r30	; 0x0c
 58c:	88 23       	and	r24, r24
 58e:	09 f0       	breq	.+2      	; 0x592 <vfprintf+0xf6>
 590:	b8 cf       	rjmp	.-144    	; 0x502 <vfprintf+0x66>
 592:	98 2f       	mov	r25, r24
 594:	95 54       	subi	r25, 0x45	; 69
 596:	93 30       	cpi	r25, 0x03	; 3
 598:	18 f0       	brcs	.+6      	; 0x5a0 <vfprintf+0x104>
 59a:	90 52       	subi	r25, 0x20	; 32
 59c:	93 30       	cpi	r25, 0x03	; 3
 59e:	38 f4       	brcc	.+14     	; 0x5ae <vfprintf+0x112>
 5a0:	24 e0       	ldi	r18, 0x04	; 4
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	a2 0e       	add	r10, r18
 5a6:	b3 1e       	adc	r11, r19
 5a8:	3f e3       	ldi	r19, 0x3F	; 63
 5aa:	39 83       	std	Y+1, r19	; 0x01
 5ac:	0f c0       	rjmp	.+30     	; 0x5cc <vfprintf+0x130>
 5ae:	83 36       	cpi	r24, 0x63	; 99
 5b0:	31 f0       	breq	.+12     	; 0x5be <vfprintf+0x122>
 5b2:	83 37       	cpi	r24, 0x73	; 115
 5b4:	81 f0       	breq	.+32     	; 0x5d6 <vfprintf+0x13a>
 5b6:	83 35       	cpi	r24, 0x53	; 83
 5b8:	09 f0       	breq	.+2      	; 0x5bc <vfprintf+0x120>
 5ba:	5a c0       	rjmp	.+180    	; 0x670 <vfprintf+0x1d4>
 5bc:	22 c0       	rjmp	.+68     	; 0x602 <vfprintf+0x166>
 5be:	f5 01       	movw	r30, r10
 5c0:	80 81       	ld	r24, Z
 5c2:	89 83       	std	Y+1, r24	; 0x01
 5c4:	22 e0       	ldi	r18, 0x02	; 2
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	a2 0e       	add	r10, r18
 5ca:	b3 1e       	adc	r11, r19
 5cc:	21 e0       	ldi	r18, 0x01	; 1
 5ce:	c2 2e       	mov	r12, r18
 5d0:	d1 2c       	mov	r13, r1
 5d2:	42 01       	movw	r8, r4
 5d4:	14 c0       	rjmp	.+40     	; 0x5fe <vfprintf+0x162>
 5d6:	92 e0       	ldi	r25, 0x02	; 2
 5d8:	29 2e       	mov	r2, r25
 5da:	31 2c       	mov	r3, r1
 5dc:	2a 0c       	add	r2, r10
 5de:	3b 1c       	adc	r3, r11
 5e0:	f5 01       	movw	r30, r10
 5e2:	80 80       	ld	r8, Z
 5e4:	91 80       	ldd	r9, Z+1	; 0x01
 5e6:	16 ff       	sbrs	r17, 6
 5e8:	03 c0       	rjmp	.+6      	; 0x5f0 <vfprintf+0x154>
 5ea:	6f 2d       	mov	r22, r15
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <vfprintf+0x158>
 5f0:	6f ef       	ldi	r22, 0xFF	; 255
 5f2:	7f ef       	ldi	r23, 0xFF	; 255
 5f4:	c4 01       	movw	r24, r8
 5f6:	0e 94 37 04 	call	0x86e	; 0x86e <strnlen>
 5fa:	6c 01       	movw	r12, r24
 5fc:	51 01       	movw	r10, r2
 5fe:	1f 77       	andi	r17, 0x7F	; 127
 600:	15 c0       	rjmp	.+42     	; 0x62c <vfprintf+0x190>
 602:	82 e0       	ldi	r24, 0x02	; 2
 604:	28 2e       	mov	r2, r24
 606:	31 2c       	mov	r3, r1
 608:	2a 0c       	add	r2, r10
 60a:	3b 1c       	adc	r3, r11
 60c:	f5 01       	movw	r30, r10
 60e:	80 80       	ld	r8, Z
 610:	91 80       	ldd	r9, Z+1	; 0x01
 612:	16 ff       	sbrs	r17, 6
 614:	03 c0       	rjmp	.+6      	; 0x61c <vfprintf+0x180>
 616:	6f 2d       	mov	r22, r15
 618:	70 e0       	ldi	r23, 0x00	; 0
 61a:	02 c0       	rjmp	.+4      	; 0x620 <vfprintf+0x184>
 61c:	6f ef       	ldi	r22, 0xFF	; 255
 61e:	7f ef       	ldi	r23, 0xFF	; 255
 620:	c4 01       	movw	r24, r8
 622:	0e 94 2c 04 	call	0x858	; 0x858 <strnlen_P>
 626:	6c 01       	movw	r12, r24
 628:	10 68       	ori	r17, 0x80	; 128
 62a:	51 01       	movw	r10, r2
 62c:	13 fd       	sbrc	r17, 3
 62e:	1c c0       	rjmp	.+56     	; 0x668 <vfprintf+0x1cc>
 630:	06 c0       	rjmp	.+12     	; 0x63e <vfprintf+0x1a2>
 632:	80 e2       	ldi	r24, 0x20	; 32
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	b3 01       	movw	r22, r6
 638:	0e 94 52 04 	call	0x8a4	; 0x8a4 <fputc>
 63c:	ea 94       	dec	r14
 63e:	8e 2d       	mov	r24, r14
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	c8 16       	cp	r12, r24
 644:	d9 06       	cpc	r13, r25
 646:	a8 f3       	brcs	.-22     	; 0x632 <vfprintf+0x196>
 648:	0f c0       	rjmp	.+30     	; 0x668 <vfprintf+0x1cc>
 64a:	f4 01       	movw	r30, r8
 64c:	17 fd       	sbrc	r17, 7
 64e:	85 91       	lpm	r24, Z+
 650:	17 ff       	sbrs	r17, 7
 652:	81 91       	ld	r24, Z+
 654:	4f 01       	movw	r8, r30
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	b3 01       	movw	r22, r6
 65a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <fputc>
 65e:	e1 10       	cpse	r14, r1
 660:	ea 94       	dec	r14
 662:	08 94       	sec
 664:	c1 08       	sbc	r12, r1
 666:	d1 08       	sbc	r13, r1
 668:	c1 14       	cp	r12, r1
 66a:	d1 04       	cpc	r13, r1
 66c:	71 f7       	brne	.-36     	; 0x64a <vfprintf+0x1ae>
 66e:	e7 c0       	rjmp	.+462    	; 0x83e <vfprintf+0x3a2>
 670:	84 36       	cpi	r24, 0x64	; 100
 672:	11 f0       	breq	.+4      	; 0x678 <vfprintf+0x1dc>
 674:	89 36       	cpi	r24, 0x69	; 105
 676:	51 f5       	brne	.+84     	; 0x6cc <vfprintf+0x230>
 678:	f5 01       	movw	r30, r10
 67a:	17 ff       	sbrs	r17, 7
 67c:	07 c0       	rjmp	.+14     	; 0x68c <vfprintf+0x1f0>
 67e:	80 81       	ld	r24, Z
 680:	91 81       	ldd	r25, Z+1	; 0x01
 682:	a2 81       	ldd	r26, Z+2	; 0x02
 684:	b3 81       	ldd	r27, Z+3	; 0x03
 686:	24 e0       	ldi	r18, 0x04	; 4
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	08 c0       	rjmp	.+16     	; 0x69c <vfprintf+0x200>
 68c:	80 81       	ld	r24, Z
 68e:	91 81       	ldd	r25, Z+1	; 0x01
 690:	aa 27       	eor	r26, r26
 692:	97 fd       	sbrc	r25, 7
 694:	a0 95       	com	r26
 696:	ba 2f       	mov	r27, r26
 698:	22 e0       	ldi	r18, 0x02	; 2
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	a2 0e       	add	r10, r18
 69e:	b3 1e       	adc	r11, r19
 6a0:	01 2f       	mov	r16, r17
 6a2:	0f 76       	andi	r16, 0x6F	; 111
 6a4:	b7 ff       	sbrs	r27, 7
 6a6:	08 c0       	rjmp	.+16     	; 0x6b8 <vfprintf+0x21c>
 6a8:	b0 95       	com	r27
 6aa:	a0 95       	com	r26
 6ac:	90 95       	com	r25
 6ae:	81 95       	neg	r24
 6b0:	9f 4f       	sbci	r25, 0xFF	; 255
 6b2:	af 4f       	sbci	r26, 0xFF	; 255
 6b4:	bf 4f       	sbci	r27, 0xFF	; 255
 6b6:	00 68       	ori	r16, 0x80	; 128
 6b8:	bc 01       	movw	r22, r24
 6ba:	cd 01       	movw	r24, r26
 6bc:	a2 01       	movw	r20, r4
 6be:	2a e0       	ldi	r18, 0x0A	; 10
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__ultoa_invert>
 6c6:	d8 2e       	mov	r13, r24
 6c8:	d4 18       	sub	r13, r4
 6ca:	3f c0       	rjmp	.+126    	; 0x74a <vfprintf+0x2ae>
 6cc:	85 37       	cpi	r24, 0x75	; 117
 6ce:	21 f4       	brne	.+8      	; 0x6d8 <vfprintf+0x23c>
 6d0:	1f 7e       	andi	r17, 0xEF	; 239
 6d2:	2a e0       	ldi	r18, 0x0A	; 10
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	20 c0       	rjmp	.+64     	; 0x718 <vfprintf+0x27c>
 6d8:	19 7f       	andi	r17, 0xF9	; 249
 6da:	8f 36       	cpi	r24, 0x6F	; 111
 6dc:	a9 f0       	breq	.+42     	; 0x708 <vfprintf+0x26c>
 6de:	80 37       	cpi	r24, 0x70	; 112
 6e0:	20 f4       	brcc	.+8      	; 0x6ea <vfprintf+0x24e>
 6e2:	88 35       	cpi	r24, 0x58	; 88
 6e4:	09 f0       	breq	.+2      	; 0x6e8 <vfprintf+0x24c>
 6e6:	ae c0       	rjmp	.+348    	; 0x844 <vfprintf+0x3a8>
 6e8:	0b c0       	rjmp	.+22     	; 0x700 <vfprintf+0x264>
 6ea:	80 37       	cpi	r24, 0x70	; 112
 6ec:	21 f0       	breq	.+8      	; 0x6f6 <vfprintf+0x25a>
 6ee:	88 37       	cpi	r24, 0x78	; 120
 6f0:	09 f0       	breq	.+2      	; 0x6f4 <vfprintf+0x258>
 6f2:	a8 c0       	rjmp	.+336    	; 0x844 <vfprintf+0x3a8>
 6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <vfprintf+0x25c>
 6f6:	10 61       	ori	r17, 0x10	; 16
 6f8:	14 ff       	sbrs	r17, 4
 6fa:	09 c0       	rjmp	.+18     	; 0x70e <vfprintf+0x272>
 6fc:	14 60       	ori	r17, 0x04	; 4
 6fe:	07 c0       	rjmp	.+14     	; 0x70e <vfprintf+0x272>
 700:	14 ff       	sbrs	r17, 4
 702:	08 c0       	rjmp	.+16     	; 0x714 <vfprintf+0x278>
 704:	16 60       	ori	r17, 0x06	; 6
 706:	06 c0       	rjmp	.+12     	; 0x714 <vfprintf+0x278>
 708:	28 e0       	ldi	r18, 0x08	; 8
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	05 c0       	rjmp	.+10     	; 0x718 <vfprintf+0x27c>
 70e:	20 e1       	ldi	r18, 0x10	; 16
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	02 c0       	rjmp	.+4      	; 0x718 <vfprintf+0x27c>
 714:	20 e1       	ldi	r18, 0x10	; 16
 716:	32 e0       	ldi	r19, 0x02	; 2
 718:	f5 01       	movw	r30, r10
 71a:	17 ff       	sbrs	r17, 7
 71c:	07 c0       	rjmp	.+14     	; 0x72c <vfprintf+0x290>
 71e:	60 81       	ld	r22, Z
 720:	71 81       	ldd	r23, Z+1	; 0x01
 722:	82 81       	ldd	r24, Z+2	; 0x02
 724:	93 81       	ldd	r25, Z+3	; 0x03
 726:	44 e0       	ldi	r20, 0x04	; 4
 728:	50 e0       	ldi	r21, 0x00	; 0
 72a:	06 c0       	rjmp	.+12     	; 0x738 <vfprintf+0x29c>
 72c:	60 81       	ld	r22, Z
 72e:	71 81       	ldd	r23, Z+1	; 0x01
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	42 e0       	ldi	r20, 0x02	; 2
 736:	50 e0       	ldi	r21, 0x00	; 0
 738:	a4 0e       	add	r10, r20
 73a:	b5 1e       	adc	r11, r21
 73c:	a2 01       	movw	r20, r4
 73e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__ultoa_invert>
 742:	d8 2e       	mov	r13, r24
 744:	d4 18       	sub	r13, r4
 746:	01 2f       	mov	r16, r17
 748:	0f 77       	andi	r16, 0x7F	; 127
 74a:	06 ff       	sbrs	r16, 6
 74c:	09 c0       	rjmp	.+18     	; 0x760 <vfprintf+0x2c4>
 74e:	0e 7f       	andi	r16, 0xFE	; 254
 750:	df 14       	cp	r13, r15
 752:	30 f4       	brcc	.+12     	; 0x760 <vfprintf+0x2c4>
 754:	04 ff       	sbrs	r16, 4
 756:	06 c0       	rjmp	.+12     	; 0x764 <vfprintf+0x2c8>
 758:	02 fd       	sbrc	r16, 2
 75a:	04 c0       	rjmp	.+8      	; 0x764 <vfprintf+0x2c8>
 75c:	0f 7e       	andi	r16, 0xEF	; 239
 75e:	02 c0       	rjmp	.+4      	; 0x764 <vfprintf+0x2c8>
 760:	1d 2d       	mov	r17, r13
 762:	01 c0       	rjmp	.+2      	; 0x766 <vfprintf+0x2ca>
 764:	1f 2d       	mov	r17, r15
 766:	80 2f       	mov	r24, r16
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	04 ff       	sbrs	r16, 4
 76c:	0c c0       	rjmp	.+24     	; 0x786 <vfprintf+0x2ea>
 76e:	fe 01       	movw	r30, r28
 770:	ed 0d       	add	r30, r13
 772:	f1 1d       	adc	r31, r1
 774:	20 81       	ld	r18, Z
 776:	20 33       	cpi	r18, 0x30	; 48
 778:	11 f4       	brne	.+4      	; 0x77e <vfprintf+0x2e2>
 77a:	09 7e       	andi	r16, 0xE9	; 233
 77c:	09 c0       	rjmp	.+18     	; 0x790 <vfprintf+0x2f4>
 77e:	02 ff       	sbrs	r16, 2
 780:	06 c0       	rjmp	.+12     	; 0x78e <vfprintf+0x2f2>
 782:	1e 5f       	subi	r17, 0xFE	; 254
 784:	05 c0       	rjmp	.+10     	; 0x790 <vfprintf+0x2f4>
 786:	86 78       	andi	r24, 0x86	; 134
 788:	90 70       	andi	r25, 0x00	; 0
 78a:	00 97       	sbiw	r24, 0x00	; 0
 78c:	09 f0       	breq	.+2      	; 0x790 <vfprintf+0x2f4>
 78e:	1f 5f       	subi	r17, 0xFF	; 255
 790:	80 2e       	mov	r8, r16
 792:	99 24       	eor	r9, r9
 794:	03 fd       	sbrc	r16, 3
 796:	12 c0       	rjmp	.+36     	; 0x7bc <vfprintf+0x320>
 798:	00 ff       	sbrs	r16, 0
 79a:	0d c0       	rjmp	.+26     	; 0x7b6 <vfprintf+0x31a>
 79c:	fd 2c       	mov	r15, r13
 79e:	1e 15       	cp	r17, r14
 7a0:	50 f4       	brcc	.+20     	; 0x7b6 <vfprintf+0x31a>
 7a2:	fe 0c       	add	r15, r14
 7a4:	f1 1a       	sub	r15, r17
 7a6:	1e 2d       	mov	r17, r14
 7a8:	06 c0       	rjmp	.+12     	; 0x7b6 <vfprintf+0x31a>
 7aa:	80 e2       	ldi	r24, 0x20	; 32
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	b3 01       	movw	r22, r6
 7b0:	0e 94 52 04 	call	0x8a4	; 0x8a4 <fputc>
 7b4:	1f 5f       	subi	r17, 0xFF	; 255
 7b6:	1e 15       	cp	r17, r14
 7b8:	c0 f3       	brcs	.-16     	; 0x7aa <vfprintf+0x30e>
 7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <vfprintf+0x328>
 7bc:	1e 15       	cp	r17, r14
 7be:	10 f4       	brcc	.+4      	; 0x7c4 <vfprintf+0x328>
 7c0:	e1 1a       	sub	r14, r17
 7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <vfprintf+0x32a>
 7c4:	ee 24       	eor	r14, r14
 7c6:	84 fe       	sbrs	r8, 4
 7c8:	0f c0       	rjmp	.+30     	; 0x7e8 <vfprintf+0x34c>
 7ca:	80 e3       	ldi	r24, 0x30	; 48
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	b3 01       	movw	r22, r6
 7d0:	0e 94 52 04 	call	0x8a4	; 0x8a4 <fputc>
 7d4:	82 fe       	sbrs	r8, 2
 7d6:	1f c0       	rjmp	.+62     	; 0x816 <vfprintf+0x37a>
 7d8:	81 fe       	sbrs	r8, 1
 7da:	03 c0       	rjmp	.+6      	; 0x7e2 <vfprintf+0x346>
 7dc:	88 e5       	ldi	r24, 0x58	; 88
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	10 c0       	rjmp	.+32     	; 0x802 <vfprintf+0x366>
 7e2:	88 e7       	ldi	r24, 0x78	; 120
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	0d c0       	rjmp	.+26     	; 0x802 <vfprintf+0x366>
 7e8:	c4 01       	movw	r24, r8
 7ea:	86 78       	andi	r24, 0x86	; 134
 7ec:	90 70       	andi	r25, 0x00	; 0
 7ee:	00 97       	sbiw	r24, 0x00	; 0
 7f0:	91 f0       	breq	.+36     	; 0x816 <vfprintf+0x37a>
 7f2:	81 fc       	sbrc	r8, 1
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <vfprintf+0x35e>
 7f6:	80 e2       	ldi	r24, 0x20	; 32
 7f8:	01 c0       	rjmp	.+2      	; 0x7fc <vfprintf+0x360>
 7fa:	8b e2       	ldi	r24, 0x2B	; 43
 7fc:	07 fd       	sbrc	r16, 7
 7fe:	8d e2       	ldi	r24, 0x2D	; 45
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	b3 01       	movw	r22, r6
 804:	0e 94 52 04 	call	0x8a4	; 0x8a4 <fputc>
 808:	06 c0       	rjmp	.+12     	; 0x816 <vfprintf+0x37a>
 80a:	80 e3       	ldi	r24, 0x30	; 48
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	b3 01       	movw	r22, r6
 810:	0e 94 52 04 	call	0x8a4	; 0x8a4 <fputc>
 814:	fa 94       	dec	r15
 816:	df 14       	cp	r13, r15
 818:	c0 f3       	brcs	.-16     	; 0x80a <vfprintf+0x36e>
 81a:	da 94       	dec	r13
 81c:	f2 01       	movw	r30, r4
 81e:	ed 0d       	add	r30, r13
 820:	f1 1d       	adc	r31, r1
 822:	80 81       	ld	r24, Z
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	b3 01       	movw	r22, r6
 828:	0e 94 52 04 	call	0x8a4	; 0x8a4 <fputc>
 82c:	dd 20       	and	r13, r13
 82e:	a9 f7       	brne	.-22     	; 0x81a <vfprintf+0x37e>
 830:	06 c0       	rjmp	.+12     	; 0x83e <vfprintf+0x3a2>
 832:	80 e2       	ldi	r24, 0x20	; 32
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	b3 01       	movw	r22, r6
 838:	0e 94 52 04 	call	0x8a4	; 0x8a4 <fputc>
 83c:	ea 94       	dec	r14
 83e:	ee 20       	and	r14, r14
 840:	c1 f7       	brne	.-16     	; 0x832 <vfprintf+0x396>
 842:	40 ce       	rjmp	.-896    	; 0x4c4 <vfprintf+0x28>
 844:	f3 01       	movw	r30, r6
 846:	86 81       	ldd	r24, Z+6	; 0x06
 848:	97 81       	ldd	r25, Z+7	; 0x07
 84a:	02 c0       	rjmp	.+4      	; 0x850 <vfprintf+0x3b4>
 84c:	8f ef       	ldi	r24, 0xFF	; 255
 84e:	9f ef       	ldi	r25, 0xFF	; 255
 850:	2d 96       	adiw	r28, 0x0d	; 13
 852:	e2 e1       	ldi	r30, 0x12	; 18
 854:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__epilogue_restores__>

00000858 <strnlen_P>:
 858:	fc 01       	movw	r30, r24
 85a:	05 90       	lpm	r0, Z+
 85c:	61 50       	subi	r22, 0x01	; 1
 85e:	70 40       	sbci	r23, 0x00	; 0
 860:	01 10       	cpse	r0, r1
 862:	d8 f7       	brcc	.-10     	; 0x85a <strnlen_P+0x2>
 864:	80 95       	com	r24
 866:	90 95       	com	r25
 868:	8e 0f       	add	r24, r30
 86a:	9f 1f       	adc	r25, r31
 86c:	08 95       	ret

0000086e <strnlen>:
 86e:	fc 01       	movw	r30, r24
 870:	61 50       	subi	r22, 0x01	; 1
 872:	70 40       	sbci	r23, 0x00	; 0
 874:	01 90       	ld	r0, Z+
 876:	01 10       	cpse	r0, r1
 878:	d8 f7       	brcc	.-10     	; 0x870 <strnlen+0x2>
 87a:	80 95       	com	r24
 87c:	90 95       	com	r25
 87e:	8e 0f       	add	r24, r30
 880:	9f 1f       	adc	r25, r31
 882:	08 95       	ret

00000884 <strrev>:
 884:	dc 01       	movw	r26, r24
 886:	fc 01       	movw	r30, r24
 888:	67 2f       	mov	r22, r23
 88a:	71 91       	ld	r23, Z+
 88c:	77 23       	and	r23, r23
 88e:	e1 f7       	brne	.-8      	; 0x888 <strrev+0x4>
 890:	32 97       	sbiw	r30, 0x02	; 2
 892:	04 c0       	rjmp	.+8      	; 0x89c <strrev+0x18>
 894:	7c 91       	ld	r23, X
 896:	6d 93       	st	X+, r22
 898:	70 83       	st	Z, r23
 89a:	62 91       	ld	r22, -Z
 89c:	ae 17       	cp	r26, r30
 89e:	bf 07       	cpc	r27, r31
 8a0:	c8 f3       	brcs	.-14     	; 0x894 <strrev+0x10>
 8a2:	08 95       	ret

000008a4 <fputc>:
 8a4:	0f 93       	push	r16
 8a6:	1f 93       	push	r17
 8a8:	cf 93       	push	r28
 8aa:	df 93       	push	r29
 8ac:	8c 01       	movw	r16, r24
 8ae:	eb 01       	movw	r28, r22
 8b0:	8b 81       	ldd	r24, Y+3	; 0x03
 8b2:	81 ff       	sbrs	r24, 1
 8b4:	1b c0       	rjmp	.+54     	; 0x8ec <fputc+0x48>
 8b6:	82 ff       	sbrs	r24, 2
 8b8:	0d c0       	rjmp	.+26     	; 0x8d4 <fputc+0x30>
 8ba:	2e 81       	ldd	r18, Y+6	; 0x06
 8bc:	3f 81       	ldd	r19, Y+7	; 0x07
 8be:	8c 81       	ldd	r24, Y+4	; 0x04
 8c0:	9d 81       	ldd	r25, Y+5	; 0x05
 8c2:	28 17       	cp	r18, r24
 8c4:	39 07       	cpc	r19, r25
 8c6:	64 f4       	brge	.+24     	; 0x8e0 <fputc+0x3c>
 8c8:	e8 81       	ld	r30, Y
 8ca:	f9 81       	ldd	r31, Y+1	; 0x01
 8cc:	01 93       	st	Z+, r16
 8ce:	f9 83       	std	Y+1, r31	; 0x01
 8d0:	e8 83       	st	Y, r30
 8d2:	06 c0       	rjmp	.+12     	; 0x8e0 <fputc+0x3c>
 8d4:	e8 85       	ldd	r30, Y+8	; 0x08
 8d6:	f9 85       	ldd	r31, Y+9	; 0x09
 8d8:	80 2f       	mov	r24, r16
 8da:	09 95       	icall
 8dc:	00 97       	sbiw	r24, 0x00	; 0
 8de:	31 f4       	brne	.+12     	; 0x8ec <fputc+0x48>
 8e0:	8e 81       	ldd	r24, Y+6	; 0x06
 8e2:	9f 81       	ldd	r25, Y+7	; 0x07
 8e4:	01 96       	adiw	r24, 0x01	; 1
 8e6:	9f 83       	std	Y+7, r25	; 0x07
 8e8:	8e 83       	std	Y+6, r24	; 0x06
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <fputc+0x4c>
 8ec:	0f ef       	ldi	r16, 0xFF	; 255
 8ee:	1f ef       	ldi	r17, 0xFF	; 255
 8f0:	c8 01       	movw	r24, r16
 8f2:	df 91       	pop	r29
 8f4:	cf 91       	pop	r28
 8f6:	1f 91       	pop	r17
 8f8:	0f 91       	pop	r16
 8fa:	08 95       	ret

000008fc <__ultoa_invert>:
 8fc:	fa 01       	movw	r30, r20
 8fe:	aa 27       	eor	r26, r26
 900:	28 30       	cpi	r18, 0x08	; 8
 902:	51 f1       	breq	.+84     	; 0x958 <__stack+0x59>
 904:	20 31       	cpi	r18, 0x10	; 16
 906:	81 f1       	breq	.+96     	; 0x968 <__stack+0x69>
 908:	e8 94       	clt
 90a:	6f 93       	push	r22
 90c:	6e 7f       	andi	r22, 0xFE	; 254
 90e:	6e 5f       	subi	r22, 0xFE	; 254
 910:	7f 4f       	sbci	r23, 0xFF	; 255
 912:	8f 4f       	sbci	r24, 0xFF	; 255
 914:	9f 4f       	sbci	r25, 0xFF	; 255
 916:	af 4f       	sbci	r26, 0xFF	; 255
 918:	b1 e0       	ldi	r27, 0x01	; 1
 91a:	3e d0       	rcall	.+124    	; 0x998 <__stack+0x99>
 91c:	b4 e0       	ldi	r27, 0x04	; 4
 91e:	3c d0       	rcall	.+120    	; 0x998 <__stack+0x99>
 920:	67 0f       	add	r22, r23
 922:	78 1f       	adc	r23, r24
 924:	89 1f       	adc	r24, r25
 926:	9a 1f       	adc	r25, r26
 928:	a1 1d       	adc	r26, r1
 92a:	68 0f       	add	r22, r24
 92c:	79 1f       	adc	r23, r25
 92e:	8a 1f       	adc	r24, r26
 930:	91 1d       	adc	r25, r1
 932:	a1 1d       	adc	r26, r1
 934:	6a 0f       	add	r22, r26
 936:	71 1d       	adc	r23, r1
 938:	81 1d       	adc	r24, r1
 93a:	91 1d       	adc	r25, r1
 93c:	a1 1d       	adc	r26, r1
 93e:	20 d0       	rcall	.+64     	; 0x980 <__stack+0x81>
 940:	09 f4       	brne	.+2      	; 0x944 <__stack+0x45>
 942:	68 94       	set
 944:	3f 91       	pop	r19
 946:	2a e0       	ldi	r18, 0x0A	; 10
 948:	26 9f       	mul	r18, r22
 94a:	11 24       	eor	r1, r1
 94c:	30 19       	sub	r19, r0
 94e:	30 5d       	subi	r19, 0xD0	; 208
 950:	31 93       	st	Z+, r19
 952:	de f6       	brtc	.-74     	; 0x90a <__stack+0xb>
 954:	cf 01       	movw	r24, r30
 956:	08 95       	ret
 958:	46 2f       	mov	r20, r22
 95a:	47 70       	andi	r20, 0x07	; 7
 95c:	40 5d       	subi	r20, 0xD0	; 208
 95e:	41 93       	st	Z+, r20
 960:	b3 e0       	ldi	r27, 0x03	; 3
 962:	0f d0       	rcall	.+30     	; 0x982 <__stack+0x83>
 964:	c9 f7       	brne	.-14     	; 0x958 <__stack+0x59>
 966:	f6 cf       	rjmp	.-20     	; 0x954 <__stack+0x55>
 968:	46 2f       	mov	r20, r22
 96a:	4f 70       	andi	r20, 0x0F	; 15
 96c:	40 5d       	subi	r20, 0xD0	; 208
 96e:	4a 33       	cpi	r20, 0x3A	; 58
 970:	18 f0       	brcs	.+6      	; 0x978 <__stack+0x79>
 972:	49 5d       	subi	r20, 0xD9	; 217
 974:	31 fd       	sbrc	r19, 1
 976:	40 52       	subi	r20, 0x20	; 32
 978:	41 93       	st	Z+, r20
 97a:	02 d0       	rcall	.+4      	; 0x980 <__stack+0x81>
 97c:	a9 f7       	brne	.-22     	; 0x968 <__stack+0x69>
 97e:	ea cf       	rjmp	.-44     	; 0x954 <__stack+0x55>
 980:	b4 e0       	ldi	r27, 0x04	; 4
 982:	a6 95       	lsr	r26
 984:	97 95       	ror	r25
 986:	87 95       	ror	r24
 988:	77 95       	ror	r23
 98a:	67 95       	ror	r22
 98c:	ba 95       	dec	r27
 98e:	c9 f7       	brne	.-14     	; 0x982 <__stack+0x83>
 990:	00 97       	sbiw	r24, 0x00	; 0
 992:	61 05       	cpc	r22, r1
 994:	71 05       	cpc	r23, r1
 996:	08 95       	ret
 998:	9b 01       	movw	r18, r22
 99a:	ac 01       	movw	r20, r24
 99c:	0a 2e       	mov	r0, r26
 99e:	06 94       	lsr	r0
 9a0:	57 95       	ror	r21
 9a2:	47 95       	ror	r20
 9a4:	37 95       	ror	r19
 9a6:	27 95       	ror	r18
 9a8:	ba 95       	dec	r27
 9aa:	c9 f7       	brne	.-14     	; 0x99e <__stack+0x9f>
 9ac:	62 0f       	add	r22, r18
 9ae:	73 1f       	adc	r23, r19
 9b0:	84 1f       	adc	r24, r20
 9b2:	95 1f       	adc	r25, r21
 9b4:	a0 1d       	adc	r26, r0
 9b6:	08 95       	ret

000009b8 <__udivmodhi4>:
 9b8:	aa 1b       	sub	r26, r26
 9ba:	bb 1b       	sub	r27, r27
 9bc:	51 e1       	ldi	r21, 0x11	; 17
 9be:	07 c0       	rjmp	.+14     	; 0x9ce <__udivmodhi4_ep>

000009c0 <__udivmodhi4_loop>:
 9c0:	aa 1f       	adc	r26, r26
 9c2:	bb 1f       	adc	r27, r27
 9c4:	a6 17       	cp	r26, r22
 9c6:	b7 07       	cpc	r27, r23
 9c8:	10 f0       	brcs	.+4      	; 0x9ce <__udivmodhi4_ep>
 9ca:	a6 1b       	sub	r26, r22
 9cc:	b7 0b       	sbc	r27, r23

000009ce <__udivmodhi4_ep>:
 9ce:	88 1f       	adc	r24, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	5a 95       	dec	r21
 9d4:	a9 f7       	brne	.-22     	; 0x9c0 <__udivmodhi4_loop>
 9d6:	80 95       	com	r24
 9d8:	90 95       	com	r25
 9da:	bc 01       	movw	r22, r24
 9dc:	cd 01       	movw	r24, r26
 9de:	08 95       	ret

000009e0 <__prologue_saves__>:
 9e0:	2f 92       	push	r2
 9e2:	3f 92       	push	r3
 9e4:	4f 92       	push	r4
 9e6:	5f 92       	push	r5
 9e8:	6f 92       	push	r6
 9ea:	7f 92       	push	r7
 9ec:	8f 92       	push	r8
 9ee:	9f 92       	push	r9
 9f0:	af 92       	push	r10
 9f2:	bf 92       	push	r11
 9f4:	cf 92       	push	r12
 9f6:	df 92       	push	r13
 9f8:	ef 92       	push	r14
 9fa:	ff 92       	push	r15
 9fc:	0f 93       	push	r16
 9fe:	1f 93       	push	r17
 a00:	cf 93       	push	r28
 a02:	df 93       	push	r29
 a04:	cd b7       	in	r28, 0x3d	; 61
 a06:	de b7       	in	r29, 0x3e	; 62
 a08:	ca 1b       	sub	r28, r26
 a0a:	db 0b       	sbc	r29, r27
 a0c:	0f b6       	in	r0, 0x3f	; 63
 a0e:	f8 94       	cli
 a10:	de bf       	out	0x3e, r29	; 62
 a12:	0f be       	out	0x3f, r0	; 63
 a14:	cd bf       	out	0x3d, r28	; 61
 a16:	09 94       	ijmp

00000a18 <__epilogue_restores__>:
 a18:	2a 88       	ldd	r2, Y+18	; 0x12
 a1a:	39 88       	ldd	r3, Y+17	; 0x11
 a1c:	48 88       	ldd	r4, Y+16	; 0x10
 a1e:	5f 84       	ldd	r5, Y+15	; 0x0f
 a20:	6e 84       	ldd	r6, Y+14	; 0x0e
 a22:	7d 84       	ldd	r7, Y+13	; 0x0d
 a24:	8c 84       	ldd	r8, Y+12	; 0x0c
 a26:	9b 84       	ldd	r9, Y+11	; 0x0b
 a28:	aa 84       	ldd	r10, Y+10	; 0x0a
 a2a:	b9 84       	ldd	r11, Y+9	; 0x09
 a2c:	c8 84       	ldd	r12, Y+8	; 0x08
 a2e:	df 80       	ldd	r13, Y+7	; 0x07
 a30:	ee 80       	ldd	r14, Y+6	; 0x06
 a32:	fd 80       	ldd	r15, Y+5	; 0x05
 a34:	0c 81       	ldd	r16, Y+4	; 0x04
 a36:	1b 81       	ldd	r17, Y+3	; 0x03
 a38:	aa 81       	ldd	r26, Y+2	; 0x02
 a3a:	b9 81       	ldd	r27, Y+1	; 0x01
 a3c:	ce 0f       	add	r28, r30
 a3e:	d1 1d       	adc	r29, r1
 a40:	0f b6       	in	r0, 0x3f	; 63
 a42:	f8 94       	cli
 a44:	de bf       	out	0x3e, r29	; 62
 a46:	0f be       	out	0x3f, r0	; 63
 a48:	cd bf       	out	0x3d, r28	; 61
 a4a:	ed 01       	movw	r28, r26
 a4c:	08 95       	ret

00000a4e <_exit>:
 a4e:	f8 94       	cli

00000a50 <__stop_program>:
 a50:	ff cf       	rjmp	.-2      	; 0xa50 <__stop_program>
