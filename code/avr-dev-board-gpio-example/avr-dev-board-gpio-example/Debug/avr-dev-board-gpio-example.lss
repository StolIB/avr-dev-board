
avr-dev-board-gpio-example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000068  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000045b  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001b8  00000000  00000000  0000071f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001f6  00000000  00000000  000008d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000098  00000000  00000000  00000ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001c4  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001f2  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000f1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include "gpio.h"

int main(void)
{
	set_pin_dir(&DDRD, GPIO_PIN6, INPUT);		//Podesi PD6 kao ulaz
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	66 e0       	ldi	r22, 0x06	; 6
  84:	8a e2       	ldi	r24, 0x2A	; 42
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	0e 94 81 00 	call	0x102	; 0x102 <set_pin_dir>
	set_pin_dir(&DDRD, GPIO_PIN7, INPUT);		//Podesi PD7 kao ulaz
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	67 e0       	ldi	r22, 0x07	; 7
  90:	8a e2       	ldi	r24, 0x2A	; 42
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 81 00 	call	0x102	; 0x102 <set_pin_dir>
	set_pin_dir(&DDRB, GPIO_PIN3, OUTPUT);		//Podesi PB3 kao izlaz
  98:	41 e0       	ldi	r20, 0x01	; 1
  9a:	63 e0       	ldi	r22, 0x03	; 3
  9c:	84 e2       	ldi	r24, 0x24	; 36
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 81 00 	call	0x102	; 0x102 <set_pin_dir>
	set_pin_dir(&DDRB, GPIO_PIN4, OUTPUT);		//Podesi PB4 kao izlaz
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	64 e0       	ldi	r22, 0x04	; 4
  a8:	84 e2       	ldi	r24, 0x24	; 36
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 81 00 	call	0x102	; 0x102 <set_pin_dir>
	
	uint8_t toggle_flag = 0;
  b0:	c0 e0       	ldi	r28, 0x00	; 0
		if(read_pin(&PORTD, GPIO_PIN6)) set_pin(&PORTB, GPIO_PIN3);	//Ukoliko je pritisnut taster na pinu PD6 upali diodu na pinu PB3
		else  clear_pin(&PORTB, GPIO_PIN3);							//u suprotnom je ugasi
		
		if(read_pin(&PORTD, GPIO_PIN7) && !toggle_flag){			//Svaki put kada je pritisnut taster na pinu PD7 promeni stanje pina PB4
			toggle_pin(&PORTB, GPIO_PIN4);
			toggle_flag = 1;
  b2:	11 e0       	ldi	r17, 0x01	; 1
		} else {
			toggle_flag = 0;
  b4:	d0 e0       	ldi	r29, 0x00	; 0
  b6:	03 c0       	rjmp	.+6      	; 0xbe <main+0x3e>
  b8:	cd 2f       	mov	r28, r29
  ba:	01 c0       	rjmp	.+2      	; 0xbe <main+0x3e>
  bc:	cd 2f       	mov	r28, r29
	set_pin_dir(&DDRB, GPIO_PIN4, OUTPUT);		//Podesi PB4 kao izlaz
	
	uint8_t toggle_flag = 0;
	
    while(1){
		if(read_pin(&PORTD, GPIO_PIN6)) set_pin(&PORTB, GPIO_PIN3);	//Ukoliko je pritisnut taster na pinu PD6 upali diodu na pinu PB3
  be:	66 e0       	ldi	r22, 0x06	; 6
  c0:	8b e2       	ldi	r24, 0x2B	; 43
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 c3 00 	call	0x186	; 0x186 <read_pin>
  c8:	89 2b       	or	r24, r25
  ca:	31 f0       	breq	.+12     	; 0xd8 <main+0x58>
  cc:	63 e0       	ldi	r22, 0x03	; 3
  ce:	85 e2       	ldi	r24, 0x25	; 37
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 a4 00 	call	0x148	; 0x148 <set_pin>
  d6:	05 c0       	rjmp	.+10     	; 0xe2 <main+0x62>
		else  clear_pin(&PORTB, GPIO_PIN3);							//u suprotnom je ugasi
  d8:	63 e0       	ldi	r22, 0x03	; 3
  da:	85 e2       	ldi	r24, 0x25	; 37
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 b3 00 	call	0x166	; 0x166 <clear_pin>
		
		if(read_pin(&PORTD, GPIO_PIN7) && !toggle_flag){			//Svaki put kada je pritisnut taster na pinu PD7 promeni stanje pina PB4
  e2:	67 e0       	ldi	r22, 0x07	; 7
  e4:	8b e2       	ldi	r24, 0x2B	; 43
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 c3 00 	call	0x186	; 0x186 <read_pin>
  ec:	89 2b       	or	r24, r25
  ee:	21 f3       	breq	.-56     	; 0xb8 <main+0x38>
  f0:	c1 11       	cpse	r28, r1
  f2:	e4 cf       	rjmp	.-56     	; 0xbc <main+0x3c>
			toggle_pin(&PORTB, GPIO_PIN4);
  f4:	64 e0       	ldi	r22, 0x04	; 4
  f6:	85 e2       	ldi	r24, 0x25	; 37
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <toggle_pin>
			toggle_flag = 1;
  fe:	c1 2f       	mov	r28, r17
 100:	de cf       	rjmp	.-68     	; 0xbe <main+0x3e>

00000102 <set_pin_dir>:

#include "gpio.h"

void set_pin_dir(volatile uint8_t *target_port, uint8_t pin_no, uint8_t dir)
{
	switch(dir){
 102:	44 23       	and	r20, r20
 104:	89 f0       	breq	.+34     	; 0x128 <set_pin_dir+0x26>
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	f1 f4       	brne	.+60     	; 0x146 <set_pin_dir+0x44>
	case OUTPUT:
		(*target_port) |= (1 << pin_no);
 10a:	fc 01       	movw	r30, r24
 10c:	40 81       	ld	r20, Z
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	f9 01       	movw	r30, r18
 114:	02 c0       	rjmp	.+4      	; 0x11a <set_pin_dir+0x18>
 116:	ee 0f       	add	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <set_pin_dir+0x14>
 11e:	bf 01       	movw	r22, r30
 120:	64 2b       	or	r22, r20
 122:	fc 01       	movw	r30, r24
 124:	60 83       	st	Z, r22
		break;
 126:	08 95       	ret
	case INPUT:
		(*target_port) &= ~(1 << pin_no);
 128:	fc 01       	movw	r30, r24
 12a:	40 81       	ld	r20, Z
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	f9 01       	movw	r30, r18
 132:	02 c0       	rjmp	.+4      	; 0x138 <set_pin_dir+0x36>
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <set_pin_dir+0x32>
 13c:	bf 01       	movw	r22, r30
 13e:	60 95       	com	r22
 140:	64 23       	and	r22, r20
 142:	fc 01       	movw	r30, r24
 144:	60 83       	st	Z, r22
 146:	08 95       	ret

00000148 <set_pin>:
	}
}

void set_pin(volatile uint8_t *target_port, uint8_t pin_no)
{
	(*target_port) |= (1 << pin_no);
 148:	fc 01       	movw	r30, r24
 14a:	40 81       	ld	r20, Z
 14c:	21 e0       	ldi	r18, 0x01	; 1
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	f9 01       	movw	r30, r18
 152:	02 c0       	rjmp	.+4      	; 0x158 <set_pin+0x10>
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <set_pin+0xc>
 15c:	bf 01       	movw	r22, r30
 15e:	64 2b       	or	r22, r20
 160:	fc 01       	movw	r30, r24
 162:	60 83       	st	Z, r22
 164:	08 95       	ret

00000166 <clear_pin>:
}

void clear_pin(volatile uint8_t *target_port, uint8_t pin_no)
{
	(*target_port) &= ~(1 << pin_no);
 166:	fc 01       	movw	r30, r24
 168:	40 81       	ld	r20, Z
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	f9 01       	movw	r30, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <clear_pin+0x10>
 172:	ee 0f       	add	r30, r30
 174:	ff 1f       	adc	r31, r31
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <clear_pin+0xc>
 17a:	bf 01       	movw	r22, r30
 17c:	60 95       	com	r22
 17e:	64 23       	and	r22, r20
 180:	fc 01       	movw	r30, r24
 182:	60 83       	st	Z, r22
 184:	08 95       	ret

00000186 <read_pin>:
	}
}

int read_pin(volatile uint8_t *target_port, uint8_t pin_no)
{
	uint8_t tmpPort = (*target_port) & (1 << pin_no);
 186:	fc 01       	movw	r30, r24
 188:	20 81       	ld	r18, Z
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	ac 01       	movw	r20, r24
 190:	02 c0       	rjmp	.+4      	; 0x196 <read_pin+0x10>
 192:	44 0f       	add	r20, r20
 194:	55 1f       	adc	r21, r21
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <read_pin+0xc>
 19a:	ba 01       	movw	r22, r20
 19c:	62 23       	and	r22, r18

	if(tmpPort != 0) return 1;
 19e:	11 f4       	brne	.+4      	; 0x1a4 <read_pin+0x1e>
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
	else return 0;
}
 1a4:	08 95       	ret

000001a6 <toggle_pin>:

void toggle_pin(volatile uint8_t *target_port, uint8_t pin_no)
{
 1a6:	fc 01       	movw	r30, r24
	uint8_t tmpPort = (*(target_port)) & (1 << pin_no);
 1a8:	20 81       	ld	r18, Z
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	ac 01       	movw	r20, r24
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <toggle_pin+0x10>
 1b2:	44 0f       	add	r20, r20
 1b4:	55 1f       	adc	r21, r21
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <toggle_pin+0xc>
 1ba:	ba 01       	movw	r22, r20
 1bc:	82 2f       	mov	r24, r18
 1be:	84 23       	and	r24, r20

	if(tmpPort != 0) (*target_port) &= ~(1 << pin_no);
 1c0:	29 f0       	breq	.+10     	; 0x1cc <toggle_pin+0x26>
 1c2:	80 81       	ld	r24, Z
 1c4:	60 95       	com	r22
 1c6:	68 23       	and	r22, r24
 1c8:	60 83       	st	Z, r22
 1ca:	08 95       	ret
	else (*target_port) |= (1 << pin_no);
 1cc:	80 81       	ld	r24, Z
 1ce:	68 2b       	or	r22, r24
 1d0:	60 83       	st	Z, r22
 1d2:	08 95       	ret

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
